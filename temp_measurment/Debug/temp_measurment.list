
temp_measurment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fec  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800612c  0800612c  0000712c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080062b8  080062b8  000072b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080062c0  080062c0  000072c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080062c4  080062c4  000072c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000008  080062c8  00008008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000028c  20000064  08006324  00008064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002f0  08006324  000082f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014c65  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a2c  00000000  00000000  0001ccf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001690  00000000  00000000  0001f728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001137  00000000  00000000  00020db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023a8d  00000000  00000000  00021eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000140ec  00000000  00000000  0004597c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000eb995  00000000  00000000  00059a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001453fd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000064ac  00000000  00000000  00145440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  0014b8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000064 	.word	0x20000064
 800015c:	00000000 	.word	0x00000000
 8000160:	08006114 	.word	0x08006114

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000068 	.word	0x20000068
 800017c:	08006114 	.word	0x08006114

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800052e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800053c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000544:	68fb      	ldr	r3, [r7, #12]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d102      	bne.n	800056a <HAL_GPIO_EXTI_Callback+0x16>
	{
		exti_interupt=true;
 8000564:	4b04      	ldr	r3, [pc, #16]	@ (8000578 <HAL_GPIO_EXTI_Callback+0x24>)
 8000566:	2201      	movs	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]
	}
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	2000019c 	.word	0x2000019c

0800057c <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	rtc_interupt = true;
 8000584:	4b04      	ldr	r3, [pc, #16]	@ (8000598 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000019d 	.word	0x2000019d

0800059c <calculate_temperature>:

int32_t calculate_temperature(uint16_t raw_value)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
	uint16_t temp_mv = (3000*raw_value)/4096;
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da01      	bge.n	80005b8 <calculate_temperature+0x1c>
 80005b4:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80005b8:	131b      	asrs	r3, r3, #12
 80005ba:	81fb      	strh	r3, [r7, #14]
	int32_t retval = (int32_t)(1.22f*temp_mv-785)/2.5f + 30;
 80005bc:	89fb      	ldrh	r3, [r7, #14]
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000608 <calculate_temperature+0x6c>
 80005ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ce:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800060c <calculate_temperature+0x70>
 80005d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005de:	eef0 6a04 	vmov.f32	s13, #4	@ 0x40200000  2.5
 80005e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005e6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80005ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005f2:	ee17 3a90 	vmov	r3, s15
 80005f6:	60bb      	str	r3, [r7, #8]
	return retval;
 80005f8:	68bb      	ldr	r3, [r7, #8]

}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	3f9c28f6 	.word	0x3f9c28f6
 800060c:	44444000 	.word	0x44444000

08000610 <calculate_average>:

uint16_t calculate_average(uint16_t* values,uint32_t len)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
	int32_t sum=0;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	e00b      	b.n	800063c <calculate_average+0x2c>
	{
		  sum+=values[i];
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	4413      	add	r3, r2
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4413      	add	r3, r2
 8000634:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	3301      	adds	r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	429a      	cmp	r2, r3
 8000642:	d8ef      	bhi.n	8000624 <calculate_average+0x14>
	}
	return (uint16_t)sum/len;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	b29b      	uxth	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000650:	b29b      	uxth	r3, r3
}
 8000652:	4618      	mov	r0, r3
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <measure_temperature>:

int32_t measure_temperature()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	@ 0x28
 8000664:	af00      	add	r7, sp, #0
	uint16_t raw_values[N_SAMPLES] = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	221e      	movs	r2, #30
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f005 f8d1 	bl	8005814 <memset>
	for (int i = 0; i < N_SAMPLES; i++)
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
 8000676:	e018      	b.n	80006aa <measure_temperature+0x4a>
	{
	  HAL_ADC_Start(&hadc1);
 8000678:	4815      	ldr	r0, [pc, #84]	@ (80006d0 <measure_temperature+0x70>)
 800067a:	f001 f911 	bl	80018a0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800067e:	f04f 31ff 	mov.w	r1, #4294967295
 8000682:	4813      	ldr	r0, [pc, #76]	@ (80006d0 <measure_temperature+0x70>)
 8000684:	f001 f993 	bl	80019ae <HAL_ADC_PollForConversion>
	  raw_values[i] = HAL_ADC_GetValue(&hadc1);
 8000688:	4811      	ldr	r0, [pc, #68]	@ (80006d0 <measure_temperature+0x70>)
 800068a:	f001 fa1d 	bl	8001ac8 <HAL_ADC_GetValue>
 800068e:	4603      	mov	r3, r0
 8000690:	b29a      	uxth	r2, r3
 8000692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	3328      	adds	r3, #40	@ 0x28
 8000698:	443b      	add	r3, r7
 800069a:	f823 2c24 	strh.w	r2, [r3, #-36]
	  HAL_ADC_Stop(&hadc1);
 800069e:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <measure_temperature+0x70>)
 80006a0:	f001 f952 	bl	8001948 <HAL_ADC_Stop>
	for (int i = 0; i < N_SAMPLES; i++)
 80006a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a6:	3301      	adds	r3, #1
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80006aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ac:	2b0e      	cmp	r3, #14
 80006ae:	dde3      	ble.n	8000678 <measure_temperature+0x18>
	}
	uint16_t average = calculate_average(raw_values,N_SAMPLES);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	210f      	movs	r1, #15
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ffab 	bl	8000610 <calculate_average>
 80006ba:	4603      	mov	r3, r0
 80006bc:	847b      	strh	r3, [r7, #34]	@ 0x22
	return calculate_temperature(average);
 80006be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff6b 	bl	800059c <calculate_temperature>
 80006c6:	4603      	mov	r3, r0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3728      	adds	r7, #40	@ 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000080 	.word	0x20000080

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	char msg[10] = {0};
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	809a      	strh	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 fcaf 	bl	8001048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f8a1 	bl	8000830 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ee:	f000 f90b 	bl	8000908 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f000 fa09 	bl	8000b08 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006f6:	f000 f9bb 	bl	8000a70 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80006fa:	f000 f923 	bl	8000944 <MX_ADC1_Init>
  MX_RTC_Init();
 80006fe:	f000 f985 	bl	8000a0c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  char* str = "Going into SLEEP MODE\r\n";
 8000702:	4b42      	ldr	r3, [pc, #264]	@ (800080c <main+0x138>)
 8000704:	617b      	str	r3, [r7, #20]
  HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000706:	6978      	ldr	r0, [r7, #20]
 8000708:	f7ff fd3a 	bl	8000180 <strlen>
 800070c:	4603      	mov	r3, r0
 800070e:	b29a      	uxth	r2, r3
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	6979      	ldr	r1, [r7, #20]
 8000716:	483e      	ldr	r0, [pc, #248]	@ (8000810 <main+0x13c>)
 8000718:	f004 fa84 	bl	8004c24 <HAL_UART_Transmit>
//  for (int i = 0; i < 10; i++) {
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
//	  HAL_Delay(500);
//	}

  HAL_SuspendTick();
 800071c:	f000 fd3e 	bl	800119c <HAL_SuspendTick>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2102      	movs	r1, #2
 8000724:	483b      	ldr	r0, [pc, #236]	@ (8000814 <main+0x140>)
 8000726:	f002 f9b9 	bl	8002a9c <HAL_GPIO_WritePin>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // enter STOP MODE
 800072a:	2101      	movs	r1, #1
 800072c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000730:	f002 f9f4 	bl	8002b1c <HAL_PWR_EnterSTOPMode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(exti_interupt || rtc_interupt)
 8000734:	4b38      	ldr	r3, [pc, #224]	@ (8000818 <main+0x144>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d103      	bne.n	8000744 <main+0x70>
 800073c:	4b37      	ldr	r3, [pc, #220]	@ (800081c <main+0x148>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0f7      	beq.n	8000734 <main+0x60>
	  {
		  // WAKE UP
		  SystemClock_Config();
 8000744:	f000 f874 	bl	8000830 <SystemClock_Config>
		  HAL_ResumeTick();
 8000748:	f000 fd38 	bl	80011bc <HAL_ResumeTick>
		  char *str;
		  if(exti_interupt)
 800074c:	4b32      	ldr	r3, [pc, #200]	@ (8000818 <main+0x144>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00d      	beq.n	8000770 <main+0x9c>
		  {
			  str = "WAKEUP FROM EXTII\n\r";
 8000754:	4b32      	ldr	r3, [pc, #200]	@ (8000820 <main+0x14c>)
 8000756:	613b      	str	r3, [r7, #16]
			  HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen (str), HAL_MAX_DELAY);
 8000758:	6938      	ldr	r0, [r7, #16]
 800075a:	f7ff fd11 	bl	8000180 <strlen>
 800075e:	4603      	mov	r3, r0
 8000760:	b29a      	uxth	r2, r3
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	6939      	ldr	r1, [r7, #16]
 8000768:	4829      	ldr	r0, [pc, #164]	@ (8000810 <main+0x13c>)
 800076a:	f004 fa5b 	bl	8004c24 <HAL_UART_Transmit>
 800076e:	e010      	b.n	8000792 <main+0xbe>
		  }
		  else if(rtc_interupt)
 8000770:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <main+0x148>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00c      	beq.n	8000792 <main+0xbe>
		  {
			  str = "WAKEUP FROM RTC\n\r";
 8000778:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <main+0x150>)
 800077a:	613b      	str	r3, [r7, #16]
			  HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen (str), HAL_MAX_DELAY);
 800077c:	6938      	ldr	r0, [r7, #16]
 800077e:	f7ff fcff 	bl	8000180 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	b29a      	uxth	r2, r3
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	6939      	ldr	r1, [r7, #16]
 800078c:	4820      	ldr	r0, [pc, #128]	@ (8000810 <main+0x13c>)
 800078e:	f004 fa49 	bl	8004c24 <HAL_UART_Transmit>
		  }
		exti_interupt=false;
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <main+0x144>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
		rtc_interupt=false;
 8000798:	4b20      	ldr	r3, [pc, #128]	@ (800081c <main+0x148>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]


		// MEASURE TEMPERATURE
		__HAL_RCC_ADC_CLK_ENABLE();
 800079e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80007a2:	f7ff febd 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
		HAL_Delay(100);
 80007a6:	2064      	movs	r0, #100	@ 0x64
 80007a8:	f000 fcd4 	bl	8001154 <HAL_Delay>
		int32_t temperature = measure_temperature();
 80007ac:	f7ff ff58 	bl	8000660 <measure_temperature>
 80007b0:	60f8      	str	r0, [r7, #12]
		sprintf(msg,"Temp: %hu\r\n",(int)temperature);
 80007b2:	463b      	mov	r3, r7
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	491c      	ldr	r1, [pc, #112]	@ (8000828 <main+0x154>)
 80007b8:	4618      	mov	r0, r3
 80007ba:	f005 f80b 	bl	80057d4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007be:	463b      	mov	r3, r7
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fcdd 	bl	8000180 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	4639      	mov	r1, r7
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295
 80007d0:	480f      	ldr	r0, [pc, #60]	@ (8000810 <main+0x13c>)
 80007d2:	f004 fa27 	bl	8004c24 <HAL_UART_Transmit>
//		for (int i = 0; i < 10; i++) {
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
//			HAL_Delay(500);
//		}

		str = "GOING BACK TO SLEEP \n\n\r";
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <main+0x158>)
 80007d8:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen (str), HAL_MAX_DELAY);
 80007da:	6938      	ldr	r0, [r7, #16]
 80007dc:	f7ff fcd0 	bl	8000180 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	6939      	ldr	r1, [r7, #16]
 80007ea:	4809      	ldr	r0, [pc, #36]	@ (8000810 <main+0x13c>)
 80007ec:	f004 fa1a 	bl	8004c24 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2102      	movs	r1, #2
 80007f4:	4807      	ldr	r0, [pc, #28]	@ (8000814 <main+0x140>)
 80007f6:	f002 f951 	bl	8002a9c <HAL_GPIO_WritePin>

		HAL_SuspendTick();
 80007fa:	f000 fccf 	bl	800119c <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // enter STOP MODE
 80007fe:	2101      	movs	r1, #1
 8000800:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000804:	f002 f98a 	bl	8002b1c <HAL_PWR_EnterSTOPMode>
	  if(exti_interupt || rtc_interupt)
 8000808:	e794      	b.n	8000734 <main+0x60>
 800080a:	bf00      	nop
 800080c:	0800612c 	.word	0x0800612c
 8000810:	20000108 	.word	0x20000108
 8000814:	48000400 	.word	0x48000400
 8000818:	2000019c 	.word	0x2000019c
 800081c:	2000019d 	.word	0x2000019d
 8000820:	08006144 	.word	0x08006144
 8000824:	08006158 	.word	0x08006158
 8000828:	0800616c 	.word	0x0800616c
 800082c:	08006178 	.word	0x08006178

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09a      	sub	sp, #104	@ 0x68
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	2248      	movs	r2, #72	@ 0x48
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f004 ffe8 	bl	8005814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
 8000852:	615a      	str	r2, [r3, #20]
 8000854:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000856:	4b2b      	ldr	r3, [pc, #172]	@ (8000904 <SystemClock_Config+0xd4>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800085e:	4a29      	ldr	r2, [pc, #164]	@ (8000904 <SystemClock_Config+0xd4>)
 8000860:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000864:	6013      	str	r3, [r2, #0]
 8000866:	4b27      	ldr	r3, [pc, #156]	@ (8000904 <SystemClock_Config+0xd4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000872:	232b      	movs	r3, #43	@ 0x2b
 8000874:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000876:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000882:	2301      	movs	r3, #1
 8000884:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000886:	2340      	movs	r3, #64	@ 0x40
 8000888:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800088a:	2300      	movs	r3, #0
 800088c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800088e:	2360      	movs	r3, #96	@ 0x60
 8000890:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000892:	2305      	movs	r3, #5
 8000894:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800089a:	2301      	movs	r3, #1
 800089c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008a2:	2318      	movs	r3, #24
 80008a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80008a6:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 80008aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ac:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008b0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008b6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0320 	add.w	r3, r7, #32
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 fd1f 	bl	8003300 <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008c8:	f000 f994 	bl	8000bf4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008cc:	236f      	movs	r3, #111	@ 0x6f
 80008ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2303      	movs	r3, #3
 80008d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80008e0:	2380      	movs	r3, #128	@ 0x80
 80008e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2102      	movs	r1, #2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 f87b 	bl	80039e8 <HAL_RCC_ClockConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008f8:	f000 f97c 	bl	8000bf4 <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	3768      	adds	r7, #104	@ 0x68
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	58000400 	.word	0x58000400

08000908 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	@ 0x50
 800090c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800090e:	463b      	mov	r3, r7
 8000910:	2250      	movs	r2, #80	@ 0x50
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f004 ff7d 	bl	8005814 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800091a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800091e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000920:	2300      	movs	r3, #0
 8000922:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000924:	2300      	movs	r3, #0
 8000926:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4618      	mov	r0, r3
 800092c:	f003 fc99 	bl	8004262 <HAL_RCCEx_PeriphCLKConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000936:	f000 f95d 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800093a:	bf00      	nop
 800093c:	3750      	adds	r7, #80	@ 0x50
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800095a:	4b29      	ldr	r3, [pc, #164]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 800095c:	4a29      	ldr	r2, [pc, #164]	@ (8000a04 <MX_ADC1_Init+0xc0>)
 800095e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000960:	4b27      	ldr	r3, [pc, #156]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 8000962:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000966:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000968:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096e:	4b24      	ldr	r3, [pc, #144]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000974:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097a:	4b21      	ldr	r3, [pc, #132]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 800097c:	2204      	movs	r2, #4
 800097e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000980:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 8000982:	2200      	movs	r2, #0
 8000984:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000986:	4b1e      	ldr	r3, [pc, #120]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 8000988:	2200      	movs	r2, #0
 800098a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800098c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 800098e:	2201      	movs	r2, #1
 8000990:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000992:	4b1b      	ldr	r3, [pc, #108]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 8000994:	2200      	movs	r2, #0
 8000996:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800099a:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 800099c:	2200      	movs	r2, #0
 800099e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a0:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009a6:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ae:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009bc:	4810      	ldr	r0, [pc, #64]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 80009be:	f000 fe23 	bl	8001608 <HAL_ADC_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80009c8:	f000 f914 	bl	8000bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_ADC1_Init+0xc4>)
 80009ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009d0:	2306      	movs	r3, #6
 80009d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80009d4:	2307      	movs	r3, #7
 80009d6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009d8:	237f      	movs	r3, #127	@ 0x7f
 80009da:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009dc:	2304      	movs	r3, #4
 80009de:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 80009ea:	f001 f87b 	bl	8001ae4 <HAL_ADC_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80009f4:	f000 f8fe 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000080 	.word	0x20000080
 8000a04:	50040000 	.word	0x50040000
 8000a08:	c7520000 	.word	0xc7520000

08000a0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a10:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <MX_RTC_Init+0x5c>)
 8000a12:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <MX_RTC_Init+0x60>)
 8000a14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a16:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_RTC_Init+0x5c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <MX_RTC_Init+0x5c>)
 8000a1e:	227f      	movs	r2, #127	@ 0x7f
 8000a20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_RTC_Init+0x5c>)
 8000a24:	22ff      	movs	r2, #255	@ 0xff
 8000a26:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_RTC_Init+0x5c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_RTC_Init+0x5c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_RTC_Init+0x5c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <MX_RTC_Init+0x5c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a40:	4809      	ldr	r0, [pc, #36]	@ (8000a68 <MX_RTC_Init+0x5c>)
 8000a42:	f003 fe95 	bl	8004770 <HAL_RTC_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a4c:	f000 f8d2 	bl	8000bf4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000a50:	2204      	movs	r2, #4
 8000a52:	210a      	movs	r1, #10
 8000a54:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <MX_RTC_Init+0x5c>)
 8000a56:	f003 ff8b 	bl	8004970 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 f8c8 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200000e4 	.word	0x200000e4
 8000a6c:	40002800 	.word	0x40002800

08000a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a74:	4b22      	ldr	r3, [pc, #136]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000a76:	4a23      	ldr	r2, [pc, #140]	@ (8000b04 <MX_USART1_UART_Init+0x94>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000a7c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000ab8:	4811      	ldr	r0, [pc, #68]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000aba:	f004 f85b 	bl	8004b74 <HAL_HalfDuplex_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ac4:	f000 f896 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000acc:	f004 fdb8 	bl	8005640 <HAL_UARTEx_SetTxFifoThreshold>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ad6:	f000 f88d 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ada:	2100      	movs	r1, #0
 8000adc:	4808      	ldr	r0, [pc, #32]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000ade:	f004 fded 	bl	80056bc <HAL_UARTEx_SetRxFifoThreshold>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ae8:	f000 f884 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	@ (8000b00 <MX_USART1_UART_Init+0x90>)
 8000aee:	f004 fd6e 	bl	80055ce <HAL_UARTEx_DisableFifoMode>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000af8:	f000 f87c 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000108 	.word	0x20000108
 8000b04:	40013800 	.word	0x40013800

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1c:	2004      	movs	r0, #4
 8000b1e:	f7ff fcff 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2002      	movs	r0, #2
 8000b24:	f7ff fcfc 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f7ff fcf9 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	2008      	movs	r0, #8
 8000b30:	f7ff fcf6 	bl	8000520 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2123      	movs	r1, #35	@ 0x23
 8000b38:	482b      	ldr	r0, [pc, #172]	@ (8000be8 <MX_GPIO_Init+0xe0>)
 8000b3a:	f001 ffaf 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b3e:	2310      	movs	r3, #16
 8000b40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4827      	ldr	r0, [pc, #156]	@ (8000bec <MX_GPIO_Init+0xe4>)
 8000b50:	f001 fe34 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000b54:	2323      	movs	r3, #35	@ 0x23
 8000b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	481f      	ldr	r0, [pc, #124]	@ (8000be8 <MX_GPIO_Init+0xe0>)
 8000b6a:	f001 fe27 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000b6e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000b80:	230a      	movs	r3, #10
 8000b82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8c:	f001 fe16 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_0_Pin */
  GPIO_InitStruct.Pin = BTN_0_Pin;
 8000b90:	2301      	movs	r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b94:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN_0_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4813      	ldr	r0, [pc, #76]	@ (8000bf0 <MX_GPIO_Init+0xe8>)
 8000ba4:	f001 fe0a 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <MX_GPIO_Init+0xe8>)
 8000bbc:	f001 fdfe 	bl	80027bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2006      	movs	r0, #6
 8000bc6:	f001 fdc4 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bca:	2006      	movs	r0, #6
 8000bcc:	f001 fddb 	bl	8002786 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2007      	movs	r0, #7
 8000bd6:	f001 fdbc 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000bda:	2007      	movs	r0, #7
 8000bdc:	f001 fdd3 	bl	8002786 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	48000400 	.word	0x48000400
 8000bec:	48000800 	.word	0x48000800
 8000bf0:	48000c00 	.word	0x48000c00

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <Error_Handler+0x8>

08000c00 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <LL_AHB2_GRP1_EnableClock>:
{
 8000c22:	b480      	push	{r7}
 8000c24:	b085      	sub	sp, #20
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4013      	ands	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c78:	68fb      	ldr	r3, [r7, #12]
}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b085      	sub	sp, #20
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ca2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b096      	sub	sp, #88	@ 0x58
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	2250      	movs	r2, #80	@ 0x50
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f004 fd9b 	bl	8005814 <memset>
  if(hadc->Instance==ADC1)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <HAL_ADC_MspInit+0x50>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d113      	bne.n	8000d10 <HAL_ADC_MspInit+0x48>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ce8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cec:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL;
 8000cee:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000cf2:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 fab2 	bl	8004262 <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8000d04:	f7ff ff76 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d08:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d0c:	f7ff ff89 	bl	8000c22 <LL_AHB2_GRP1_EnableClock>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d10:	bf00      	nop
 8000d12:	3758      	adds	r7, #88	@ 0x58
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	50040000 	.word	0x50040000

08000d1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b096      	sub	sp, #88	@ 0x58
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	2250      	movs	r2, #80	@ 0x50
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 fd71 	bl	8005814 <memset>
  if(hrtc->Instance==RTC)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a13      	ldr	r2, [pc, #76]	@ (8000d84 <HAL_RTC_MspInit+0x68>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d11f      	bne.n	8000d7c <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8000d3c:	f001 fede 	bl	8002afc <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d44:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	4618      	mov	r0, r3
 8000d52:	f003 fa86 	bl	8004262 <HAL_RCCEx_PeriphCLKConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8000d5c:	f7ff ff4a 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d60:	f7ff ff4e 	bl	8000c00 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d64:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000d68:	f7ff ff74 	bl	8000c54 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2003      	movs	r0, #3
 8000d72:	f001 fcee 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000d76:	2003      	movs	r0, #3
 8000d78:	f001 fd05 	bl	8002786 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3758      	adds	r7, #88	@ 0x58
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40002800 	.word	0x40002800

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09c      	sub	sp, #112	@ 0x70
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2250      	movs	r2, #80	@ 0x50
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 fd33 	bl	8005814 <memset>
  if(huart->Instance==USART1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e2c <HAL_UART_MspInit+0xa4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d134      	bne.n	8000e22 <HAL_UART_MspInit+0x9a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 fa4c 	bl	8004262 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd0:	f7ff ff10 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dd4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000dd8:	f7ff ff55 	bl	8000c86 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f7ff ff20 	bl	8000c22 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 8000de2:	2340      	movs	r3, #64	@ 0x40
 8000de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de6:	2312      	movs	r3, #18
 8000de8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000df2:	2307      	movs	r3, #7
 8000df4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <HAL_UART_MspInit+0xa8>)
 8000dfe:	f001 fcdd 	bl	80027bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 8000e02:	2380      	movs	r3, #128	@ 0x80
 8000e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e12:	2307      	movs	r3, #7
 8000e14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4804      	ldr	r0, [pc, #16]	@ (8000e30 <HAL_UART_MspInit+0xa8>)
 8000e1e:	f001 fccd 	bl	80027bc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e22:	bf00      	nop
 8000e24:	3770      	adds	r7, #112	@ 0x70
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40013800 	.word	0x40013800
 8000e30:	48000400 	.word	0x48000400

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <NMI_Handler+0x4>

08000e3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8a:	f000 f937 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000e98:	4802      	ldr	r0, [pc, #8]	@ (8000ea4 <RTC_WKUP_IRQHandler+0x10>)
 8000e9a:	f003 fe25 	bl	8004ae8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200000e4 	.word	0x200000e4

08000ea8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_0_Pin);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f001 fe0d 	bl	8002acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f001 fe06 	bl	8002acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	@ (8000f20 <_sbrk+0x5c>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <_sbrk+0x60>)
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <_sbrk+0x64>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <_sbrk+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d207      	bcs.n	8000f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef4:	f004 fc96 	bl	8005824 <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a05      	ldr	r2, [pc, #20]	@ (8000f28 <_sbrk+0x64>)
 8000f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20030000 	.word	0x20030000
 8000f24:	00000400 	.word	0x00000400
 8000f28:	200001a0 	.word	0x200001a0
 8000f2c:	200002f0 	.word	0x200002f0

08000f30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000f34:	4b24      	ldr	r3, [pc, #144]	@ (8000fc8 <SystemInit+0x98>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3a:	4a23      	ldr	r2, [pc, #140]	@ (8000fc8 <SystemInit+0x98>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f58:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000f5c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f68:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <SystemInit+0x9c>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f7a:	f023 0305 	bic.w	r3, r3, #5
 8000f7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f8e:	f023 0301 	bic.w	r3, r3, #1
 8000f92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f9a:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <SystemInit+0xa0>)
 8000f9c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	@ (8000fd0 <SystemInit+0xa0>)
 8000fa4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fb4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00
 8000fcc:	faf6fefb 	.word	0xfaf6fefb
 8000fd0:	22041000 	.word	0x22041000

08000fd4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000fd4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd8:	3304      	adds	r3, #4

08000fda <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fda:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fdc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000fde:	d3f9      	bcc.n	8000fd4 <CopyDataInit>
  bx lr
 8000fe0:	4770      	bx	lr

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000fe2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000fe4:	3004      	adds	r0, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000fe6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>
  bx lr
 8000fea:	4770      	bx	lr

08000fec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff0:	f7ff ff9e 	bl	8000f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ff4:	480b      	ldr	r0, [pc, #44]	@ (8001024 <LoopForever+0x6>)
 8000ff6:	490c      	ldr	r1, [pc, #48]	@ (8001028 <LoopForever+0xa>)
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800102c <LoopForever+0xe>)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f7ff ffed 	bl	8000fda <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001000:	480b      	ldr	r0, [pc, #44]	@ (8001030 <LoopForever+0x12>)
 8001002:	490c      	ldr	r1, [pc, #48]	@ (8001034 <LoopForever+0x16>)
 8001004:	4a0c      	ldr	r2, [pc, #48]	@ (8001038 <LoopForever+0x1a>)
 8001006:	2300      	movs	r3, #0
 8001008:	f7ff ffe7 	bl	8000fda <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800100c:	480b      	ldr	r0, [pc, #44]	@ (800103c <LoopForever+0x1e>)
 800100e:	490c      	ldr	r1, [pc, #48]	@ (8001040 <LoopForever+0x22>)
 8001010:	2300      	movs	r3, #0
 8001012:	f7ff ffe8 	bl	8000fe6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001016:	f004 fc0b 	bl	8005830 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800101a:	f7ff fb5b 	bl	80006d4 <main>

0800101e <LoopForever>:

LoopForever:
  b LoopForever
 800101e:	e7fe      	b.n	800101e <LoopForever>
  ldr   r0, =_estack
 8001020:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001024:	20000008 	.word	0x20000008
 8001028:	20000064 	.word	0x20000064
 800102c:	080062c8 	.word	0x080062c8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001030:	20030000 	.word	0x20030000
 8001034:	20030000 	.word	0x20030000
 8001038:	08006324 	.word	0x08006324
  INIT_BSS _sbss, _ebss
 800103c:	20000064 	.word	0x20000064
 8001040:	200002f0 	.word	0x200002f0

08001044 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC1_IRQHandler>
	...

08001048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <HAL_Init+0x3c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a0b      	ldr	r2, [pc, #44]	@ (8001084 <HAL_Init+0x3c>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105e:	2003      	movs	r0, #3
 8001060:	f001 fb6c 	bl	800273c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001064:	2000      	movs	r0, #0
 8001066:	f000 f80f 	bl	8001088 <HAL_InitTick>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	e001      	b.n	800107a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001076:	f7ff fe1f 	bl	8000cb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800107a:	79fb      	ldrb	r3, [r7, #7]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	58004000 	.word	0x58004000

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <HAL_InitTick+0x6c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d024      	beq.n	80010e6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800109c:	f002 fe50 	bl	8003d40 <HAL_RCC_GetHCLKFreq>
 80010a0:	4602      	mov	r2, r0
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <HAL_InitTick+0x6c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4619      	mov	r1, r3
 80010a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fb74 	bl	80027a2 <HAL_SYSTICK_Config>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10f      	bne.n	80010e0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	d809      	bhi.n	80010da <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c6:	2200      	movs	r2, #0
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	f04f 30ff 	mov.w	r0, #4294967295
 80010ce:	f001 fb40 	bl	8002752 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d2:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <HAL_InitTick+0x70>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e007      	b.n	80010ea <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e004      	b.n	80010ea <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e001      	b.n	80010ea <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000010 	.word	0x20000010
 80010f8:	2000000c 	.word	0x2000000c

080010fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000010 	.word	0x20000010
 8001120:	200001a4 	.word	0x200001a4

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200001a4 	.word	0x200001a4

0800113c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <HAL_GetTickPrio+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	2000000c 	.word	0x2000000c

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ffe2 	bl	8001124 <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffd2 	bl	8001124 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000010 	.word	0x20000010

0800119c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <HAL_SuspendTick+0x1c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <HAL_SuspendTick+0x1c>)
 80011a6:	f023 0302 	bic.w	r3, r3, #2
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <HAL_ResumeTick+0x1c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <HAL_ResumeTick+0x1c>)
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e010 	.word	0xe000e010

080011dc <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	609a      	str	r2, [r3, #8]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3360      	adds	r3, #96	@ 0x60
 8001256:	461a      	mov	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <LL_ADC_SetOffset+0x44>)
 8001266:	4013      	ands	r3, r2
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	4313      	orrs	r3, r2
 8001274:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800127c:	bf00      	nop
 800127e:	371c      	adds	r7, #28
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	03fff000 	.word	0x03fff000

0800128c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3360      	adds	r3, #96	@ 0x60
 800129a:	461a      	mov	r2, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3360      	adds	r3, #96	@ 0x60
 80012c8:	461a      	mov	r2, r3
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	431a      	orrs	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012e2:	bf00      	nop
 80012e4:	371c      	adds	r7, #28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001306:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3330      	adds	r3, #48	@ 0x30
 8001324:	461a      	mov	r2, r3
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	f003 030c 	and.w	r3, r3, #12
 8001330:	4413      	add	r3, r2
 8001332:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	f003 031f 	and.w	r3, r3, #31
 800133e:	211f      	movs	r1, #31
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	401a      	ands	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	0e9b      	lsrs	r3, r3, #26
 800134c:	f003 011f 	and.w	r1, r3, #31
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	431a      	orrs	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001360:	bf00      	nop
 8001362:	371c      	adds	r7, #28
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3314      	adds	r3, #20
 800137c:	461a      	mov	r2, r3
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	0e5b      	lsrs	r3, r3, #25
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	0d1b      	lsrs	r3, r3, #20
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	2107      	movs	r1, #7
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	401a      	ands	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	0d1b      	lsrs	r3, r3, #20
 80013a6:	f003 031f 	and.w	r3, r3, #31
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	431a      	orrs	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80013b6:	bf00      	nop
 80013b8:	371c      	adds	r7, #28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013dc:	43db      	mvns	r3, r3
 80013de:	401a      	ands	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0318 	and.w	r3, r3, #24
 80013e6:	4908      	ldr	r1, [pc, #32]	@ (8001408 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013e8:	40d9      	lsrs	r1, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	400b      	ands	r3, r1
 80013ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f2:	431a      	orrs	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	0007ffff 	.word	0x0007ffff

0800140c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800141c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6093      	str	r3, [r2, #8]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001444:	d101      	bne.n	800144a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001468:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800146c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001490:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001494:	d101      	bne.n	800149a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014e4:	f043 0202 	orr.w	r2, r3, #2
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <LL_ADC_IsEnabled+0x18>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <LL_ADC_IsEnabled+0x1a>
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b02      	cmp	r3, #2
 8001530:	d101      	bne.n	8001536 <LL_ADC_IsDisableOngoing+0x18>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <LL_ADC_IsDisableOngoing+0x1a>
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001554:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001558:	f043 0204 	orr.w	r2, r3, #4
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800157c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001580:	f043 0210 	orr.w	r2, r3, #16
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d101      	bne.n	80015ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015ce:	f043 0220 	orr.w	r2, r3, #32
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d101      	bne.n	80015fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e12e      	b.n	8001884 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001630:	2b00      	cmp	r3, #0
 8001632:	d109      	bne.n	8001648 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff fb47 	bl	8000cc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff feef 	bl	8001430 <LL_ADC_IsDeepPowerDownEnabled>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d004      	beq.n	8001662 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fed5 	bl	800140c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff0a 	bl	8001480 <LL_ADC_IsInternalRegulatorEnabled>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d115      	bne.n	800169e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff feee 	bl	8001458 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800167c:	4b83      	ldr	r3, [pc, #524]	@ (800188c <HAL_ADC_Init+0x284>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	4a83      	ldr	r2, [pc, #524]	@ (8001890 <HAL_ADC_Init+0x288>)
 8001684:	fba2 2303 	umull	r2, r3, r2, r3
 8001688:	099b      	lsrs	r3, r3, #6
 800168a:	3301      	adds	r3, #1
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001690:	e002      	b.n	8001698 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3b01      	subs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f9      	bne.n	8001692 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff feec 	bl	8001480 <LL_ADC_IsInternalRegulatorEnabled>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10d      	bne.n	80016ca <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b2:	f043 0210 	orr.w	r2, r3, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff60 	bl	8001594 <LL_ADC_REG_IsConversionOngoing>
 80016d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 80c7 	bne.w	8001872 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 80c3 	bne.w	8001872 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80016f4:	f043 0202 	orr.w	r2, r3, #2
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fef9 	bl	80014f8 <LL_ADC_IsEnabled>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10b      	bne.n	8001724 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800170c:	4861      	ldr	r0, [pc, #388]	@ (8001894 <HAL_ADC_Init+0x28c>)
 800170e:	f7ff fef3 	bl	80014f8 <LL_ADC_IsEnabled>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d105      	bne.n	8001724 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4619      	mov	r1, r3
 800171e:	485e      	ldr	r0, [pc, #376]	@ (8001898 <HAL_ADC_Init+0x290>)
 8001720:	f7ff fd5c 	bl	80011dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7e5b      	ldrb	r3, [r3, #25]
 8001728:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800172e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001734:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800173a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001742:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001744:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d106      	bne.n	8001764 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175a:	3b01      	subs	r3, #1
 800175c:	045b      	lsls	r3, r3, #17
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001768:	2b00      	cmp	r3, #0
 800176a:	d009      	beq.n	8001780 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001770:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001778:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	4b45      	ldr	r3, [pc, #276]	@ (800189c <HAL_ADC_Init+0x294>)
 8001788:	4013      	ands	r3, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	69b9      	ldr	r1, [r7, #24]
 8001790:	430b      	orrs	r3, r1
 8001792:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fefb 	bl	8001594 <LL_ADC_REG_IsConversionOngoing>
 800179e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff1c 	bl	80015e2 <LL_ADC_INJ_IsConversionOngoing>
 80017aa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d13d      	bne.n	800182e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d13a      	bne.n	800182e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017bc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017c4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017d4:	f023 0302 	bic.w	r3, r3, #2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	69b9      	ldr	r1, [r7, #24]
 80017de:	430b      	orrs	r3, r1
 80017e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d118      	bne.n	800181e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80017f6:	f023 0304 	bic.w	r3, r3, #4
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001802:	4311      	orrs	r1, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001808:	4311      	orrs	r1, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800180e:	430a      	orrs	r2, r1
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	e007      	b.n	800182e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0201 	bic.w	r2, r2, #1
 800182c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d10c      	bne.n	8001850 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183c:	f023 010f 	bic.w	r1, r3, #15
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	1e5a      	subs	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	631a      	str	r2, [r3, #48]	@ 0x30
 800184e:	e007      	b.n	8001860 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 020f 	bic.w	r2, r2, #15
 800185e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001864:	f023 0303 	bic.w	r3, r3, #3
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001870:	e007      	b.n	8001882 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001876:	f043 0210 	orr.w	r2, r3, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001882:	7ffb      	ldrb	r3, [r7, #31]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000008 	.word	0x20000008
 8001890:	053e2d63 	.word	0x053e2d63
 8001894:	50040000 	.word	0x50040000
 8001898:	50040300 	.word	0x50040300
 800189c:	fff0c007 	.word	0xfff0c007

080018a0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fe71 	bl	8001594 <LL_ADC_REG_IsConversionOngoing>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d140      	bne.n	800193a <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_ADC_Start+0x26>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e03c      	b.n	8001940 <HAL_ADC_Start+0xa0>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fd8a 	bl	80023e8 <ADC_Enable>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d128      	bne.n	8001930 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018fe:	d106      	bne.n	800190e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001904:	f023 0206 	bic.w	r2, r3, #6
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	659a      	str	r2, [r3, #88]	@ 0x58
 800190c:	e002      	b.n	8001914 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	221c      	movs	r2, #28
 800191a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fe0b 	bl	8001544 <LL_ADC_REG_StartConversion>
 800192e:	e006      	b.n	800193e <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001938:	e001      	b.n	800193e <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800193a:	2302      	movs	r3, #2
 800193c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_ADC_Stop+0x16>
 800195a:	2302      	movs	r3, #2
 800195c:	e023      	b.n	80019a6 <HAL_ADC_Stop+0x5e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001966:	2103      	movs	r1, #3
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fc81 	bl	8002270 <ADC_ConversionStop>
 800196e:	4603      	mov	r3, r0
 8001970:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d111      	bne.n	800199c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 fdaf 	bl	80024dc <ADC_Disable>
 800197e:	4603      	mov	r3, r0
 8001980:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d109      	bne.n	800199c <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800198c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d102      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80019c0:	2308      	movs	r3, #8
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e010      	b.n	80019e8 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d8:	f043 0220 	orr.w	r2, r3, #32
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e06d      	b.n	8001ac0 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80019e4:	2304      	movs	r3, #4
 80019e6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019e8:	f7ff fb9c 	bl	8001124 <HAL_GetTick>
 80019ec:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019ee:	e021      	b.n	8001a34 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f6:	d01d      	beq.n	8001a34 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019f8:	f7ff fb94 	bl	8001124 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d302      	bcc.n	8001a0e <HAL_ADC_PollForConversion+0x60>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d112      	bne.n	8001a34 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a20:	f043 0204 	orr.w	r2, r3, #4
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e045      	b.n	8001ac0 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0d6      	beq.n	80019f0 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fc4b 	bl	80012ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d01c      	beq.n	8001a98 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7e5b      	ldrb	r3, [r3, #25]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d118      	bne.n	8001a98 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d111      	bne.n	8001a98 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d105      	bne.n	8001a98 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a90:	f043 0201 	orr.w	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d104      	bne.n	8001aa8 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e00a      	b.n	8001abe <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0b6      	sub	sp, #216	@ 0xd8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x22>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e39f      	b.n	8002246 <HAL_ADC_ConfigChannel+0x762>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fd3e 	bl	8001594 <LL_ADC_REG_IsConversionOngoing>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 8384 	bne.w	8002228 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6859      	ldr	r1, [r3, #4]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f7ff fbf1 	bl	8001314 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fd2c 	bl	8001594 <LL_ADC_REG_IsConversionOngoing>
 8001b3c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fd4c 	bl	80015e2 <LL_ADC_INJ_IsConversionOngoing>
 8001b4a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 81a6 	bne.w	8001ea4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f040 81a1 	bne.w	8001ea4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	6819      	ldr	r1, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f7ff fbfc 	bl	800136c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	08db      	lsrs	r3, r3, #3
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d00a      	beq.n	8001bac <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6919      	ldr	r1, [r3, #16]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ba6:	f7ff fb4d 	bl	8001244 <LL_ADC_SetOffset>
 8001baa:	e17b      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fb6a 	bl	800128c <LL_ADC_GetOffsetChannel>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10a      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0xf4>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fb5f 	bl	800128c <LL_ADC_GetOffsetChannel>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	0e9b      	lsrs	r3, r3, #26
 8001bd2:	f003 021f 	and.w	r2, r3, #31
 8001bd6:	e01e      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x132>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fb54 	bl	800128c <LL_ADC_GetOffsetChannel>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8001c06:	2320      	movs	r3, #32
 8001c08:	e004      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001c0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d105      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x14a>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	0e9b      	lsrs	r3, r3, #26
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	e018      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x17c>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001c4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8001c52:	2320      	movs	r3, #32
 8001c54:	e004      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8001c56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d106      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fb23 	bl	80012b8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2101      	movs	r1, #1
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fb07 	bl	800128c <LL_ADC_GetOffsetChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10a      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x1ba>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fafc 	bl	800128c <LL_ADC_GetOffsetChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	0e9b      	lsrs	r3, r3, #26
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	e01e      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x1f8>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff faf1 	bl	800128c <LL_ADC_GetOffsetChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001cbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001cc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	e004      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8001cd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d105      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x210>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0e9b      	lsrs	r3, r3, #26
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	e018      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x242>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001d08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001d10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e004      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8001d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d106      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2101      	movs	r1, #1
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fac0 	bl	80012b8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff faa4 	bl	800128c <LL_ADC_GetOffsetChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10a      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x280>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2102      	movs	r1, #2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fa99 	bl	800128c <LL_ADC_GetOffsetChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	0e9b      	lsrs	r3, r3, #26
 8001d5e:	f003 021f 	and.w	r2, r3, #31
 8001d62:	e01e      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x2be>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2102      	movs	r1, #2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fa8e 	bl	800128c <LL_ADC_GetOffsetChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001d82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001d8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8001d92:	2320      	movs	r3, #32
 8001d94:	e004      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001d96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d105      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x2d6>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0e9b      	lsrs	r3, r3, #26
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	e016      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x304>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001dcc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001dce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001dd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8001dda:	2320      	movs	r3, #32
 8001ddc:	e004      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8001dde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d106      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2200      	movs	r2, #0
 8001df2:	2102      	movs	r1, #2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fa5f 	bl	80012b8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2103      	movs	r1, #3
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fa43 	bl	800128c <LL_ADC_GetOffsetChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10a      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x342>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2103      	movs	r1, #3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fa38 	bl	800128c <LL_ADC_GetOffsetChannel>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	0e9b      	lsrs	r3, r3, #26
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	e017      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x372>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2103      	movs	r1, #3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fa2d 	bl	800128c <LL_ADC_GetOffsetChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001e3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e40:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001e42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	e003      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8001e4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d105      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x38a>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	0e9b      	lsrs	r3, r3, #26
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	e011      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x3ae>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001e7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8001e86:	2320      	movs	r3, #32
 8001e88:	e003      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8001e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d106      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2103      	movs	r1, #3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fa0a 	bl	80012b8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fb25 	bl	80014f8 <LL_ADC_IsEnabled>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f040 81c2 	bne.w	800223a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6819      	ldr	r1, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f7ff fa7e 	bl	80013c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4a8e      	ldr	r2, [pc, #568]	@ (8002108 <HAL_ADC_ConfigChannel+0x624>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	f040 8130 	bne.w	8002134 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10b      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x418>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0e9b      	lsrs	r3, r3, #26
 8001eea:	3301      	adds	r3, #1
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	2b09      	cmp	r3, #9
 8001ef2:	bf94      	ite	ls
 8001ef4:	2301      	movls	r3, #1
 8001ef6:	2300      	movhi	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	e019      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x44c>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001f0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f0c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001f0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8001f14:	2320      	movs	r3, #32
 8001f16:	e003      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8001f18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	3301      	adds	r3, #1
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	2b09      	cmp	r3, #9
 8001f28:	bf94      	ite	ls
 8001f2a:	2301      	movls	r3, #1
 8001f2c:	2300      	movhi	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d079      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x46c>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0e9b      	lsrs	r3, r3, #26
 8001f46:	3301      	adds	r3, #1
 8001f48:	069b      	lsls	r3, r3, #26
 8001f4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f4e:	e015      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x498>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f60:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001f68:	2320      	movs	r3, #32
 8001f6a:	e003      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	069b      	lsls	r3, r3, #26
 8001f78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x4b8>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0e9b      	lsrs	r3, r3, #26
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	e017      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x4e8>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	e003      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8001fb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	ea42 0103 	orr.w	r1, r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10a      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x50e>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	051b      	lsls	r3, r3, #20
 8001ff0:	e018      	b.n	8002024 <HAL_ADC_ConfigChannel+0x540>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002002:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e003      	b.n	8002016 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800200e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	3301      	adds	r3, #1
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002024:	430b      	orrs	r3, r1
 8002026:	e080      	b.n	800212a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002030:	2b00      	cmp	r3, #0
 8002032:	d107      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x560>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0e9b      	lsrs	r3, r3, #26
 800203a:	3301      	adds	r3, #1
 800203c:	069b      	lsls	r3, r3, #26
 800203e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002042:	e015      	b.n	8002070 <HAL_ADC_ConfigChannel+0x58c>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002054:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800205c:	2320      	movs	r3, #32
 800205e:	e003      	b.n	8002068 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	3301      	adds	r3, #1
 800206a:	069b      	lsls	r3, r3, #26
 800206c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x5ac>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0e9b      	lsrs	r3, r3, #26
 8002082:	3301      	adds	r3, #1
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	e017      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x5dc>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	61fb      	str	r3, [r7, #28]
  return result;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80020a8:	2320      	movs	r3, #32
 80020aa:	e003      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	3301      	adds	r3, #1
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	ea42 0103 	orr.w	r1, r2, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10d      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x608>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0e9b      	lsrs	r3, r3, #26
 80020d6:	3301      	adds	r3, #1
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	3b1e      	subs	r3, #30
 80020e4:	051b      	lsls	r3, r3, #20
 80020e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020ea:	e01d      	b.n	8002128 <HAL_ADC_ConfigChannel+0x644>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	613b      	str	r3, [r7, #16]
  return result;
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d103      	bne.n	800210c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002104:	2320      	movs	r3, #32
 8002106:	e005      	b.n	8002114 <HAL_ADC_ConfigChannel+0x630>
 8002108:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	3301      	adds	r3, #1
 8002116:	f003 021f 	and.w	r2, r3, #31
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	3b1e      	subs	r3, #30
 8002122:	051b      	lsls	r3, r3, #20
 8002124:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002128:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800212e:	4619      	mov	r1, r3
 8002130:	f7ff f91c 	bl	800136c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b45      	ldr	r3, [pc, #276]	@ (8002250 <HAL_ADC_ConfigChannel+0x76c>)
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d07c      	beq.n	800223a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002140:	4844      	ldr	r0, [pc, #272]	@ (8002254 <HAL_ADC_ConfigChannel+0x770>)
 8002142:	f7ff f871 	bl	8001228 <LL_ADC_GetCommonPathInternalCh>
 8002146:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800214a:	4843      	ldr	r0, [pc, #268]	@ (8002258 <HAL_ADC_ConfigChannel+0x774>)
 800214c:	f7ff f9d4 	bl	80014f8 <LL_ADC_IsEnabled>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d15e      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a40      	ldr	r2, [pc, #256]	@ (800225c <HAL_ADC_ConfigChannel+0x778>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d127      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x6cc>
 8002160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002164:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d121      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a39      	ldr	r2, [pc, #228]	@ (8002258 <HAL_ADC_ConfigChannel+0x774>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d161      	bne.n	800223a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002176:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800217a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800217e:	4619      	mov	r1, r3
 8002180:	4834      	ldr	r0, [pc, #208]	@ (8002254 <HAL_ADC_ConfigChannel+0x770>)
 8002182:	f7ff f83e 	bl	8001202 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002186:	4b36      	ldr	r3, [pc, #216]	@ (8002260 <HAL_ADC_ConfigChannel+0x77c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	099b      	lsrs	r3, r3, #6
 800218c:	4a35      	ldr	r2, [pc, #212]	@ (8002264 <HAL_ADC_ConfigChannel+0x780>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	099b      	lsrs	r3, r3, #6
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	4613      	mov	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80021a0:	e002      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f9      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ae:	e044      	b.n	800223a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002268 <HAL_ADC_ConfigChannel+0x784>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d113      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x6fe>
 80021ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10d      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a23      	ldr	r2, [pc, #140]	@ (8002258 <HAL_ADC_ConfigChannel+0x774>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d134      	bne.n	800223a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80021d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021d8:	4619      	mov	r1, r3
 80021da:	481e      	ldr	r0, [pc, #120]	@ (8002254 <HAL_ADC_ConfigChannel+0x770>)
 80021dc:	f7ff f811 	bl	8001202 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021e0:	e02b      	b.n	800223a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a21      	ldr	r2, [pc, #132]	@ (800226c <HAL_ADC_ConfigChannel+0x788>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d126      	bne.n	800223a <HAL_ADC_ConfigChannel+0x756>
 80021ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d120      	bne.n	800223a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a16      	ldr	r2, [pc, #88]	@ (8002258 <HAL_ADC_ConfigChannel+0x774>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d11b      	bne.n	800223a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002206:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800220a:	4619      	mov	r1, r3
 800220c:	4811      	ldr	r0, [pc, #68]	@ (8002254 <HAL_ADC_ConfigChannel+0x770>)
 800220e:	f7fe fff8 	bl	8001202 <LL_ADC_SetCommonPathInternalCh>
 8002212:	e012      	b.n	800223a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002218:	f043 0220 	orr.w	r2, r3, #32
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002226:	e008      	b.n	800223a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222c:	f043 0220 	orr.w	r2, r3, #32
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002242:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002246:	4618      	mov	r0, r3
 8002248:	37d8      	adds	r7, #216	@ 0xd8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	80080000 	.word	0x80080000
 8002254:	50040300 	.word	0x50040300
 8002258:	50040000 	.word	0x50040000
 800225c:	c7520000 	.word	0xc7520000
 8002260:	20000008 	.word	0x20000008
 8002264:	053e2d63 	.word	0x053e2d63
 8002268:	cb840000 	.word	0xcb840000
 800226c:	80000001 	.word	0x80000001

08002270 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f984 	bl	8001594 <LL_ADC_REG_IsConversionOngoing>
 800228c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f9a5 	bl	80015e2 <LL_ADC_INJ_IsConversionOngoing>
 8002298:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d103      	bne.n	80022a8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8098 	beq.w	80023d8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d02a      	beq.n	800230c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7e5b      	ldrb	r3, [r3, #25]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d126      	bne.n	800230c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7e1b      	ldrb	r3, [r3, #24]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d122      	bne.n	800230c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80022ca:	e014      	b.n	80022f6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	4a45      	ldr	r2, [pc, #276]	@ (80023e4 <ADC_ConversionStop+0x174>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d90d      	bls.n	80022f0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d8:	f043 0210 	orr.w	r2, r3, #16
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e074      	b.n	80023da <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	3301      	adds	r3, #1
 80022f4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002300:	2b40      	cmp	r3, #64	@ 0x40
 8002302:	d1e3      	bne.n	80022cc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2240      	movs	r2, #64	@ 0x40
 800230a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d014      	beq.n	800233c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f93c 	bl	8001594 <LL_ADC_REG_IsConversionOngoing>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00c      	beq.n	800233c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f8f9 	bl	800151e <LL_ADC_IsDisableOngoing>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d104      	bne.n	800233c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f918 	bl	800156c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d014      	beq.n	800236c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f94b 	bl	80015e2 <LL_ADC_INJ_IsConversionOngoing>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00c      	beq.n	800236c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff f8e1 	bl	800151e <LL_ADC_IsDisableOngoing>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d104      	bne.n	800236c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff f927 	bl	80015ba <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d005      	beq.n	800237e <ADC_ConversionStop+0x10e>
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d105      	bne.n	8002384 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002378:	230c      	movs	r3, #12
 800237a:	617b      	str	r3, [r7, #20]
        break;
 800237c:	e005      	b.n	800238a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800237e:	2308      	movs	r3, #8
 8002380:	617b      	str	r3, [r7, #20]
        break;
 8002382:	e002      	b.n	800238a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002384:	2304      	movs	r3, #4
 8002386:	617b      	str	r3, [r7, #20]
        break;
 8002388:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800238a:	f7fe fecb 	bl	8001124 <HAL_GetTick>
 800238e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002390:	e01b      	b.n	80023ca <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002392:	f7fe fec7 	bl	8001124 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b05      	cmp	r3, #5
 800239e:	d914      	bls.n	80023ca <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00d      	beq.n	80023ca <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b2:	f043 0210 	orr.w	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023be:	f043 0201 	orr.w	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e007      	b.n	80023da <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1dc      	bne.n	8002392 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	a33fffff 	.word	0xa33fffff

080023e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff f87d 	bl	80014f8 <LL_ADC_IsEnabled>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d15e      	bne.n	80024c2 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	4b30      	ldr	r3, [pc, #192]	@ (80024cc <ADC_Enable+0xe4>)
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00d      	beq.n	800242e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002416:	f043 0210 	orr.w	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002422:	f043 0201 	orr.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e04a      	b.n	80024c4 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff f838 	bl	80014a8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002438:	4825      	ldr	r0, [pc, #148]	@ (80024d0 <ADC_Enable+0xe8>)
 800243a:	f7fe fef5 	bl	8001228 <LL_ADC_GetCommonPathInternalCh>
 800243e:	4603      	mov	r3, r0
 8002440:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00f      	beq.n	8002468 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002448:	4b22      	ldr	r3, [pc, #136]	@ (80024d4 <ADC_Enable+0xec>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	099b      	lsrs	r3, r3, #6
 800244e:	4a22      	ldr	r2, [pc, #136]	@ (80024d8 <ADC_Enable+0xf0>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	3301      	adds	r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800245a:	e002      	b.n	8002462 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	3b01      	subs	r3, #1
 8002460:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f9      	bne.n	800245c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002468:	f7fe fe5c 	bl	8001124 <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800246e:	e021      	b.n	80024b4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff f83f 	bl	80014f8 <LL_ADC_IsEnabled>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d104      	bne.n	800248a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff f80f 	bl	80014a8 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800248a:	f7fe fe4b 	bl	8001124 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d90d      	bls.n	80024b4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249c:	f043 0210 	orr.w	r2, r3, #16
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e007      	b.n	80024c4 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d1d6      	bne.n	8002470 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	8000003f 	.word	0x8000003f
 80024d0:	50040300 	.word	0x50040300
 80024d4:	20000008 	.word	0x20000008
 80024d8:	053e2d63 	.word	0x053e2d63

080024dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff f818 	bl	800151e <LL_ADC_IsDisableOngoing>
 80024ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe ffff 	bl	80014f8 <LL_ADC_IsEnabled>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d047      	beq.n	8002590 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d144      	bne.n	8002590 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030d 	and.w	r3, r3, #13
 8002510:	2b01      	cmp	r3, #1
 8002512:	d10c      	bne.n	800252e <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe ffd9 	bl	80014d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2203      	movs	r2, #3
 8002524:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002526:	f7fe fdfd 	bl	8001124 <HAL_GetTick>
 800252a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800252c:	e029      	b.n	8002582 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e023      	b.n	8002592 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800254a:	f7fe fdeb 	bl	8001124 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d914      	bls.n	8002582 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256a:	f043 0210 	orr.w	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e007      	b.n	8002592 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1dc      	bne.n	800254a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ac:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b8:	4013      	ands	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ce:	4a04      	ldr	r2, [pc, #16]	@ (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	60d3      	str	r3, [r2, #12]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e8:	4b04      	ldr	r3, [pc, #16]	@ (80025fc <__NVIC_GetPriorityGrouping+0x18>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	f003 0307 	and.w	r3, r3, #7
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	2b00      	cmp	r3, #0
 8002610:	db0b      	blt.n	800262a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	4907      	ldr	r1, [pc, #28]	@ (8002638 <__NVIC_EnableIRQ+0x38>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2001      	movs	r0, #1
 8002622:	fa00 f202 	lsl.w	r2, r0, r2
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	@ (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	@ (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	@ 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	@ 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002708:	d301      	bcc.n	800270e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270a:	2301      	movs	r3, #1
 800270c:	e00f      	b.n	800272e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270e:	4a0a      	ldr	r2, [pc, #40]	@ (8002738 <SysTick_Config+0x40>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002716:	210f      	movs	r1, #15
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f7ff ff8e 	bl	800263c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <SysTick_Config+0x40>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002726:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <SysTick_Config+0x40>)
 8002728:	2207      	movs	r2, #7
 800272a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	e000e010 	.word	0xe000e010

0800273c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff ff29 	bl	800259c <__NVIC_SetPriorityGrouping>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002760:	f7ff ff40 	bl	80025e4 <__NVIC_GetPriorityGrouping>
 8002764:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f7ff ff90 	bl	8002690 <NVIC_EncodePriority>
 8002770:	4602      	mov	r2, r0
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff5f 	bl	800263c <__NVIC_SetPriority>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff33 	bl	8002600 <__NVIC_EnableIRQ>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ffa4 	bl	80026f8 <SysTick_Config>
 80027b0:	4603      	mov	r3, r0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ca:	e14c      	b.n	8002a66 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2101      	movs	r1, #1
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	4013      	ands	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 813e 	beq.w	8002a60 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d005      	beq.n	80027fc <HAL_GPIO_Init+0x40>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d130      	bne.n	800285e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	2203      	movs	r2, #3
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002832:	2201      	movs	r2, #1
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	f003 0201 	and.w	r2, r3, #1
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b03      	cmp	r3, #3
 8002868:	d017      	beq.n	800289a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	2203      	movs	r2, #3
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d123      	bne.n	80028ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	08da      	lsrs	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3208      	adds	r2, #8
 80028ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	220f      	movs	r2, #15
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	08da      	lsrs	r2, r3, #3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3208      	adds	r2, #8
 80028e8:	6939      	ldr	r1, [r7, #16]
 80028ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	2203      	movs	r2, #3
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0203 	and.w	r2, r3, #3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8098 	beq.w	8002a60 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002930:	4a54      	ldr	r2, [pc, #336]	@ (8002a84 <HAL_GPIO_Init+0x2c8>)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	3302      	adds	r3, #2
 8002938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	220f      	movs	r2, #15
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800295a:	d019      	beq.n	8002990 <HAL_GPIO_Init+0x1d4>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a88 <HAL_GPIO_Init+0x2cc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d013      	beq.n	800298c <HAL_GPIO_Init+0x1d0>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a49      	ldr	r2, [pc, #292]	@ (8002a8c <HAL_GPIO_Init+0x2d0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00d      	beq.n	8002988 <HAL_GPIO_Init+0x1cc>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a48      	ldr	r2, [pc, #288]	@ (8002a90 <HAL_GPIO_Init+0x2d4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d007      	beq.n	8002984 <HAL_GPIO_Init+0x1c8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a47      	ldr	r2, [pc, #284]	@ (8002a94 <HAL_GPIO_Init+0x2d8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d101      	bne.n	8002980 <HAL_GPIO_Init+0x1c4>
 800297c:	2304      	movs	r3, #4
 800297e:	e008      	b.n	8002992 <HAL_GPIO_Init+0x1d6>
 8002980:	2307      	movs	r3, #7
 8002982:	e006      	b.n	8002992 <HAL_GPIO_Init+0x1d6>
 8002984:	2303      	movs	r3, #3
 8002986:	e004      	b.n	8002992 <HAL_GPIO_Init+0x1d6>
 8002988:	2302      	movs	r3, #2
 800298a:	e002      	b.n	8002992 <HAL_GPIO_Init+0x1d6>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_GPIO_Init+0x1d6>
 8002990:	2300      	movs	r3, #0
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	f002 0203 	and.w	r2, r2, #3
 8002998:	0092      	lsls	r2, r2, #2
 800299a:	4093      	lsls	r3, r2
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029a2:	4938      	ldr	r1, [pc, #224]	@ (8002a84 <HAL_GPIO_Init+0x2c8>)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	3302      	adds	r3, #2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029b0:	4b39      	ldr	r3, [pc, #228]	@ (8002a98 <HAL_GPIO_Init+0x2dc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029d4:	4a30      	ldr	r2, [pc, #192]	@ (8002a98 <HAL_GPIO_Init+0x2dc>)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029da:	4b2f      	ldr	r3, [pc, #188]	@ (8002a98 <HAL_GPIO_Init+0x2dc>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029fe:	4a26      	ldr	r2, [pc, #152]	@ (8002a98 <HAL_GPIO_Init+0x2dc>)
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a04:	4b24      	ldr	r3, [pc, #144]	@ (8002a98 <HAL_GPIO_Init+0x2dc>)
 8002a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002a98 <HAL_GPIO_Init+0x2dc>)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002a32:	4b19      	ldr	r3, [pc, #100]	@ (8002a98 <HAL_GPIO_Init+0x2dc>)
 8002a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a58:	4a0f      	ldr	r2, [pc, #60]	@ (8002a98 <HAL_GPIO_Init+0x2dc>)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	3301      	adds	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f47f aeab 	bne.w	80027cc <HAL_GPIO_Init+0x10>
  }
}
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40010000 	.word	0x40010000
 8002a88:	48000400 	.word	0x48000400
 8002a8c:	48000800 	.word	0x48000800
 8002a90:	48000c00 	.word	0x48000c00
 8002a94:	48001000 	.word	0x48001000
 8002a98:	58000800 	.word	0x58000800

08002a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aac:	787b      	ldrb	r3, [r7, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ab8:	e002      	b.n	8002ac0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ae2:	4a05      	ldr	r2, [pc, #20]	@ (8002af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fd32 	bl	8000554 <HAL_GPIO_EXTI_Callback>
  }
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	58000800 	.word	0x58000800

08002afc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b00:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a04      	ldr	r2, [pc, #16]	@ (8002b18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	58000400 	.word	0x58000400

08002b1c <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if (Regulator == PWR_LOWPOWERREGULATOR_ON)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b2e:	d104      	bne.n	8002b3a <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f842 	bl	8002bbc <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8002b38:	e003      	b.n	8002b42 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 f813 	bl	8002b68 <HAL_PWREx_EnterSTOP0Mode>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	58000400 	.word	0x58000400

08002b68 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8002b72:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb4 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002b78:	f023 0307 	bic.w	r3, r3, #7
 8002b7c:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb8 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb8 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002b90:	bf30      	wfi
 8002b92:	e002      	b.n	8002b9a <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002b94:	bf40      	sev
    __WFE();
 8002b96:	bf20      	wfe
    __WFE();
 8002b98:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b9a:	4b07      	ldr	r3, [pc, #28]	@ (8002bb8 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	4a06      	ldr	r2, [pc, #24]	@ (8002bb8 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	6113      	str	r3, [r2, #16]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	58000400 	.word	0x58000400
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8002bc6:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 0307 	bic.w	r3, r3, #7
 8002bce:	4a0f      	ldr	r2, [pc, #60]	@ (8002c0c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c10 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	4a0d      	ldr	r2, [pc, #52]	@ (8002c10 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002be8:	bf30      	wfi
 8002bea:	e002      	b.n	8002bf2 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002bec:	bf40      	sev
    __WFE();
 8002bee:	bf20      	wfe
    __WFE();
 8002bf0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002bf2:	4b07      	ldr	r3, [pc, #28]	@ (8002c10 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	4a06      	ldr	r2, [pc, #24]	@ (8002c10 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002bf8:	f023 0304 	bic.w	r3, r3, #4
 8002bfc:	6113      	str	r3, [r2, #16]
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	58000400 	.word	0x58000400
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c26:	d101      	bne.n	8002c2c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_RCC_HSE_Enable>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002c3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_RCC_HSE_Disable>:
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <LL_RCC_HSE_IsReady>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c86:	d101      	bne.n	8002c8c <LL_RCC_HSE_IsReady+0x18>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <LL_RCC_HSE_IsReady+0x1a>
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_RCC_HSI_Enable>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002caa:	6013      	str	r3, [r2, #0]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_RCC_HSI_Disable>:
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cc8:	6013      	str	r3, [r2, #0]
}
 8002cca:	bf00      	nop
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_RCC_HSI_IsReady>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce6:	d101      	bne.n	8002cec <LL_RCC_HSI_IsReady+0x18>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <LL_RCC_HSI_IsReady+0x1a>
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	061b      	lsls	r3, r3, #24
 8002d0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_RCC_HSI48_Enable>:
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_HSI48_Disable>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_RCC_HSI48_IsReady>:
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d101      	bne.n	8002d7e <LL_RCC_HSI48_IsReady+0x18>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <LL_RCC_HSI48_IsReady+0x1a>
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_RCC_LSE_Enable>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002da2:	bf00      	nop
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_RCC_LSE_Disable>:
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_RCC_LSE_EnableBypass>:
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_RCC_LSE_DisableBypass>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e00:	f023 0304 	bic.w	r3, r3, #4
 8002e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_RCC_LSE_IsReady>:
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d101      	bne.n	8002e2a <LL_RCC_LSE_IsReady+0x18>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <LL_RCC_LSE_IsReady+0x1a>
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_RCC_LSI1_Enable>:
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_RCC_LSI1_Disable>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <LL_RCC_LSI1_IsReady>:
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d101      	bne.n	8002e92 <LL_RCC_LSI1_IsReady+0x18>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <LL_RCC_LSI1_IsReady+0x1a>
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <LL_RCC_LSI2_Enable>:
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002eb6:	bf00      	nop
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_RCC_LSI2_Disable>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ecc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ed0:	f023 0304 	bic.w	r3, r3, #4
 8002ed4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_RCC_LSI2_IsReady>:
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d101      	bne.n	8002efa <LL_RCC_LSI2_IsReady+0x18>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <LL_RCC_LSI2_IsReady+0x1a>
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <LL_RCC_LSI2_SetTrimming>:
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f16:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_RCC_MSI_Enable>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_RCC_MSI_Disable>:
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	6013      	str	r3, [r2, #0]
}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <LL_RCC_MSI_IsReady>:
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002f74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d101      	bne.n	8002f86 <LL_RCC_MSI_IsReady+0x16>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <LL_RCC_MSI_IsReady+0x18>
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <LL_RCC_MSI_SetRange>:
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_RCC_MSI_GetRange>:
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fca:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2bb0      	cmp	r3, #176	@ 0xb0
 8002fd0:	d901      	bls.n	8002fd6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002fd2:	23b0      	movs	r3, #176	@ 0xb0
 8002fd4:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002fd6:	687b      	ldr	r3, [r7, #4]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <LL_RCC_SetSysClkSource>:
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f023 0203 	bic.w	r2, r3, #3
 8003020:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_RCC_GetSysClkSource>:
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800303a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_RCC_SetAHBPrescaler>:
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003060:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800307e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003082:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003086:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800308a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_RCC_SetAHB4Prescaler>:
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80030b2:	f023 020f 	bic.w	r2, r3, #15
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_RCC_SetAPB1Prescaler>:
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80030d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	608b      	str	r3, [r1, #8]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_RCC_SetAPB2Prescaler>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800310a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4313      	orrs	r3, r2
 8003112:	608b      	str	r3, [r1, #8]
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_RCC_GetAHBPrescaler>:
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <LL_RCC_GetAHB4Prescaler>:
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800313c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003140:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <LL_RCC_GetAPB1Prescaler>:
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_RCC_GetAPB2Prescaler>:
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800317a:	4618      	mov	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003192:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003196:	6013      	str	r3, [r2, #0]
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80031a2:	b480      	push	{r7}
 80031a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80031a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031b4:	6013      	str	r3, [r2, #0]
}
 80031b6:	bf00      	nop
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80031c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031d2:	d101      	bne.n	80031d8 <LL_RCC_PLL_IsReady+0x18>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <LL_RCC_PLL_IsReady+0x1a>
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80031e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0303 	and.w	r3, r3, #3
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003246:	b480      	push	{r7}
 8003248:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800324a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003258:	d101      	bne.n	800325e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800326e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003272:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800327e:	d101      	bne.n	8003284 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003298:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800329c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a4:	d101      	bne.n	80032aa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80032ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032c8:	d101      	bne.n	80032ce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032ec:	d101      	bne.n	80032f2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b08d      	sub	sp, #52	@ 0x34
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e363      	b.n	80039da <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 808d 	beq.w	800343a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003320:	f7ff fe89 	bl	8003036 <LL_RCC_GetSysClkSource>
 8003324:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003326:	f7ff ff82 	bl	800322e <LL_RCC_PLL_GetMainSource>
 800332a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800332c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_RCC_OscConfig+0x3e>
 8003332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003334:	2b0c      	cmp	r3, #12
 8003336:	d147      	bne.n	80033c8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333a:	2b01      	cmp	r3, #1
 800333c:	d144      	bne.n	80033c8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e347      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800334e:	f7ff fe34 	bl	8002fba <LL_RCC_MSI_GetRange>
 8003352:	4603      	mov	r3, r0
 8003354:	429c      	cmp	r4, r3
 8003356:	d914      	bls.n	8003382 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fd2f 	bl	8003dc0 <RCC_SetFlashLatencyFromMSIRange>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e336      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fe0e 	bl	8002f92 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fe32 	bl	8002fe4 <LL_RCC_MSI_SetCalibTrimming>
 8003380:	e013      	b.n	80033aa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fe03 	bl	8002f92 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fe27 	bl	8002fe4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fd10 	bl	8003dc0 <RCC_SetFlashLatencyFromMSIRange>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e317      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80033aa:	f000 fcc9 	bl	8003d40 <HAL_RCC_GetHCLKFreq>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4aa4      	ldr	r2, [pc, #656]	@ (8003644 <HAL_RCC_OscConfig+0x344>)
 80033b2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033b4:	4ba4      	ldr	r3, [pc, #656]	@ (8003648 <HAL_RCC_OscConfig+0x348>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd fe65 	bl	8001088 <HAL_InitTick>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d039      	beq.n	8003438 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e308      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01e      	beq.n	800340e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033d0:	f7ff fdb0 	bl	8002f34 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033d4:	f7fd fea6 	bl	8001124 <HAL_GetTick>
 80033d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033dc:	f7fd fea2 	bl	8001124 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e2f5      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80033ee:	f7ff fdbf 	bl	8002f70 <LL_RCC_MSI_IsReady>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f1      	beq.n	80033dc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fdc8 	bl	8002f92 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fdec 	bl	8002fe4 <LL_RCC_MSI_SetCalibTrimming>
 800340c:	e015      	b.n	800343a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800340e:	f7ff fda0 	bl	8002f52 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003412:	f7fd fe87 	bl	8001124 <HAL_GetTick>
 8003416:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800341a:	f7fd fe83 	bl	8001124 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e2d6      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800342c:	f7ff fda0 	bl	8002f70 <LL_RCC_MSI_IsReady>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f1      	bne.n	800341a <HAL_RCC_OscConfig+0x11a>
 8003436:	e000      	b.n	800343a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003438:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d047      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003446:	f7ff fdf6 	bl	8003036 <LL_RCC_GetSysClkSource>
 800344a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800344c:	f7ff feef 	bl	800322e <LL_RCC_PLL_GetMainSource>
 8003450:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d005      	beq.n	8003464 <HAL_RCC_OscConfig+0x164>
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	2b0c      	cmp	r3, #12
 800345c:	d108      	bne.n	8003470 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d105      	bne.n	8003470 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d134      	bne.n	80034d6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e2b4      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003478:	d102      	bne.n	8003480 <HAL_RCC_OscConfig+0x180>
 800347a:	f7ff fbdd 	bl	8002c38 <LL_RCC_HSE_Enable>
 800347e:	e001      	b.n	8003484 <HAL_RCC_OscConfig+0x184>
 8003480:	f7ff fbe9 	bl	8002c56 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d012      	beq.n	80034b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fd fe4a 	bl	8001124 <HAL_GetTick>
 8003490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fd fe46 	bl	8001124 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	@ 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e299      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80034a6:	f7ff fbe5 	bl	8002c74 <LL_RCC_HSE_IsReady>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f1      	beq.n	8003494 <HAL_RCC_OscConfig+0x194>
 80034b0:	e011      	b.n	80034d6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fd fe37 	bl	8001124 <HAL_GetTick>
 80034b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ba:	f7fd fe33 	bl	8001124 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b64      	cmp	r3, #100	@ 0x64
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e286      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80034cc:	f7ff fbd2 	bl	8002c74 <LL_RCC_HSE_IsReady>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f1      	bne.n	80034ba <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d04c      	beq.n	800357c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e2:	f7ff fda8 	bl	8003036 <LL_RCC_GetSysClkSource>
 80034e6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e8:	f7ff fea1 	bl	800322e <LL_RCC_PLL_GetMainSource>
 80034ec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_OscConfig+0x200>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d10e      	bne.n	8003518 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d10b      	bne.n	8003518 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e266      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fbf1 	bl	8002cf8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003516:	e031      	b.n	800357c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d019      	beq.n	8003554 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003520:	f7ff fbba 	bl	8002c98 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fd fdfe 	bl	8001124 <HAL_GetTick>
 8003528:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352c:	f7fd fdfa 	bl	8001124 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e24d      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800353e:	f7ff fbc9 	bl	8002cd4 <LL_RCC_HSI_IsReady>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f1      	beq.n	800352c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fbd3 	bl	8002cf8 <LL_RCC_HSI_SetCalibTrimming>
 8003552:	e013      	b.n	800357c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003554:	f7ff fbaf 	bl	8002cb6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fd fde4 	bl	8001124 <HAL_GetTick>
 800355c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003560:	f7fd fde0 	bl	8001124 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e233      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003572:	f7ff fbaf 	bl	8002cd4 <LL_RCC_HSI_IsReady>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f1      	bne.n	8003560 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80a3 	beq.w	80036dc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d076      	beq.n	800368c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d046      	beq.n	8003638 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80035aa:	f7ff fc66 	bl	8002e7a <LL_RCC_LSI1_IsReady>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d113      	bne.n	80035dc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80035b4:	f7ff fc3f 	bl	8002e36 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035b8:	f7fd fdb4 	bl	8001124 <HAL_GetTick>
 80035bc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035c0:	f7fd fdb0 	bl	8001124 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e203      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80035d2:	f7ff fc52 	bl	8002e7a <LL_RCC_LSI1_IsReady>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f1      	beq.n	80035c0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80035dc:	f7ff fc5f 	bl	8002e9e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fd fda0 	bl	8001124 <HAL_GetTick>
 80035e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80035e8:	f7fd fd9c 	bl	8001124 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1ef      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80035fa:	f7ff fc72 	bl	8002ee2 <LL_RCC_LSI2_IsReady>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f1      	beq.n	80035e8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fc7c 	bl	8002f06 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800360e:	f7ff fc23 	bl	8002e58 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7fd fd87 	bl	8001124 <HAL_GetTick>
 8003616:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800361a:	f7fd fd83 	bl	8001124 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e1d6      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800362c:	f7ff fc25 	bl	8002e7a <LL_RCC_LSI1_IsReady>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f1      	bne.n	800361a <HAL_RCC_OscConfig+0x31a>
 8003636:	e051      	b.n	80036dc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003638:	f7ff fbfd 	bl	8002e36 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fd fd72 	bl	8001124 <HAL_GetTick>
 8003640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003642:	e00c      	b.n	800365e <HAL_RCC_OscConfig+0x35e>
 8003644:	20000008 	.word	0x20000008
 8003648:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800364c:	f7fd fd6a 	bl	8001124 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e1bd      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800365e:	f7ff fc0c 	bl	8002e7a <LL_RCC_LSI1_IsReady>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f1      	beq.n	800364c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003668:	f7ff fc2a 	bl	8002ec0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800366e:	f7fd fd59 	bl	8001124 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b03      	cmp	r3, #3
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e1ac      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003680:	f7ff fc2f 	bl	8002ee2 <LL_RCC_LSI2_IsReady>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f1      	bne.n	800366e <HAL_RCC_OscConfig+0x36e>
 800368a:	e027      	b.n	80036dc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800368c:	f7ff fc18 	bl	8002ec0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fd fd48 	bl	8001124 <HAL_GetTick>
 8003694:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003698:	f7fd fd44 	bl	8001124 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e197      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036aa:	f7ff fc1a 	bl	8002ee2 <LL_RCC_LSI2_IsReady>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f1      	bne.n	8003698 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80036b4:	f7ff fbd0 	bl	8002e58 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fd fd34 	bl	8001124 <HAL_GetTick>
 80036bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036c0:	f7fd fd30 	bl	8001124 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e183      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80036d2:	f7ff fbd2 	bl	8002e7a <LL_RCC_LSI1_IsReady>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f1      	bne.n	80036c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d05b      	beq.n	80037a0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e8:	4ba7      	ldr	r3, [pc, #668]	@ (8003988 <HAL_RCC_OscConfig+0x688>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d114      	bne.n	800371e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80036f4:	f7ff fa02 	bl	8002afc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f8:	f7fd fd14 	bl	8001124 <HAL_GetTick>
 80036fc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003700:	f7fd fd10 	bl	8001124 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e163      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003712:	4b9d      	ldr	r3, [pc, #628]	@ (8003988 <HAL_RCC_OscConfig+0x688>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d102      	bne.n	800372c <HAL_RCC_OscConfig+0x42c>
 8003726:	f7ff fb30 	bl	8002d8a <LL_RCC_LSE_Enable>
 800372a:	e00c      	b.n	8003746 <HAL_RCC_OscConfig+0x446>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b05      	cmp	r3, #5
 8003732:	d104      	bne.n	800373e <HAL_RCC_OscConfig+0x43e>
 8003734:	f7ff fb4b 	bl	8002dce <LL_RCC_LSE_EnableBypass>
 8003738:	f7ff fb27 	bl	8002d8a <LL_RCC_LSE_Enable>
 800373c:	e003      	b.n	8003746 <HAL_RCC_OscConfig+0x446>
 800373e:	f7ff fb35 	bl	8002dac <LL_RCC_LSE_Disable>
 8003742:	f7ff fb55 	bl	8002df0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d014      	beq.n	8003778 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374e:	f7fd fce9 	bl	8001124 <HAL_GetTick>
 8003752:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003754:	e00a      	b.n	800376c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003756:	f7fd fce5 	bl	8001124 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003764:	4293      	cmp	r3, r2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e136      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800376c:	f7ff fb51 	bl	8002e12 <LL_RCC_LSE_IsReady>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0ef      	beq.n	8003756 <HAL_RCC_OscConfig+0x456>
 8003776:	e013      	b.n	80037a0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7fd fcd4 	bl	8001124 <HAL_GetTick>
 800377c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800377e:	e00a      	b.n	8003796 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003780:	f7fd fcd0 	bl	8001124 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e121      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003796:	f7ff fb3c 	bl	8002e12 <LL_RCC_LSE_IsReady>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ef      	bne.n	8003780 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d02c      	beq.n	8003806 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d014      	beq.n	80037de <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037b4:	f7ff fab5 	bl	8002d22 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b8:	f7fd fcb4 	bl	8001124 <HAL_GetTick>
 80037bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037c0:	f7fd fcb0 	bl	8001124 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e103      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80037d2:	f7ff fac8 	bl	8002d66 <LL_RCC_HSI48_IsReady>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f1      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4c0>
 80037dc:	e013      	b.n	8003806 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037de:	f7ff fab1 	bl	8002d44 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e2:	f7fd fc9f 	bl	8001124 <HAL_GetTick>
 80037e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037ea:	f7fd fc9b 	bl	8001124 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0ee      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80037fc:	f7ff fab3 	bl	8002d66 <LL_RCC_HSI48_IsReady>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f1      	bne.n	80037ea <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80e4 	beq.w	80039d8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003810:	f7ff fc11 	bl	8003036 <LL_RCC_GetSysClkSource>
 8003814:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003822:	2b02      	cmp	r3, #2
 8003824:	f040 80b4 	bne.w	8003990 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0203 	and.w	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	429a      	cmp	r2, r3
 8003834:	d123      	bne.n	800387e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d11c      	bne.n	800387e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d114      	bne.n	800387e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d10d      	bne.n	800387e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800386c:	429a      	cmp	r2, r3
 800386e:	d106      	bne.n	800387e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d05d      	beq.n	800393a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b0c      	cmp	r3, #12
 8003882:	d058      	beq.n	8003936 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e0a1      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003896:	f7ff fc84 	bl	80031a2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800389a:	f7fd fc43 	bl	8001124 <HAL_GetTick>
 800389e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a2:	f7fd fc3f 	bl	8001124 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e092      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1ef      	bne.n	80038a2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	4b30      	ldr	r3, [pc, #192]	@ (800398c <HAL_RCC_OscConfig+0x68c>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038d4:	4311      	orrs	r1, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038da:	0212      	lsls	r2, r2, #8
 80038dc:	4311      	orrs	r1, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038e2:	4311      	orrs	r1, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038e8:	4311      	orrs	r1, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80038ee:	430a      	orrs	r2, r1
 80038f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038f8:	f7ff fc44 	bl	8003184 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800390a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800390c:	f7fd fc0a 	bl	8001124 <HAL_GetTick>
 8003910:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fd fc06 	bl	8001124 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e059      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ef      	beq.n	8003914 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003934:	e050      	b.n	80039d8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e04f      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d147      	bne.n	80039d8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003948:	f7ff fc1c 	bl	8003184 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800394c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800395a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800395c:	f7fd fbe2 	bl	8001124 <HAL_GetTick>
 8003960:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003964:	f7fd fbde 	bl	8001124 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e031      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ef      	beq.n	8003964 <HAL_RCC_OscConfig+0x664>
 8003984:	e028      	b.n	80039d8 <HAL_RCC_OscConfig+0x6d8>
 8003986:	bf00      	nop
 8003988:	58000400 	.word	0x58000400
 800398c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b0c      	cmp	r3, #12
 8003994:	d01e      	beq.n	80039d4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003996:	f7ff fc04 	bl	80031a2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fd fbc3 	bl	8001124 <HAL_GetTick>
 800399e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a2:	f7fd fbbf 	bl	8001124 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e012      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ef      	bne.n	80039a2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80039c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039cc:	4b05      	ldr	r3, [pc, #20]	@ (80039e4 <HAL_RCC_OscConfig+0x6e4>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	60cb      	str	r3, [r1, #12]
 80039d2:	e001      	b.n	80039d8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3734      	adds	r7, #52	@ 0x34
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd90      	pop	{r4, r7, pc}
 80039e2:	bf00      	nop
 80039e4:	eefefffc 	.word	0xeefefffc

080039e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e12d      	b.n	8003c58 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b98      	ldr	r3, [pc, #608]	@ (8003c60 <HAL_RCC_ClockConfig+0x278>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d91b      	bls.n	8003a42 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b95      	ldr	r3, [pc, #596]	@ (8003c60 <HAL_RCC_ClockConfig+0x278>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 0207 	bic.w	r2, r3, #7
 8003a12:	4993      	ldr	r1, [pc, #588]	@ (8003c60 <HAL_RCC_ClockConfig+0x278>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a1a:	f7fd fb83 	bl	8001124 <HAL_GetTick>
 8003a1e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a22:	f7fd fb7f 	bl	8001124 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e111      	b.n	8003c58 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a34:	4b8a      	ldr	r3, [pc, #552]	@ (8003c60 <HAL_RCC_ClockConfig+0x278>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d1ef      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d016      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fafb 	bl	800304e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a58:	f7fd fb64 	bl	8001124 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a60:	f7fd fb60 	bl	8001124 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e0f2      	b.n	8003c58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a72:	f7ff fbe8 	bl	8003246 <LL_RCC_IsActiveFlag_HPRE>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f1      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d016      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff faf2 	bl	8003076 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a92:	f7fd fb47 	bl	8001124 <HAL_GetTick>
 8003a96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a9a:	f7fd fb43 	bl	8001124 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e0d5      	b.n	8003c58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003aac:	f7ff fbdd 	bl	800326a <LL_RCC_IsActiveFlag_C2HPRE>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f1      	beq.n	8003a9a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d016      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff faeb 	bl	80030a2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003acc:	f7fd fb2a 	bl	8001124 <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ad4:	f7fd fb26 	bl	8001124 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e0b8      	b.n	8003c58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003ae6:	f7ff fbd3 	bl	8003290 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f1      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d016      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fae5 	bl	80030d0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b06:	f7fd fb0d 	bl	8001124 <HAL_GetTick>
 8003b0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b0e:	f7fd fb09 	bl	8001124 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e09b      	b.n	8003c58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b20:	f7ff fbc9 	bl	80032b6 <LL_RCC_IsActiveFlag_PPRE1>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f1      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d017      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fadb 	bl	80030f8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b42:	f7fd faef 	bl	8001124 <HAL_GetTick>
 8003b46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b4a:	f7fd faeb 	bl	8001124 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e07d      	b.n	8003c58 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b5c:	f7ff fbbd 	bl	80032da <LL_RCC_IsActiveFlag_PPRE2>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f1      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d043      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d106      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003b7a:	f7ff f87b 	bl	8002c74 <LL_RCC_HSE_IsReady>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d11e      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e067      	b.n	8003c58 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003b90:	f7ff fb16 	bl	80031c0 <LL_RCC_PLL_IsReady>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d113      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e05c      	b.n	8003c58 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003ba6:	f7ff f9e3 	bl	8002f70 <LL_RCC_MSI_IsReady>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d108      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e051      	b.n	8003c58 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003bb4:	f7ff f88e 	bl	8002cd4 <LL_RCC_HSI_IsReady>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e04a      	b.n	8003c58 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fa21 	bl	800300e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bcc:	f7fd faaa 	bl	8001124 <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd4:	f7fd faa6 	bl	8001124 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e036      	b.n	8003c58 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	f7ff fa24 	bl	8003036 <LL_RCC_GetSysClkSource>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d1ec      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bfa:	4b19      	ldr	r3, [pc, #100]	@ (8003c60 <HAL_RCC_ClockConfig+0x278>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d21b      	bcs.n	8003c40 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c08:	4b15      	ldr	r3, [pc, #84]	@ (8003c60 <HAL_RCC_ClockConfig+0x278>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f023 0207 	bic.w	r2, r3, #7
 8003c10:	4913      	ldr	r1, [pc, #76]	@ (8003c60 <HAL_RCC_ClockConfig+0x278>)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c18:	f7fd fa84 	bl	8001124 <HAL_GetTick>
 8003c1c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c20:	f7fd fa80 	bl	8001124 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e012      	b.n	8003c58 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b0b      	ldr	r3, [pc, #44]	@ (8003c60 <HAL_RCC_ClockConfig+0x278>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1ef      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c40:	f000 f87e 	bl	8003d40 <HAL_RCC_GetHCLKFreq>
 8003c44:	4603      	mov	r3, r0
 8003c46:	4a07      	ldr	r2, [pc, #28]	@ (8003c64 <HAL_RCC_ClockConfig+0x27c>)
 8003c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003c4a:	f7fd fa77 	bl	800113c <HAL_GetTickPrio>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fd fa19 	bl	8001088 <HAL_InitTick>
 8003c56:	4603      	mov	r3, r0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	58004000 	.word	0x58004000
 8003c64:	20000008 	.word	0x20000008

08003c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c6e:	f7ff f9e2 	bl	8003036 <LL_RCC_GetSysClkSource>
 8003c72:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c7a:	f7ff f99e 	bl	8002fba <LL_RCC_MSI_GetRange>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	4a2b      	ldr	r2, [pc, #172]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e04b      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d102      	bne.n	8003c9c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c96:	4b28      	ldr	r3, [pc, #160]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e045      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d10a      	bne.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003ca2:	f7fe ffb7 	bl	8002c14 <LL_RCC_HSE_IsEnabledDiv2>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d102      	bne.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003cac:	4b22      	ldr	r3, [pc, #136]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	e03a      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003cb2:	4b22      	ldr	r3, [pc, #136]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e037      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003cb8:	f7ff fab9 	bl	800322e <LL_RCC_PLL_GetMainSource>
 8003cbc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d003      	beq.n	8003ccc <HAL_RCC_GetSysClockFreq+0x64>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d003      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x6a>
 8003cca:	e00d      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cce:	60bb      	str	r3, [r7, #8]
        break;
 8003cd0:	e015      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cd2:	f7fe ff9f 	bl	8002c14 <LL_RCC_HSE_IsEnabledDiv2>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d102      	bne.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003cdc:	4b16      	ldr	r3, [pc, #88]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cde:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003ce0:	e00d      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003ce2:	4b16      	ldr	r3, [pc, #88]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003ce4:	60bb      	str	r3, [r7, #8]
        break;
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003ce8:	f7ff f967 	bl	8002fba <LL_RCC_MSI_GetRange>
 8003cec:	4603      	mov	r3, r0
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfa:	60bb      	str	r3, [r7, #8]
        break;
 8003cfc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003cfe:	f7ff fa71 	bl	80031e4 <LL_RCC_PLL_GetN>
 8003d02:	4602      	mov	r2, r0
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	fb03 f402 	mul.w	r4, r3, r2
 8003d0a:	f7ff fa84 	bl	8003216 <LL_RCC_PLL_GetDivider>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	3301      	adds	r3, #1
 8003d14:	fbb4 f4f3 	udiv	r4, r4, r3
 8003d18:	f7ff fa71 	bl	80031fe <LL_RCC_PLL_GetR>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	0f5b      	lsrs	r3, r3, #29
 8003d20:	3301      	adds	r3, #1
 8003d22:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d26:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003d28:	68fb      	ldr	r3, [r7, #12]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd90      	pop	{r4, r7, pc}
 8003d32:	bf00      	nop
 8003d34:	0800621c 	.word	0x0800621c
 8003d38:	00f42400 	.word	0x00f42400
 8003d3c:	01e84800 	.word	0x01e84800

08003d40 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d40:	b598      	push	{r3, r4, r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d44:	f7ff ff90 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 8003d48:	4604      	mov	r4, r0
 8003d4a:	f7ff f9e9 	bl	8003120 <LL_RCC_GetAHBPrescaler>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	4a03      	ldr	r2, [pc, #12]	@ (8003d64 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd98      	pop	{r3, r4, r7, pc}
 8003d64:	080061bc 	.word	0x080061bc

08003d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d68:	b598      	push	{r3, r4, r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d6c:	f7ff ffe8 	bl	8003d40 <HAL_RCC_GetHCLKFreq>
 8003d70:	4604      	mov	r4, r0
 8003d72:	f7ff f9ef 	bl	8003154 <LL_RCC_GetAPB1Prescaler>
 8003d76:	4603      	mov	r3, r0
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	4a04      	ldr	r2, [pc, #16]	@ (8003d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd98      	pop	{r3, r4, r7, pc}
 8003d90:	080061fc 	.word	0x080061fc

08003d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d94:	b598      	push	{r3, r4, r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003d98:	f7ff ffd2 	bl	8003d40 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	f7ff f9e5 	bl	800316c <LL_RCC_GetAPB2Prescaler>
 8003da2:	4603      	mov	r3, r0
 8003da4:	0adb      	lsrs	r3, r3, #11
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	4a04      	ldr	r2, [pc, #16]	@ (8003dbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	bd98      	pop	{r3, r4, r7, pc}
 8003dbc:	080061fc 	.word	0x080061fc

08003dc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003dc0:	b590      	push	{r4, r7, lr}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2bb0      	cmp	r3, #176	@ 0xb0
 8003dcc:	d903      	bls.n	8003dd6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003dce:	4b15      	ldr	r3, [pc, #84]	@ (8003e24 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e007      	b.n	8003de6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	4a11      	ldr	r2, [pc, #68]	@ (8003e24 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003de6:	f7ff f9a7 	bl	8003138 <LL_RCC_GetAHB4Prescaler>
 8003dea:	4603      	mov	r3, r0
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	4a0d      	ldr	r2, [pc, #52]	@ (8003e28 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4a0a      	ldr	r2, [pc, #40]	@ (8003e2c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	0c9c      	lsrs	r4, r3, #18
 8003e0a:	f7fe fe9f 	bl	8002b4c <HAL_PWREx_GetVoltageRange>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4619      	mov	r1, r3
 8003e12:	4620      	mov	r0, r4
 8003e14:	f000 f80c 	bl	8003e30 <RCC_SetFlashLatency>
 8003e18:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd90      	pop	{r4, r7, pc}
 8003e22:	bf00      	nop
 8003e24:	0800621c 	.word	0x0800621c
 8003e28:	080061bc 	.word	0x080061bc
 8003e2c:	431bde83 	.word	0x431bde83

08003e30 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b093      	sub	sp, #76	@ 0x4c
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003e3a:	4b37      	ldr	r3, [pc, #220]	@ (8003f18 <RCC_SetFlashLatency+0xe8>)
 8003e3c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003e40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003e46:	4a35      	ldr	r2, [pc, #212]	@ (8003f1c <RCC_SetFlashLatency+0xec>)
 8003e48:	f107 031c 	add.w	r3, r7, #28
 8003e4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003e52:	4b33      	ldr	r3, [pc, #204]	@ (8003f20 <RCC_SetFlashLatency+0xf0>)
 8003e54:	f107 040c 	add.w	r4, r7, #12
 8003e58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e5e:	2300      	movs	r3, #0
 8003e60:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e68:	d11a      	bne.n	8003ea0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e6e:	e013      	b.n	8003e98 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	3348      	adds	r3, #72	@ 0x48
 8003e76:	443b      	add	r3, r7
 8003e78:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d807      	bhi.n	8003e92 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3348      	adds	r3, #72	@ 0x48
 8003e88:	443b      	add	r3, r7
 8003e8a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003e8e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003e90:	e020      	b.n	8003ed4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e94:	3301      	adds	r3, #1
 8003e96:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d9e8      	bls.n	8003e70 <RCC_SetFlashLatency+0x40>
 8003e9e:	e019      	b.n	8003ed4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ea4:	e013      	b.n	8003ece <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	3348      	adds	r3, #72	@ 0x48
 8003eac:	443b      	add	r3, r7
 8003eae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d807      	bhi.n	8003ec8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	3348      	adds	r3, #72	@ 0x48
 8003ebe:	443b      	add	r3, r7
 8003ec0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003ec4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003ec6:	e005      	b.n	8003ed4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eca:	3301      	adds	r3, #1
 8003ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d9e8      	bls.n	8003ea6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003ed4:	4b13      	ldr	r3, [pc, #76]	@ (8003f24 <RCC_SetFlashLatency+0xf4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f023 0207 	bic.w	r2, r3, #7
 8003edc:	4911      	ldr	r1, [pc, #68]	@ (8003f24 <RCC_SetFlashLatency+0xf4>)
 8003ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ee4:	f7fd f91e 	bl	8001124 <HAL_GetTick>
 8003ee8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003eea:	e008      	b.n	8003efe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003eec:	f7fd f91a 	bl	8001124 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e007      	b.n	8003f0e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003efe:	4b09      	ldr	r3, [pc, #36]	@ (8003f24 <RCC_SetFlashLatency+0xf4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d1ef      	bne.n	8003eec <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	374c      	adds	r7, #76	@ 0x4c
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd90      	pop	{r4, r7, pc}
 8003f16:	bf00      	nop
 8003f18:	08006190 	.word	0x08006190
 8003f1c:	080061a0 	.word	0x080061a0
 8003f20:	080061ac 	.word	0x080061ac
 8003f24:	58004000 	.word	0x58004000

08003f28 <LL_RCC_LSE_IsEnabled>:
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <LL_RCC_LSE_IsEnabled+0x18>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <LL_RCC_LSE_IsEnabled+0x1a>
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <LL_RCC_LSE_IsReady>:
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d101      	bne.n	8003f64 <LL_RCC_LSE_IsReady+0x18>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <LL_RCC_LSE_IsReady+0x1a>
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LL_RCC_SetRFWKPClockSource>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_RCC_SetSMPSClockSource>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	f023 0203 	bic.w	r2, r3, #3
 8003fae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <LL_RCC_SetSMPSPrescaler>:
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_RCC_SetUSARTClockSource>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffc:	f023 0203 	bic.w	r2, r3, #3
 8004000:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <LL_RCC_SetLPUARTClockSource>:
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004028:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800402c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <LL_RCC_SetI2CClockSource>:
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800404c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004050:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800405c:	43db      	mvns	r3, r3
 800405e:	401a      	ands	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004068:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <LL_RCC_SetLPTIMClockSource>:
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800408a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	43db      	mvns	r3, r3
 8004096:	401a      	ands	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	041b      	lsls	r3, r3, #16
 800409c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <LL_RCC_SetSAIClockSource>:
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80040ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <LL_RCC_SetRNGClockSource>:
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80040e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80040f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <LL_RCC_SetCLK48ClockSource>:
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800411e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_RCC_SetUSBClockSource>:
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff ffe3 	bl	800410a <LL_RCC_SetCLK48ClockSource>
}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <LL_RCC_SetADCClockSource>:
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004160:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_RCC_SetRTCClockSource>:
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004188:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800418c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <LL_RCC_GetRTCClockSource>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80041a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <LL_RCC_ForceBackupDomainReset>:
{
 80041be:	b480      	push	{r7}
 80041c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80041d6:	bf00      	nop
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_RCC_ReleaseBackupDomainReset>:
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_RCC_PLLSAI1_Enable>:
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004210:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004214:	6013      	str	r3, [r2, #0]
}
 8004216:	bf00      	nop
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <LL_RCC_PLLSAI1_Disable>:
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800422e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004232:	6013      	str	r3, [r2, #0]
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <LL_RCC_PLLSAI1_IsReady>:
{
 800423e:	b480      	push	{r7}
 8004240:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800424c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004250:	d101      	bne.n	8004256 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b088      	sub	sp, #32
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800426a:	2300      	movs	r3, #0
 800426c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800426e:	2300      	movs	r3, #0
 8004270:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d034      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004282:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004286:	d021      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004288:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800428c:	d81b      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800428e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004292:	d01d      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004294:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004298:	d815      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00b      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800429e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042a2:	d110      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80042a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80042b4:	e00d      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3304      	adds	r3, #4
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 f947 	bl	800454e <RCCEx_PLLSAI1_ConfigNP>
 80042c0:	4603      	mov	r3, r0
 80042c2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80042c4:	e005      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	77fb      	strb	r3, [r7, #31]
        break;
 80042ca:	e002      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80042cc:	bf00      	nop
 80042ce:	e000      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80042d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d2:	7ffb      	ldrb	r3, [r7, #31]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fee8 	bl	80040b2 <LL_RCC_SetSAIClockSource>
 80042e2:	e001      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e4:	7ffb      	ldrb	r3, [r7, #31]
 80042e6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d046      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80042f4:	f7ff ff56 	bl	80041a4 <LL_RCC_GetRTCClockSource>
 80042f8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	429a      	cmp	r2, r3
 8004302:	d03c      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004304:	f7fe fbfa 	bl	8002afc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d105      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff ff30 	bl	8004178 <LL_RCC_SetRTCClockSource>
 8004318:	e02e      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800431a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004322:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004324:	f7ff ff4b 	bl	80041be <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004328:	f7ff ff5a 	bl	80041e0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800433a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004344:	f7ff fdf0 	bl	8003f28 <LL_RCC_LSE_IsEnabled>
 8004348:	4603      	mov	r3, r0
 800434a:	2b01      	cmp	r3, #1
 800434c:	d114      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800434e:	f7fc fee9 	bl	8001124 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004354:	e00b      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fc fee5 	bl	8001124 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004364:	4293      	cmp	r3, r2
 8004366:	d902      	bls.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	77fb      	strb	r3, [r7, #31]
              break;
 800436c:	e004      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800436e:	f7ff fded 	bl	8003f4c <LL_RCC_LSE_IsReady>
 8004372:	4603      	mov	r3, r0
 8004374:	2b01      	cmp	r3, #1
 8004376:	d1ee      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004378:	7ffb      	ldrb	r3, [r7, #31]
 800437a:	77bb      	strb	r3, [r7, #30]
 800437c:	e001      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437e:	7ffb      	ldrb	r3, [r7, #31]
 8004380:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fe2a 	bl	8003fec <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fe35 	bl	8004018 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fe5d 	bl	800407e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d004      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff fe52 	bl	800407e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d004      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fe2a 	bl	8004044 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fe1f 	bl	8004044 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d022      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fe8d 	bl	8004136 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004420:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004424:	d107      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004430:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004434:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800443e:	d10b      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	4618      	mov	r0, r3
 8004446:	f000 f8dd 	bl	8004604 <RCCEx_PLLSAI1_ConfigNQ>
 800444a:	4603      	mov	r3, r0
 800444c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800444e:	7ffb      	ldrb	r3, [r7, #31]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004454:	7ffb      	ldrb	r3, [r7, #31]
 8004456:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02b      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800446c:	d008      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004472:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004476:	d003      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447c:	2b00      	cmp	r3, #0
 800447e:	d105      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fe2a 	bl	80040de <LL_RCC_SetRNGClockSource>
 800448a:	e00a      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	2000      	movs	r0, #0
 8004498:	f7ff fe21 	bl	80040de <LL_RCC_SetRNGClockSource>
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff fe34 	bl	800410a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80044aa:	d107      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80044ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d022      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fe3d 	bl	800414c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044da:	d107      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ea:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044f4:	d10b      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3304      	adds	r3, #4
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f8dd 	bl	80046ba <RCCEx_PLLSAI1_ConfigNR>
 8004500:	4603      	mov	r3, r0
 8004502:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004504:	7ffb      	ldrb	r3, [r7, #31]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800450a:	7ffb      	ldrb	r3, [r7, #31]
 800450c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff fd26 	bl	8003f70 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d009      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fd45 	bl	8003fc4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fd2c 	bl	8003f9c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004544:	7fbb      	ldrb	r3, [r7, #30]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800455a:	f7ff fe61 	bl	8004220 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800455e:	f7fc fde1 	bl	8001124 <HAL_GetTick>
 8004562:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004564:	e009      	b.n	800457a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004566:	f7fc fddd 	bl	8001124 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d902      	bls.n	800457a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	73fb      	strb	r3, [r7, #15]
      break;
 8004578:	e004      	b.n	8004584 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800457a:	f7ff fe60 	bl	800423e <LL_RCC_PLLSAI1_IsReady>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f0      	bne.n	8004566 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d137      	bne.n	80045fa <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800458a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800459e:	4313      	orrs	r3, r2
 80045a0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045b4:	4313      	orrs	r3, r2
 80045b6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80045b8:	f7ff fe23 	bl	8004202 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045bc:	f7fc fdb2 	bl	8001124 <HAL_GetTick>
 80045c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045c2:	e009      	b.n	80045d8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c4:	f7fc fdae 	bl	8001124 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d902      	bls.n	80045d8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	73fb      	strb	r3, [r7, #15]
        break;
 80045d6:	e004      	b.n	80045e2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045d8:	f7ff fe31 	bl	800423e <LL_RCC_PLLSAI1_IsReady>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d1f0      	bne.n	80045c4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d108      	bne.n	80045fa <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80045e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045f6:	4313      	orrs	r3, r2
 80045f8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004610:	f7ff fe06 	bl	8004220 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004614:	f7fc fd86 	bl	8001124 <HAL_GetTick>
 8004618:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800461a:	e009      	b.n	8004630 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800461c:	f7fc fd82 	bl	8001124 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d902      	bls.n	8004630 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	73fb      	strb	r3, [r7, #15]
      break;
 800462e:	e004      	b.n	800463a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004630:	f7ff fe05 	bl	800423e <LL_RCC_PLLSAI1_IsReady>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d137      	bne.n	80046b0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004654:	4313      	orrs	r3, r2
 8004656:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800466a:	4313      	orrs	r3, r2
 800466c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800466e:	f7ff fdc8 	bl	8004202 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004672:	f7fc fd57 	bl	8001124 <HAL_GetTick>
 8004676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004678:	e009      	b.n	800468e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800467a:	f7fc fd53 	bl	8001124 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d902      	bls.n	800468e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	73fb      	strb	r3, [r7, #15]
        break;
 800468c:	e004      	b.n	8004698 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800468e:	f7ff fdd6 	bl	800423e <LL_RCC_PLLSAI1_IsReady>
 8004692:	4603      	mov	r3, r0
 8004694:	2b01      	cmp	r3, #1
 8004696:	d1f0      	bne.n	800467a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d108      	bne.n	80046b0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800469e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046ac:	4313      	orrs	r3, r2
 80046ae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80046c6:	f7ff fdab 	bl	8004220 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80046ca:	f7fc fd2b 	bl	8001124 <HAL_GetTick>
 80046ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046d0:	e009      	b.n	80046e6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046d2:	f7fc fd27 	bl	8001124 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d902      	bls.n	80046e6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	73fb      	strb	r3, [r7, #15]
      break;
 80046e4:	e004      	b.n	80046f0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046e6:	f7ff fdaa 	bl	800423e <LL_RCC_PLLSAI1_IsReady>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f0      	bne.n	80046d2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d137      	bne.n	8004766 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80046f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800470a:	4313      	orrs	r3, r2
 800470c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800470e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004720:	4313      	orrs	r3, r2
 8004722:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004724:	f7ff fd6d 	bl	8004202 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004728:	f7fc fcfc 	bl	8001124 <HAL_GetTick>
 800472c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800472e:	e009      	b.n	8004744 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004730:	f7fc fcf8 	bl	8001124 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d902      	bls.n	8004744 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	73fb      	strb	r3, [r7, #15]
        break;
 8004742:	e004      	b.n	800474e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004744:	f7ff fd7b 	bl	800423e <LL_RCC_PLLSAI1_IsReady>
 8004748:	4603      	mov	r3, r0
 800474a:	2b01      	cmp	r3, #1
 800474c:	d1f0      	bne.n	8004730 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d108      	bne.n	8004766 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004762:	4313      	orrs	r3, r2
 8004764:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004766:	7bfb      	ldrb	r3, [r7, #15]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e09f      	b.n	80048c2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc fac0 	bl	8000d1c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80047a4:	4b49      	ldr	r3, [pc, #292]	@ (80048cc <HAL_RTC_Init+0x15c>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d07e      	beq.n	80048ae <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	22ca      	movs	r2, #202	@ 0xca
 80047b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2253      	movs	r2, #83	@ 0x53
 80047be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f8ab 	bl	800491c <RTC_EnterInitMode>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	22ff      	movs	r2, #255	@ 0xff
 80047d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2204      	movs	r2, #4
 80047d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	73fb      	strb	r3, [r7, #15]
 80047e0:	e067      	b.n	80048b2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80047f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047f4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6899      	ldr	r1, [r3, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	68d2      	ldr	r2, [r2, #12]
 800481c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6919      	ldr	r1, [r3, #16]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	041a      	lsls	r2, r3, #16
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004840:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0203 	bic.w	r2, r2, #3
 8004850:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b00      	cmp	r3, #0
 8004876:	d113      	bne.n	80048a0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f829 	bl	80048d0 <HAL_RTC_WaitForSynchro>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00d      	beq.n	80048a0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	22ff      	movs	r2, #255	@ 0xff
 800488a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2204      	movs	r2, #4
 8004890:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e010      	b.n	80048c2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	22ff      	movs	r2, #255	@ 0xff
 80048a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	73fb      	strb	r3, [r7, #15]
 80048ac:	e001      	b.n	80048b2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d103      	bne.n	80048c0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40002800 	.word	0x40002800

080048d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048e6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80048e8:	f7fc fc1c 	bl	8001124 <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048ee:	e009      	b.n	8004904 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048f0:	f7fc fc18 	bl	8001124 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048fe:	d901      	bls.n	8004904 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e007      	b.n	8004914 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0ee      	beq.n	80048f0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d119      	bne.n	8004966 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f04f 32ff 	mov.w	r2, #4294967295
 800493a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800493c:	f7fc fbf2 	bl	8001124 <HAL_GetTick>
 8004940:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004942:	e009      	b.n	8004958 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004944:	f7fc fbee 	bl	8001124 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004952:	d901      	bls.n	8004958 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e007      	b.n	8004968 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0ee      	beq.n	8004944 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004986:	2302      	movs	r3, #2
 8004988:	e0a8      	b.n	8004adc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2202      	movs	r2, #2
 8004996:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	22ca      	movs	r2, #202	@ 0xca
 80049a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2253      	movs	r2, #83	@ 0x53
 80049a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d020      	beq.n	80049fa <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80049b8:	f7fc fbb4 	bl	8001124 <HAL_GetTick>
 80049bc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80049be:	e015      	b.n	80049ec <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049c0:	f7fc fbb0 	bl	8001124 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049ce:	d90d      	bls.n	80049ec <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	22ff      	movs	r2, #255	@ 0xff
 80049d6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2203      	movs	r2, #3
 80049dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e077      	b.n	8004adc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e2      	bne.n	80049c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a08:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8004a1a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004a1c:	f7fc fb82 	bl	8001124 <HAL_GetTick>
 8004a20:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004a22:	e015      	b.n	8004a50 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a24:	f7fc fb7e 	bl	8001124 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a32:	d90d      	bls.n	8004a50 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	22ff      	movs	r2, #255	@ 0xff
 8004a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e045      	b.n	8004adc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0e2      	beq.n	8004a24 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0207 	bic.w	r2, r2, #7
 8004a74:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6899      	ldr	r1, [r3, #8]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004a86:	4b17      	ldr	r3, [pc, #92]	@ (8004ae4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a8c:	4a15      	ldr	r2, [pc, #84]	@ (8004ae4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004a8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a92:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004a96:	4b13      	ldr	r3, [pc, #76]	@ (8004ae4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a12      	ldr	r2, [pc, #72]	@ (8004ae4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004a9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004aa0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ab0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ac0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	22ff      	movs	r2, #255	@ 0xff
 8004ac8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	58000800 	.word	0x58000800

08004ae8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fb fd3c 	bl	800057c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8004b14:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004b16:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8004b18:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b1c:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8004b26:	bf00      	nop
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	58000800 	.word	0x58000800

08004b34 <LL_RCC_GetUSARTClockSource>:
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b40:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4013      	ands	r3, r2
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <LL_RCC_GetLPUARTClockSource>:
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b60:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4013      	ands	r3, r2
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e04a      	b.n	8004c1c <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fc f8f5 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2224      	movs	r2, #36	@ 0x24
 8004ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fae6 	bl	8005190 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f8bb 	bl	8004d40 <UART_SetConfig>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e023      	b.n	8004c1c <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004bf2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0208 	orr.w	r2, r2, #8
 8004c02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fb5d 	bl	80052d4 <UART_CheckIdleState>
 8004c1a:	4603      	mov	r3, r0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	@ 0x28
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d17b      	bne.n	8004d36 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <HAL_UART_Transmit+0x26>
 8004c44:	88fb      	ldrh	r3, [r7, #6]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e074      	b.n	8004d38 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2221      	movs	r2, #33	@ 0x21
 8004c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c5e:	f7fc fa61 	bl	8001124 <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	88fa      	ldrh	r2, [r7, #6]
 8004c70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7c:	d108      	bne.n	8004c90 <HAL_UART_Transmit+0x6c>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d104      	bne.n	8004c90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	e003      	b.n	8004c98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c98:	e030      	b.n	8004cfc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2180      	movs	r1, #128	@ 0x80
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 fbbf 	bl	8005428 <UART_WaitOnFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e03d      	b.n	8004d38 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10b      	bne.n	8004cda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	e007      	b.n	8004cea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	781a      	ldrb	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1c8      	bne.n	8004c9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2140      	movs	r1, #64	@ 0x40
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 fb88 	bl	8005428 <UART_WaitOnFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e006      	b.n	8004d38 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	e000      	b.n	8004d38 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004d36:	2302      	movs	r3, #2
  }
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3720      	adds	r7, #32
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d44:	b08c      	sub	sp, #48	@ 0x30
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4baf      	ldr	r3, [pc, #700]	@ (800502c <UART_SetConfig+0x2ec>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4aa4      	ldr	r2, [pc, #656]	@ (8005030 <UART_SetConfig+0x2f0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d004      	beq.n	8004dac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004da8:	4313      	orrs	r3, r2
 8004daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004db6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	f023 010f 	bic.w	r1, r3, #15
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a95      	ldr	r2, [pc, #596]	@ (8005034 <UART_SetConfig+0x2f4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d125      	bne.n	8004e30 <UART_SetConfig+0xf0>
 8004de4:	2003      	movs	r0, #3
 8004de6:	f7ff fea5 	bl	8004b34 <LL_RCC_GetUSARTClockSource>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d81b      	bhi.n	8004e28 <UART_SetConfig+0xe8>
 8004df0:	a201      	add	r2, pc, #4	@ (adr r2, 8004df8 <UART_SetConfig+0xb8>)
 8004df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df6:	bf00      	nop
 8004df8:	08004e09 	.word	0x08004e09
 8004dfc:	08004e19 	.word	0x08004e19
 8004e00:	08004e11 	.word	0x08004e11
 8004e04:	08004e21 	.word	0x08004e21
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e0e:	e042      	b.n	8004e96 <UART_SetConfig+0x156>
 8004e10:	2302      	movs	r3, #2
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e16:	e03e      	b.n	8004e96 <UART_SetConfig+0x156>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e1e:	e03a      	b.n	8004e96 <UART_SetConfig+0x156>
 8004e20:	2308      	movs	r3, #8
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e26:	e036      	b.n	8004e96 <UART_SetConfig+0x156>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e2e:	e032      	b.n	8004e96 <UART_SetConfig+0x156>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a7e      	ldr	r2, [pc, #504]	@ (8005030 <UART_SetConfig+0x2f0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d12a      	bne.n	8004e90 <UART_SetConfig+0x150>
 8004e3a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004e3e:	f7ff fe89 	bl	8004b54 <LL_RCC_GetLPUARTClockSource>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e48:	d01a      	beq.n	8004e80 <UART_SetConfig+0x140>
 8004e4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e4e:	d81b      	bhi.n	8004e88 <UART_SetConfig+0x148>
 8004e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e54:	d00c      	beq.n	8004e70 <UART_SetConfig+0x130>
 8004e56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e5a:	d815      	bhi.n	8004e88 <UART_SetConfig+0x148>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <UART_SetConfig+0x128>
 8004e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e64:	d008      	beq.n	8004e78 <UART_SetConfig+0x138>
 8004e66:	e00f      	b.n	8004e88 <UART_SetConfig+0x148>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e6e:	e012      	b.n	8004e96 <UART_SetConfig+0x156>
 8004e70:	2302      	movs	r3, #2
 8004e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e76:	e00e      	b.n	8004e96 <UART_SetConfig+0x156>
 8004e78:	2304      	movs	r3, #4
 8004e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e7e:	e00a      	b.n	8004e96 <UART_SetConfig+0x156>
 8004e80:	2308      	movs	r3, #8
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e86:	e006      	b.n	8004e96 <UART_SetConfig+0x156>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e8e:	e002      	b.n	8004e96 <UART_SetConfig+0x156>
 8004e90:	2310      	movs	r3, #16
 8004e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a65      	ldr	r2, [pc, #404]	@ (8005030 <UART_SetConfig+0x2f0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	f040 8097 	bne.w	8004fd0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ea2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d823      	bhi.n	8004ef2 <UART_SetConfig+0x1b2>
 8004eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb0 <UART_SetConfig+0x170>)
 8004eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004ef3 	.word	0x08004ef3
 8004eb8:	08004edd 	.word	0x08004edd
 8004ebc:	08004ef3 	.word	0x08004ef3
 8004ec0:	08004ee3 	.word	0x08004ee3
 8004ec4:	08004ef3 	.word	0x08004ef3
 8004ec8:	08004ef3 	.word	0x08004ef3
 8004ecc:	08004ef3 	.word	0x08004ef3
 8004ed0:	08004eeb 	.word	0x08004eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7fe ff48 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 8004ed8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004eda:	e010      	b.n	8004efe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004edc:	4b56      	ldr	r3, [pc, #344]	@ (8005038 <UART_SetConfig+0x2f8>)
 8004ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ee0:	e00d      	b.n	8004efe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee2:	f7fe fec1 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 8004ee6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ee8:	e009      	b.n	8004efe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ef0:	e005      	b.n	8004efe <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004efc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 812b 	beq.w	800515c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	4a4c      	ldr	r2, [pc, #304]	@ (800503c <UART_SetConfig+0x2fc>)
 8004f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f10:	461a      	mov	r2, r3
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	4413      	add	r3, r2
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d305      	bcc.n	8004f36 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d903      	bls.n	8004f3e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f3c:	e10e      	b.n	800515c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f40:	2200      	movs	r2, #0
 8004f42:	60bb      	str	r3, [r7, #8]
 8004f44:	60fa      	str	r2, [r7, #12]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4a:	4a3c      	ldr	r2, [pc, #240]	@ (800503c <UART_SetConfig+0x2fc>)
 8004f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2200      	movs	r2, #0
 8004f54:	603b      	str	r3, [r7, #0]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f60:	f7fb f966 	bl	8000230 <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4610      	mov	r0, r2
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	020b      	lsls	r3, r1, #8
 8004f76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f7a:	0202      	lsls	r2, r0, #8
 8004f7c:	6979      	ldr	r1, [r7, #20]
 8004f7e:	6849      	ldr	r1, [r1, #4]
 8004f80:	0849      	lsrs	r1, r1, #1
 8004f82:	2000      	movs	r0, #0
 8004f84:	460c      	mov	r4, r1
 8004f86:	4605      	mov	r5, r0
 8004f88:	eb12 0804 	adds.w	r8, r2, r4
 8004f8c:	eb43 0905 	adc.w	r9, r3, r5
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	469a      	mov	sl, r3
 8004f98:	4693      	mov	fp, r2
 8004f9a:	4652      	mov	r2, sl
 8004f9c:	465b      	mov	r3, fp
 8004f9e:	4640      	mov	r0, r8
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	f7fb f945 	bl	8000230 <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4613      	mov	r3, r2
 8004fac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fb4:	d308      	bcc.n	8004fc8 <UART_SetConfig+0x288>
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fbc:	d204      	bcs.n	8004fc8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	60da      	str	r2, [r3, #12]
 8004fc6:	e0c9      	b.n	800515c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fce:	e0c5      	b.n	800515c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fd8:	d16d      	bne.n	80050b6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004fda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	2b07      	cmp	r3, #7
 8004fe2:	d82d      	bhi.n	8005040 <UART_SetConfig+0x300>
 8004fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fec <UART_SetConfig+0x2ac>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	0800500d 	.word	0x0800500d
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	08005041 	.word	0x08005041
 8004ff8:	0800501b 	.word	0x0800501b
 8004ffc:	08005041 	.word	0x08005041
 8005000:	08005041 	.word	0x08005041
 8005004:	08005041 	.word	0x08005041
 8005008:	08005023 	.word	0x08005023
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800500c:	f7fe fec2 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8005010:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005012:	e01b      	b.n	800504c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005014:	4b08      	ldr	r3, [pc, #32]	@ (8005038 <UART_SetConfig+0x2f8>)
 8005016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005018:	e018      	b.n	800504c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800501a:	f7fe fe25 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 800501e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005020:	e014      	b.n	800504c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005028:	e010      	b.n	800504c <UART_SetConfig+0x30c>
 800502a:	bf00      	nop
 800502c:	cfff69f3 	.word	0xcfff69f3
 8005030:	40008000 	.word	0x40008000
 8005034:	40013800 	.word	0x40013800
 8005038:	00f42400 	.word	0x00f42400
 800503c:	0800625c 	.word	0x0800625c
      default:
        pclk = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800504a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 8084 	beq.w	800515c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	4a4b      	ldr	r2, [pc, #300]	@ (8005188 <UART_SetConfig+0x448>)
 800505a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800505e:	461a      	mov	r2, r3
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	fbb3 f3f2 	udiv	r3, r3, r2
 8005066:	005a      	lsls	r2, r3, #1
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	441a      	add	r2, r3
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	2b0f      	cmp	r3, #15
 800507e:	d916      	bls.n	80050ae <UART_SetConfig+0x36e>
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005086:	d212      	bcs.n	80050ae <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f023 030f 	bic.w	r3, r3, #15
 8005090:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	b29b      	uxth	r3, r3
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	b29a      	uxth	r2, r3
 800509e:	8bfb      	ldrh	r3, [r7, #30]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	8bfa      	ldrh	r2, [r7, #30]
 80050aa:	60da      	str	r2, [r3, #12]
 80050ac:	e056      	b.n	800515c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050b4:	e052      	b.n	800515c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050ba:	3b01      	subs	r3, #1
 80050bc:	2b07      	cmp	r3, #7
 80050be:	d822      	bhi.n	8005106 <UART_SetConfig+0x3c6>
 80050c0:	a201      	add	r2, pc, #4	@ (adr r2, 80050c8 <UART_SetConfig+0x388>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	080050e9 	.word	0x080050e9
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	08005107 	.word	0x08005107
 80050d4:	080050f7 	.word	0x080050f7
 80050d8:	08005107 	.word	0x08005107
 80050dc:	08005107 	.word	0x08005107
 80050e0:	08005107 	.word	0x08005107
 80050e4:	080050ff 	.word	0x080050ff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e8:	f7fe fe54 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 80050ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050ee:	e010      	b.n	8005112 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f0:	4b26      	ldr	r3, [pc, #152]	@ (800518c <UART_SetConfig+0x44c>)
 80050f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050f4:	e00d      	b.n	8005112 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050f6:	f7fe fdb7 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 80050fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050fc:	e009      	b.n	8005112 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005102:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005104:	e005      	b.n	8005112 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005110:	bf00      	nop
    }

    if (pclk != 0U)
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	2b00      	cmp	r3, #0
 8005116:	d021      	beq.n	800515c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511c:	4a1a      	ldr	r2, [pc, #104]	@ (8005188 <UART_SetConfig+0x448>)
 800511e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005122:	461a      	mov	r2, r3
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	fbb3 f2f2 	udiv	r2, r3, r2
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	085b      	lsrs	r3, r3, #1
 8005130:	441a      	add	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	fbb2 f3f3 	udiv	r3, r2, r3
 800513a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	2b0f      	cmp	r3, #15
 8005140:	d909      	bls.n	8005156 <UART_SetConfig+0x416>
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005148:	d205      	bcs.n	8005156 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	b29a      	uxth	r2, r3
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60da      	str	r2, [r3, #12]
 8005154:	e002      	b.n	800515c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2201      	movs	r2, #1
 8005160:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2201      	movs	r2, #1
 8005168:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2200      	movs	r2, #0
 8005170:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2200      	movs	r2, #0
 8005176:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005178:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800517c:	4618      	mov	r0, r3
 800517e:	3730      	adds	r7, #48	@ 0x30
 8005180:	46bd      	mov	sp, r7
 8005182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005186:	bf00      	nop
 8005188:	0800625c 	.word	0x0800625c
 800518c:	00f42400 	.word	0x00f42400

08005190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01a      	beq.n	80052a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800528e:	d10a      	bne.n	80052a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	605a      	str	r2, [r3, #4]
  }
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b098      	sub	sp, #96	@ 0x60
 80052d8:	af02      	add	r7, sp, #8
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052e4:	f7fb ff1e 	bl	8001124 <HAL_GetTick>
 80052e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d12f      	bne.n	8005358 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005300:	2200      	movs	r2, #0
 8005302:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f88e 	bl	8005428 <UART_WaitOnFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d022      	beq.n	8005358 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005326:	653b      	str	r3, [r7, #80]	@ 0x50
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005330:	647b      	str	r3, [r7, #68]	@ 0x44
 8005332:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800533e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e6      	bne.n	8005312 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e063      	b.n	8005420 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b04      	cmp	r3, #4
 8005364:	d149      	bne.n	80053fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005366:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800536e:	2200      	movs	r2, #0
 8005370:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f857 	bl	8005428 <UART_WaitOnFlagUntilTimeout>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d03c      	beq.n	80053fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	623b      	str	r3, [r7, #32]
   return(result);
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005394:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800539e:	633b      	str	r3, [r7, #48]	@ 0x30
 80053a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e6      	bne.n	8005380 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3308      	adds	r3, #8
 80053b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3308      	adds	r3, #8
 80053d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053d2:	61fa      	str	r2, [r7, #28]
 80053d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	69b9      	ldr	r1, [r7, #24]
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	617b      	str	r3, [r7, #20]
   return(result);
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e5      	bne.n	80053b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e012      	b.n	8005420 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3758      	adds	r7, #88	@ 0x58
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	4613      	mov	r3, r2
 8005436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005438:	e04f      	b.n	80054da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d04b      	beq.n	80054da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005442:	f7fb fe6f 	bl	8001124 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	429a      	cmp	r2, r3
 8005450:	d302      	bcc.n	8005458 <UART_WaitOnFlagUntilTimeout+0x30>
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e04e      	b.n	80054fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d037      	beq.n	80054da <UART_WaitOnFlagUntilTimeout+0xb2>
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b80      	cmp	r3, #128	@ 0x80
 800546e:	d034      	beq.n	80054da <UART_WaitOnFlagUntilTimeout+0xb2>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b40      	cmp	r3, #64	@ 0x40
 8005474:	d031      	beq.n	80054da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b08      	cmp	r3, #8
 8005482:	d110      	bne.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2208      	movs	r2, #8
 800548a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f838 	bl	8005502 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2208      	movs	r2, #8
 8005496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e029      	b.n	80054fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054b4:	d111      	bne.n	80054da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f81e 	bl	8005502 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e00f      	b.n	80054fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4013      	ands	r3, r2
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	bf0c      	ite	eq
 80054ea:	2301      	moveq	r3, #1
 80054ec:	2300      	movne	r3, #0
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d0a0      	beq.n	800543a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005502:	b480      	push	{r7}
 8005504:	b095      	sub	sp, #84	@ 0x54
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800551e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005528:	643b      	str	r3, [r7, #64]	@ 0x40
 800552a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800552e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e6      	bne.n	800550a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3308      	adds	r3, #8
 8005542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	61fb      	str	r3, [r7, #28]
   return(result);
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005552:	f023 0301 	bic.w	r3, r3, #1
 8005556:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3308      	adds	r3, #8
 800555e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005560:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005562:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e3      	bne.n	800553c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d118      	bne.n	80055ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	60bb      	str	r3, [r7, #8]
   return(result);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f023 0310 	bic.w	r3, r3, #16
 8005590:	647b      	str	r3, [r7, #68]	@ 0x44
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6979      	ldr	r1, [r7, #20]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	613b      	str	r3, [r7, #16]
   return(result);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e6      	bne.n	800557c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80055c2:	bf00      	nop
 80055c4:	3754      	adds	r7, #84	@ 0x54
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e027      	b.n	8005634 <HAL_UARTEx_DisableFifoMode+0x66>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2224      	movs	r2, #36	@ 0x24
 80055f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0201 	bic.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005612:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2220      	movs	r2, #32
 8005626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005654:	2302      	movs	r3, #2
 8005656:	e02d      	b.n	80056b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2224      	movs	r2, #36	@ 0x24
 8005664:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0201 	bic.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f84f 	bl	8005738 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e02d      	b.n	8005730 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2224      	movs	r2, #36	@ 0x24
 80056e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0201 	bic.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f811 	bl	8005738 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005744:	2b00      	cmp	r3, #0
 8005746:	d108      	bne.n	800575a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005758:	e031      	b.n	80057be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800575a:	2308      	movs	r3, #8
 800575c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800575e:	2308      	movs	r3, #8
 8005760:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	0e5b      	lsrs	r3, r3, #25
 800576a:	b2db      	uxtb	r3, r3
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	0f5b      	lsrs	r3, r3, #29
 800577a:	b2db      	uxtb	r3, r3
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005782:	7bbb      	ldrb	r3, [r7, #14]
 8005784:	7b3a      	ldrb	r2, [r7, #12]
 8005786:	4911      	ldr	r1, [pc, #68]	@ (80057cc <UARTEx_SetNbDataToProcess+0x94>)
 8005788:	5c8a      	ldrb	r2, [r1, r2]
 800578a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800578e:	7b3a      	ldrb	r2, [r7, #12]
 8005790:	490f      	ldr	r1, [pc, #60]	@ (80057d0 <UARTEx_SetNbDataToProcess+0x98>)
 8005792:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005794:	fb93 f3f2 	sdiv	r3, r3, r2
 8005798:	b29a      	uxth	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	7b7a      	ldrb	r2, [r7, #13]
 80057a4:	4909      	ldr	r1, [pc, #36]	@ (80057cc <UARTEx_SetNbDataToProcess+0x94>)
 80057a6:	5c8a      	ldrb	r2, [r1, r2]
 80057a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057ac:	7b7a      	ldrb	r2, [r7, #13]
 80057ae:	4908      	ldr	r1, [pc, #32]	@ (80057d0 <UARTEx_SetNbDataToProcess+0x98>)
 80057b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	08006274 	.word	0x08006274
 80057d0:	0800627c 	.word	0x0800627c

080057d4 <siprintf>:
 80057d4:	b40e      	push	{r1, r2, r3}
 80057d6:	b500      	push	{lr}
 80057d8:	b09c      	sub	sp, #112	@ 0x70
 80057da:	ab1d      	add	r3, sp, #116	@ 0x74
 80057dc:	9002      	str	r0, [sp, #8]
 80057de:	9006      	str	r0, [sp, #24]
 80057e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80057e4:	4809      	ldr	r0, [pc, #36]	@ (800580c <siprintf+0x38>)
 80057e6:	9107      	str	r1, [sp, #28]
 80057e8:	9104      	str	r1, [sp, #16]
 80057ea:	4909      	ldr	r1, [pc, #36]	@ (8005810 <siprintf+0x3c>)
 80057ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80057f0:	9105      	str	r1, [sp, #20]
 80057f2:	6800      	ldr	r0, [r0, #0]
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	a902      	add	r1, sp, #8
 80057f8:	f000 f994 	bl	8005b24 <_svfiprintf_r>
 80057fc:	9b02      	ldr	r3, [sp, #8]
 80057fe:	2200      	movs	r2, #0
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	b01c      	add	sp, #112	@ 0x70
 8005804:	f85d eb04 	ldr.w	lr, [sp], #4
 8005808:	b003      	add	sp, #12
 800580a:	4770      	bx	lr
 800580c:	20000014 	.word	0x20000014
 8005810:	ffff0208 	.word	0xffff0208

08005814 <memset>:
 8005814:	4402      	add	r2, r0
 8005816:	4603      	mov	r3, r0
 8005818:	4293      	cmp	r3, r2
 800581a:	d100      	bne.n	800581e <memset+0xa>
 800581c:	4770      	bx	lr
 800581e:	f803 1b01 	strb.w	r1, [r3], #1
 8005822:	e7f9      	b.n	8005818 <memset+0x4>

08005824 <__errno>:
 8005824:	4b01      	ldr	r3, [pc, #4]	@ (800582c <__errno+0x8>)
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	20000014 	.word	0x20000014

08005830 <__libc_init_array>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	4d0d      	ldr	r5, [pc, #52]	@ (8005868 <__libc_init_array+0x38>)
 8005834:	4c0d      	ldr	r4, [pc, #52]	@ (800586c <__libc_init_array+0x3c>)
 8005836:	1b64      	subs	r4, r4, r5
 8005838:	10a4      	asrs	r4, r4, #2
 800583a:	2600      	movs	r6, #0
 800583c:	42a6      	cmp	r6, r4
 800583e:	d109      	bne.n	8005854 <__libc_init_array+0x24>
 8005840:	4d0b      	ldr	r5, [pc, #44]	@ (8005870 <__libc_init_array+0x40>)
 8005842:	4c0c      	ldr	r4, [pc, #48]	@ (8005874 <__libc_init_array+0x44>)
 8005844:	f000 fc66 	bl	8006114 <_init>
 8005848:	1b64      	subs	r4, r4, r5
 800584a:	10a4      	asrs	r4, r4, #2
 800584c:	2600      	movs	r6, #0
 800584e:	42a6      	cmp	r6, r4
 8005850:	d105      	bne.n	800585e <__libc_init_array+0x2e>
 8005852:	bd70      	pop	{r4, r5, r6, pc}
 8005854:	f855 3b04 	ldr.w	r3, [r5], #4
 8005858:	4798      	blx	r3
 800585a:	3601      	adds	r6, #1
 800585c:	e7ee      	b.n	800583c <__libc_init_array+0xc>
 800585e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005862:	4798      	blx	r3
 8005864:	3601      	adds	r6, #1
 8005866:	e7f2      	b.n	800584e <__libc_init_array+0x1e>
 8005868:	080062c0 	.word	0x080062c0
 800586c:	080062c0 	.word	0x080062c0
 8005870:	080062c0 	.word	0x080062c0
 8005874:	080062c4 	.word	0x080062c4

08005878 <__retarget_lock_acquire_recursive>:
 8005878:	4770      	bx	lr

0800587a <__retarget_lock_release_recursive>:
 800587a:	4770      	bx	lr

0800587c <_free_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4605      	mov	r5, r0
 8005880:	2900      	cmp	r1, #0
 8005882:	d041      	beq.n	8005908 <_free_r+0x8c>
 8005884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005888:	1f0c      	subs	r4, r1, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	bfb8      	it	lt
 800588e:	18e4      	addlt	r4, r4, r3
 8005890:	f000 f8e0 	bl	8005a54 <__malloc_lock>
 8005894:	4a1d      	ldr	r2, [pc, #116]	@ (800590c <_free_r+0x90>)
 8005896:	6813      	ldr	r3, [r2, #0]
 8005898:	b933      	cbnz	r3, 80058a8 <_free_r+0x2c>
 800589a:	6063      	str	r3, [r4, #4]
 800589c:	6014      	str	r4, [r2, #0]
 800589e:	4628      	mov	r0, r5
 80058a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058a4:	f000 b8dc 	b.w	8005a60 <__malloc_unlock>
 80058a8:	42a3      	cmp	r3, r4
 80058aa:	d908      	bls.n	80058be <_free_r+0x42>
 80058ac:	6820      	ldr	r0, [r4, #0]
 80058ae:	1821      	adds	r1, r4, r0
 80058b0:	428b      	cmp	r3, r1
 80058b2:	bf01      	itttt	eq
 80058b4:	6819      	ldreq	r1, [r3, #0]
 80058b6:	685b      	ldreq	r3, [r3, #4]
 80058b8:	1809      	addeq	r1, r1, r0
 80058ba:	6021      	streq	r1, [r4, #0]
 80058bc:	e7ed      	b.n	800589a <_free_r+0x1e>
 80058be:	461a      	mov	r2, r3
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	b10b      	cbz	r3, 80058c8 <_free_r+0x4c>
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	d9fa      	bls.n	80058be <_free_r+0x42>
 80058c8:	6811      	ldr	r1, [r2, #0]
 80058ca:	1850      	adds	r0, r2, r1
 80058cc:	42a0      	cmp	r0, r4
 80058ce:	d10b      	bne.n	80058e8 <_free_r+0x6c>
 80058d0:	6820      	ldr	r0, [r4, #0]
 80058d2:	4401      	add	r1, r0
 80058d4:	1850      	adds	r0, r2, r1
 80058d6:	4283      	cmp	r3, r0
 80058d8:	6011      	str	r1, [r2, #0]
 80058da:	d1e0      	bne.n	800589e <_free_r+0x22>
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	6053      	str	r3, [r2, #4]
 80058e2:	4408      	add	r0, r1
 80058e4:	6010      	str	r0, [r2, #0]
 80058e6:	e7da      	b.n	800589e <_free_r+0x22>
 80058e8:	d902      	bls.n	80058f0 <_free_r+0x74>
 80058ea:	230c      	movs	r3, #12
 80058ec:	602b      	str	r3, [r5, #0]
 80058ee:	e7d6      	b.n	800589e <_free_r+0x22>
 80058f0:	6820      	ldr	r0, [r4, #0]
 80058f2:	1821      	adds	r1, r4, r0
 80058f4:	428b      	cmp	r3, r1
 80058f6:	bf04      	itt	eq
 80058f8:	6819      	ldreq	r1, [r3, #0]
 80058fa:	685b      	ldreq	r3, [r3, #4]
 80058fc:	6063      	str	r3, [r4, #4]
 80058fe:	bf04      	itt	eq
 8005900:	1809      	addeq	r1, r1, r0
 8005902:	6021      	streq	r1, [r4, #0]
 8005904:	6054      	str	r4, [r2, #4]
 8005906:	e7ca      	b.n	800589e <_free_r+0x22>
 8005908:	bd38      	pop	{r3, r4, r5, pc}
 800590a:	bf00      	nop
 800590c:	200002ec 	.word	0x200002ec

08005910 <sbrk_aligned>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	4e0f      	ldr	r6, [pc, #60]	@ (8005950 <sbrk_aligned+0x40>)
 8005914:	460c      	mov	r4, r1
 8005916:	6831      	ldr	r1, [r6, #0]
 8005918:	4605      	mov	r5, r0
 800591a:	b911      	cbnz	r1, 8005922 <sbrk_aligned+0x12>
 800591c:	f000 fba6 	bl	800606c <_sbrk_r>
 8005920:	6030      	str	r0, [r6, #0]
 8005922:	4621      	mov	r1, r4
 8005924:	4628      	mov	r0, r5
 8005926:	f000 fba1 	bl	800606c <_sbrk_r>
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	d103      	bne.n	8005936 <sbrk_aligned+0x26>
 800592e:	f04f 34ff 	mov.w	r4, #4294967295
 8005932:	4620      	mov	r0, r4
 8005934:	bd70      	pop	{r4, r5, r6, pc}
 8005936:	1cc4      	adds	r4, r0, #3
 8005938:	f024 0403 	bic.w	r4, r4, #3
 800593c:	42a0      	cmp	r0, r4
 800593e:	d0f8      	beq.n	8005932 <sbrk_aligned+0x22>
 8005940:	1a21      	subs	r1, r4, r0
 8005942:	4628      	mov	r0, r5
 8005944:	f000 fb92 	bl	800606c <_sbrk_r>
 8005948:	3001      	adds	r0, #1
 800594a:	d1f2      	bne.n	8005932 <sbrk_aligned+0x22>
 800594c:	e7ef      	b.n	800592e <sbrk_aligned+0x1e>
 800594e:	bf00      	nop
 8005950:	200002e8 	.word	0x200002e8

08005954 <_malloc_r>:
 8005954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005958:	1ccd      	adds	r5, r1, #3
 800595a:	f025 0503 	bic.w	r5, r5, #3
 800595e:	3508      	adds	r5, #8
 8005960:	2d0c      	cmp	r5, #12
 8005962:	bf38      	it	cc
 8005964:	250c      	movcc	r5, #12
 8005966:	2d00      	cmp	r5, #0
 8005968:	4606      	mov	r6, r0
 800596a:	db01      	blt.n	8005970 <_malloc_r+0x1c>
 800596c:	42a9      	cmp	r1, r5
 800596e:	d904      	bls.n	800597a <_malloc_r+0x26>
 8005970:	230c      	movs	r3, #12
 8005972:	6033      	str	r3, [r6, #0]
 8005974:	2000      	movs	r0, #0
 8005976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a50 <_malloc_r+0xfc>
 800597e:	f000 f869 	bl	8005a54 <__malloc_lock>
 8005982:	f8d8 3000 	ldr.w	r3, [r8]
 8005986:	461c      	mov	r4, r3
 8005988:	bb44      	cbnz	r4, 80059dc <_malloc_r+0x88>
 800598a:	4629      	mov	r1, r5
 800598c:	4630      	mov	r0, r6
 800598e:	f7ff ffbf 	bl	8005910 <sbrk_aligned>
 8005992:	1c43      	adds	r3, r0, #1
 8005994:	4604      	mov	r4, r0
 8005996:	d158      	bne.n	8005a4a <_malloc_r+0xf6>
 8005998:	f8d8 4000 	ldr.w	r4, [r8]
 800599c:	4627      	mov	r7, r4
 800599e:	2f00      	cmp	r7, #0
 80059a0:	d143      	bne.n	8005a2a <_malloc_r+0xd6>
 80059a2:	2c00      	cmp	r4, #0
 80059a4:	d04b      	beq.n	8005a3e <_malloc_r+0xea>
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	4639      	mov	r1, r7
 80059aa:	4630      	mov	r0, r6
 80059ac:	eb04 0903 	add.w	r9, r4, r3
 80059b0:	f000 fb5c 	bl	800606c <_sbrk_r>
 80059b4:	4581      	cmp	r9, r0
 80059b6:	d142      	bne.n	8005a3e <_malloc_r+0xea>
 80059b8:	6821      	ldr	r1, [r4, #0]
 80059ba:	1a6d      	subs	r5, r5, r1
 80059bc:	4629      	mov	r1, r5
 80059be:	4630      	mov	r0, r6
 80059c0:	f7ff ffa6 	bl	8005910 <sbrk_aligned>
 80059c4:	3001      	adds	r0, #1
 80059c6:	d03a      	beq.n	8005a3e <_malloc_r+0xea>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	442b      	add	r3, r5
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	f8d8 3000 	ldr.w	r3, [r8]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	bb62      	cbnz	r2, 8005a30 <_malloc_r+0xdc>
 80059d6:	f8c8 7000 	str.w	r7, [r8]
 80059da:	e00f      	b.n	80059fc <_malloc_r+0xa8>
 80059dc:	6822      	ldr	r2, [r4, #0]
 80059de:	1b52      	subs	r2, r2, r5
 80059e0:	d420      	bmi.n	8005a24 <_malloc_r+0xd0>
 80059e2:	2a0b      	cmp	r2, #11
 80059e4:	d917      	bls.n	8005a16 <_malloc_r+0xc2>
 80059e6:	1961      	adds	r1, r4, r5
 80059e8:	42a3      	cmp	r3, r4
 80059ea:	6025      	str	r5, [r4, #0]
 80059ec:	bf18      	it	ne
 80059ee:	6059      	strne	r1, [r3, #4]
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	bf08      	it	eq
 80059f4:	f8c8 1000 	streq.w	r1, [r8]
 80059f8:	5162      	str	r2, [r4, r5]
 80059fa:	604b      	str	r3, [r1, #4]
 80059fc:	4630      	mov	r0, r6
 80059fe:	f000 f82f 	bl	8005a60 <__malloc_unlock>
 8005a02:	f104 000b 	add.w	r0, r4, #11
 8005a06:	1d23      	adds	r3, r4, #4
 8005a08:	f020 0007 	bic.w	r0, r0, #7
 8005a0c:	1ac2      	subs	r2, r0, r3
 8005a0e:	bf1c      	itt	ne
 8005a10:	1a1b      	subne	r3, r3, r0
 8005a12:	50a3      	strne	r3, [r4, r2]
 8005a14:	e7af      	b.n	8005976 <_malloc_r+0x22>
 8005a16:	6862      	ldr	r2, [r4, #4]
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	bf0c      	ite	eq
 8005a1c:	f8c8 2000 	streq.w	r2, [r8]
 8005a20:	605a      	strne	r2, [r3, #4]
 8005a22:	e7eb      	b.n	80059fc <_malloc_r+0xa8>
 8005a24:	4623      	mov	r3, r4
 8005a26:	6864      	ldr	r4, [r4, #4]
 8005a28:	e7ae      	b.n	8005988 <_malloc_r+0x34>
 8005a2a:	463c      	mov	r4, r7
 8005a2c:	687f      	ldr	r7, [r7, #4]
 8005a2e:	e7b6      	b.n	800599e <_malloc_r+0x4a>
 8005a30:	461a      	mov	r2, r3
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	42a3      	cmp	r3, r4
 8005a36:	d1fb      	bne.n	8005a30 <_malloc_r+0xdc>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	6053      	str	r3, [r2, #4]
 8005a3c:	e7de      	b.n	80059fc <_malloc_r+0xa8>
 8005a3e:	230c      	movs	r3, #12
 8005a40:	6033      	str	r3, [r6, #0]
 8005a42:	4630      	mov	r0, r6
 8005a44:	f000 f80c 	bl	8005a60 <__malloc_unlock>
 8005a48:	e794      	b.n	8005974 <_malloc_r+0x20>
 8005a4a:	6005      	str	r5, [r0, #0]
 8005a4c:	e7d6      	b.n	80059fc <_malloc_r+0xa8>
 8005a4e:	bf00      	nop
 8005a50:	200002ec 	.word	0x200002ec

08005a54 <__malloc_lock>:
 8005a54:	4801      	ldr	r0, [pc, #4]	@ (8005a5c <__malloc_lock+0x8>)
 8005a56:	f7ff bf0f 	b.w	8005878 <__retarget_lock_acquire_recursive>
 8005a5a:	bf00      	nop
 8005a5c:	200002e4 	.word	0x200002e4

08005a60 <__malloc_unlock>:
 8005a60:	4801      	ldr	r0, [pc, #4]	@ (8005a68 <__malloc_unlock+0x8>)
 8005a62:	f7ff bf0a 	b.w	800587a <__retarget_lock_release_recursive>
 8005a66:	bf00      	nop
 8005a68:	200002e4 	.word	0x200002e4

08005a6c <__ssputs_r>:
 8005a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	688e      	ldr	r6, [r1, #8]
 8005a72:	461f      	mov	r7, r3
 8005a74:	42be      	cmp	r6, r7
 8005a76:	680b      	ldr	r3, [r1, #0]
 8005a78:	4682      	mov	sl, r0
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	4690      	mov	r8, r2
 8005a7e:	d82d      	bhi.n	8005adc <__ssputs_r+0x70>
 8005a80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a88:	d026      	beq.n	8005ad8 <__ssputs_r+0x6c>
 8005a8a:	6965      	ldr	r5, [r4, #20]
 8005a8c:	6909      	ldr	r1, [r1, #16]
 8005a8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a92:	eba3 0901 	sub.w	r9, r3, r1
 8005a96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a9a:	1c7b      	adds	r3, r7, #1
 8005a9c:	444b      	add	r3, r9
 8005a9e:	106d      	asrs	r5, r5, #1
 8005aa0:	429d      	cmp	r5, r3
 8005aa2:	bf38      	it	cc
 8005aa4:	461d      	movcc	r5, r3
 8005aa6:	0553      	lsls	r3, r2, #21
 8005aa8:	d527      	bpl.n	8005afa <__ssputs_r+0x8e>
 8005aaa:	4629      	mov	r1, r5
 8005aac:	f7ff ff52 	bl	8005954 <_malloc_r>
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	b360      	cbz	r0, 8005b0e <__ssputs_r+0xa2>
 8005ab4:	6921      	ldr	r1, [r4, #16]
 8005ab6:	464a      	mov	r2, r9
 8005ab8:	f000 fae8 	bl	800608c <memcpy>
 8005abc:	89a3      	ldrh	r3, [r4, #12]
 8005abe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ac6:	81a3      	strh	r3, [r4, #12]
 8005ac8:	6126      	str	r6, [r4, #16]
 8005aca:	6165      	str	r5, [r4, #20]
 8005acc:	444e      	add	r6, r9
 8005ace:	eba5 0509 	sub.w	r5, r5, r9
 8005ad2:	6026      	str	r6, [r4, #0]
 8005ad4:	60a5      	str	r5, [r4, #8]
 8005ad6:	463e      	mov	r6, r7
 8005ad8:	42be      	cmp	r6, r7
 8005ada:	d900      	bls.n	8005ade <__ssputs_r+0x72>
 8005adc:	463e      	mov	r6, r7
 8005ade:	6820      	ldr	r0, [r4, #0]
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	4641      	mov	r1, r8
 8005ae4:	f000 faa8 	bl	8006038 <memmove>
 8005ae8:	68a3      	ldr	r3, [r4, #8]
 8005aea:	1b9b      	subs	r3, r3, r6
 8005aec:	60a3      	str	r3, [r4, #8]
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	4433      	add	r3, r6
 8005af2:	6023      	str	r3, [r4, #0]
 8005af4:	2000      	movs	r0, #0
 8005af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afa:	462a      	mov	r2, r5
 8005afc:	f000 fad4 	bl	80060a8 <_realloc_r>
 8005b00:	4606      	mov	r6, r0
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d1e0      	bne.n	8005ac8 <__ssputs_r+0x5c>
 8005b06:	6921      	ldr	r1, [r4, #16]
 8005b08:	4650      	mov	r0, sl
 8005b0a:	f7ff feb7 	bl	800587c <_free_r>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	f8ca 3000 	str.w	r3, [sl]
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b1a:	81a3      	strh	r3, [r4, #12]
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b20:	e7e9      	b.n	8005af6 <__ssputs_r+0x8a>
	...

08005b24 <_svfiprintf_r>:
 8005b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	4698      	mov	r8, r3
 8005b2a:	898b      	ldrh	r3, [r1, #12]
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	b09d      	sub	sp, #116	@ 0x74
 8005b30:	4607      	mov	r7, r0
 8005b32:	460d      	mov	r5, r1
 8005b34:	4614      	mov	r4, r2
 8005b36:	d510      	bpl.n	8005b5a <_svfiprintf_r+0x36>
 8005b38:	690b      	ldr	r3, [r1, #16]
 8005b3a:	b973      	cbnz	r3, 8005b5a <_svfiprintf_r+0x36>
 8005b3c:	2140      	movs	r1, #64	@ 0x40
 8005b3e:	f7ff ff09 	bl	8005954 <_malloc_r>
 8005b42:	6028      	str	r0, [r5, #0]
 8005b44:	6128      	str	r0, [r5, #16]
 8005b46:	b930      	cbnz	r0, 8005b56 <_svfiprintf_r+0x32>
 8005b48:	230c      	movs	r3, #12
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	b01d      	add	sp, #116	@ 0x74
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	2340      	movs	r3, #64	@ 0x40
 8005b58:	616b      	str	r3, [r5, #20]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b5e:	2320      	movs	r3, #32
 8005b60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b68:	2330      	movs	r3, #48	@ 0x30
 8005b6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d08 <_svfiprintf_r+0x1e4>
 8005b6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b72:	f04f 0901 	mov.w	r9, #1
 8005b76:	4623      	mov	r3, r4
 8005b78:	469a      	mov	sl, r3
 8005b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b7e:	b10a      	cbz	r2, 8005b84 <_svfiprintf_r+0x60>
 8005b80:	2a25      	cmp	r2, #37	@ 0x25
 8005b82:	d1f9      	bne.n	8005b78 <_svfiprintf_r+0x54>
 8005b84:	ebba 0b04 	subs.w	fp, sl, r4
 8005b88:	d00b      	beq.n	8005ba2 <_svfiprintf_r+0x7e>
 8005b8a:	465b      	mov	r3, fp
 8005b8c:	4622      	mov	r2, r4
 8005b8e:	4629      	mov	r1, r5
 8005b90:	4638      	mov	r0, r7
 8005b92:	f7ff ff6b 	bl	8005a6c <__ssputs_r>
 8005b96:	3001      	adds	r0, #1
 8005b98:	f000 80a7 	beq.w	8005cea <_svfiprintf_r+0x1c6>
 8005b9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b9e:	445a      	add	r2, fp
 8005ba0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 809f 	beq.w	8005cea <_svfiprintf_r+0x1c6>
 8005bac:	2300      	movs	r3, #0
 8005bae:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bb6:	f10a 0a01 	add.w	sl, sl, #1
 8005bba:	9304      	str	r3, [sp, #16]
 8005bbc:	9307      	str	r3, [sp, #28]
 8005bbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bc4:	4654      	mov	r4, sl
 8005bc6:	2205      	movs	r2, #5
 8005bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bcc:	484e      	ldr	r0, [pc, #312]	@ (8005d08 <_svfiprintf_r+0x1e4>)
 8005bce:	f7fa fadf 	bl	8000190 <memchr>
 8005bd2:	9a04      	ldr	r2, [sp, #16]
 8005bd4:	b9d8      	cbnz	r0, 8005c0e <_svfiprintf_r+0xea>
 8005bd6:	06d0      	lsls	r0, r2, #27
 8005bd8:	bf44      	itt	mi
 8005bda:	2320      	movmi	r3, #32
 8005bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005be0:	0711      	lsls	r1, r2, #28
 8005be2:	bf44      	itt	mi
 8005be4:	232b      	movmi	r3, #43	@ 0x2b
 8005be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bea:	f89a 3000 	ldrb.w	r3, [sl]
 8005bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bf0:	d015      	beq.n	8005c1e <_svfiprintf_r+0xfa>
 8005bf2:	9a07      	ldr	r2, [sp, #28]
 8005bf4:	4654      	mov	r4, sl
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	f04f 0c0a 	mov.w	ip, #10
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c02:	3b30      	subs	r3, #48	@ 0x30
 8005c04:	2b09      	cmp	r3, #9
 8005c06:	d94b      	bls.n	8005ca0 <_svfiprintf_r+0x17c>
 8005c08:	b1b0      	cbz	r0, 8005c38 <_svfiprintf_r+0x114>
 8005c0a:	9207      	str	r2, [sp, #28]
 8005c0c:	e014      	b.n	8005c38 <_svfiprintf_r+0x114>
 8005c0e:	eba0 0308 	sub.w	r3, r0, r8
 8005c12:	fa09 f303 	lsl.w	r3, r9, r3
 8005c16:	4313      	orrs	r3, r2
 8005c18:	9304      	str	r3, [sp, #16]
 8005c1a:	46a2      	mov	sl, r4
 8005c1c:	e7d2      	b.n	8005bc4 <_svfiprintf_r+0xa0>
 8005c1e:	9b03      	ldr	r3, [sp, #12]
 8005c20:	1d19      	adds	r1, r3, #4
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	9103      	str	r1, [sp, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	bfbb      	ittet	lt
 8005c2a:	425b      	neglt	r3, r3
 8005c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8005c30:	9307      	strge	r3, [sp, #28]
 8005c32:	9307      	strlt	r3, [sp, #28]
 8005c34:	bfb8      	it	lt
 8005c36:	9204      	strlt	r2, [sp, #16]
 8005c38:	7823      	ldrb	r3, [r4, #0]
 8005c3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c3c:	d10a      	bne.n	8005c54 <_svfiprintf_r+0x130>
 8005c3e:	7863      	ldrb	r3, [r4, #1]
 8005c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c42:	d132      	bne.n	8005caa <_svfiprintf_r+0x186>
 8005c44:	9b03      	ldr	r3, [sp, #12]
 8005c46:	1d1a      	adds	r2, r3, #4
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	9203      	str	r2, [sp, #12]
 8005c4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c50:	3402      	adds	r4, #2
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d18 <_svfiprintf_r+0x1f4>
 8005c58:	7821      	ldrb	r1, [r4, #0]
 8005c5a:	2203      	movs	r2, #3
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	f7fa fa97 	bl	8000190 <memchr>
 8005c62:	b138      	cbz	r0, 8005c74 <_svfiprintf_r+0x150>
 8005c64:	9b04      	ldr	r3, [sp, #16]
 8005c66:	eba0 000a 	sub.w	r0, r0, sl
 8005c6a:	2240      	movs	r2, #64	@ 0x40
 8005c6c:	4082      	lsls	r2, r0
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	3401      	adds	r4, #1
 8005c72:	9304      	str	r3, [sp, #16]
 8005c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c78:	4824      	ldr	r0, [pc, #144]	@ (8005d0c <_svfiprintf_r+0x1e8>)
 8005c7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c7e:	2206      	movs	r2, #6
 8005c80:	f7fa fa86 	bl	8000190 <memchr>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d036      	beq.n	8005cf6 <_svfiprintf_r+0x1d2>
 8005c88:	4b21      	ldr	r3, [pc, #132]	@ (8005d10 <_svfiprintf_r+0x1ec>)
 8005c8a:	bb1b      	cbnz	r3, 8005cd4 <_svfiprintf_r+0x1b0>
 8005c8c:	9b03      	ldr	r3, [sp, #12]
 8005c8e:	3307      	adds	r3, #7
 8005c90:	f023 0307 	bic.w	r3, r3, #7
 8005c94:	3308      	adds	r3, #8
 8005c96:	9303      	str	r3, [sp, #12]
 8005c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c9a:	4433      	add	r3, r6
 8005c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c9e:	e76a      	b.n	8005b76 <_svfiprintf_r+0x52>
 8005ca0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	e7a8      	b.n	8005bfc <_svfiprintf_r+0xd8>
 8005caa:	2300      	movs	r3, #0
 8005cac:	3401      	adds	r4, #1
 8005cae:	9305      	str	r3, [sp, #20]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	f04f 0c0a 	mov.w	ip, #10
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cbc:	3a30      	subs	r2, #48	@ 0x30
 8005cbe:	2a09      	cmp	r2, #9
 8005cc0:	d903      	bls.n	8005cca <_svfiprintf_r+0x1a6>
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0c6      	beq.n	8005c54 <_svfiprintf_r+0x130>
 8005cc6:	9105      	str	r1, [sp, #20]
 8005cc8:	e7c4      	b.n	8005c54 <_svfiprintf_r+0x130>
 8005cca:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cce:	4604      	mov	r4, r0
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e7f0      	b.n	8005cb6 <_svfiprintf_r+0x192>
 8005cd4:	ab03      	add	r3, sp, #12
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	462a      	mov	r2, r5
 8005cda:	4b0e      	ldr	r3, [pc, #56]	@ (8005d14 <_svfiprintf_r+0x1f0>)
 8005cdc:	a904      	add	r1, sp, #16
 8005cde:	4638      	mov	r0, r7
 8005ce0:	f3af 8000 	nop.w
 8005ce4:	1c42      	adds	r2, r0, #1
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	d1d6      	bne.n	8005c98 <_svfiprintf_r+0x174>
 8005cea:	89ab      	ldrh	r3, [r5, #12]
 8005cec:	065b      	lsls	r3, r3, #25
 8005cee:	f53f af2d 	bmi.w	8005b4c <_svfiprintf_r+0x28>
 8005cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cf4:	e72c      	b.n	8005b50 <_svfiprintf_r+0x2c>
 8005cf6:	ab03      	add	r3, sp, #12
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	462a      	mov	r2, r5
 8005cfc:	4b05      	ldr	r3, [pc, #20]	@ (8005d14 <_svfiprintf_r+0x1f0>)
 8005cfe:	a904      	add	r1, sp, #16
 8005d00:	4638      	mov	r0, r7
 8005d02:	f000 f879 	bl	8005df8 <_printf_i>
 8005d06:	e7ed      	b.n	8005ce4 <_svfiprintf_r+0x1c0>
 8005d08:	08006284 	.word	0x08006284
 8005d0c:	0800628e 	.word	0x0800628e
 8005d10:	00000000 	.word	0x00000000
 8005d14:	08005a6d 	.word	0x08005a6d
 8005d18:	0800628a 	.word	0x0800628a

08005d1c <_printf_common>:
 8005d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d20:	4616      	mov	r6, r2
 8005d22:	4698      	mov	r8, r3
 8005d24:	688a      	ldr	r2, [r1, #8]
 8005d26:	690b      	ldr	r3, [r1, #16]
 8005d28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	bfb8      	it	lt
 8005d30:	4613      	movlt	r3, r2
 8005d32:	6033      	str	r3, [r6, #0]
 8005d34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d38:	4607      	mov	r7, r0
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	b10a      	cbz	r2, 8005d42 <_printf_common+0x26>
 8005d3e:	3301      	adds	r3, #1
 8005d40:	6033      	str	r3, [r6, #0]
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	0699      	lsls	r1, r3, #26
 8005d46:	bf42      	ittt	mi
 8005d48:	6833      	ldrmi	r3, [r6, #0]
 8005d4a:	3302      	addmi	r3, #2
 8005d4c:	6033      	strmi	r3, [r6, #0]
 8005d4e:	6825      	ldr	r5, [r4, #0]
 8005d50:	f015 0506 	ands.w	r5, r5, #6
 8005d54:	d106      	bne.n	8005d64 <_printf_common+0x48>
 8005d56:	f104 0a19 	add.w	sl, r4, #25
 8005d5a:	68e3      	ldr	r3, [r4, #12]
 8005d5c:	6832      	ldr	r2, [r6, #0]
 8005d5e:	1a9b      	subs	r3, r3, r2
 8005d60:	42ab      	cmp	r3, r5
 8005d62:	dc26      	bgt.n	8005db2 <_printf_common+0x96>
 8005d64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d68:	6822      	ldr	r2, [r4, #0]
 8005d6a:	3b00      	subs	r3, #0
 8005d6c:	bf18      	it	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	0692      	lsls	r2, r2, #26
 8005d72:	d42b      	bmi.n	8005dcc <_printf_common+0xb0>
 8005d74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d78:	4641      	mov	r1, r8
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	47c8      	blx	r9
 8005d7e:	3001      	adds	r0, #1
 8005d80:	d01e      	beq.n	8005dc0 <_printf_common+0xa4>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	6922      	ldr	r2, [r4, #16]
 8005d86:	f003 0306 	and.w	r3, r3, #6
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	bf02      	ittt	eq
 8005d8e:	68e5      	ldreq	r5, [r4, #12]
 8005d90:	6833      	ldreq	r3, [r6, #0]
 8005d92:	1aed      	subeq	r5, r5, r3
 8005d94:	68a3      	ldr	r3, [r4, #8]
 8005d96:	bf0c      	ite	eq
 8005d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d9c:	2500      	movne	r5, #0
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	bfc4      	itt	gt
 8005da2:	1a9b      	subgt	r3, r3, r2
 8005da4:	18ed      	addgt	r5, r5, r3
 8005da6:	2600      	movs	r6, #0
 8005da8:	341a      	adds	r4, #26
 8005daa:	42b5      	cmp	r5, r6
 8005dac:	d11a      	bne.n	8005de4 <_printf_common+0xc8>
 8005dae:	2000      	movs	r0, #0
 8005db0:	e008      	b.n	8005dc4 <_printf_common+0xa8>
 8005db2:	2301      	movs	r3, #1
 8005db4:	4652      	mov	r2, sl
 8005db6:	4641      	mov	r1, r8
 8005db8:	4638      	mov	r0, r7
 8005dba:	47c8      	blx	r9
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d103      	bne.n	8005dc8 <_printf_common+0xac>
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc8:	3501      	adds	r5, #1
 8005dca:	e7c6      	b.n	8005d5a <_printf_common+0x3e>
 8005dcc:	18e1      	adds	r1, r4, r3
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	2030      	movs	r0, #48	@ 0x30
 8005dd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dd6:	4422      	add	r2, r4
 8005dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ddc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005de0:	3302      	adds	r3, #2
 8005de2:	e7c7      	b.n	8005d74 <_printf_common+0x58>
 8005de4:	2301      	movs	r3, #1
 8005de6:	4622      	mov	r2, r4
 8005de8:	4641      	mov	r1, r8
 8005dea:	4638      	mov	r0, r7
 8005dec:	47c8      	blx	r9
 8005dee:	3001      	adds	r0, #1
 8005df0:	d0e6      	beq.n	8005dc0 <_printf_common+0xa4>
 8005df2:	3601      	adds	r6, #1
 8005df4:	e7d9      	b.n	8005daa <_printf_common+0x8e>
	...

08005df8 <_printf_i>:
 8005df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfc:	7e0f      	ldrb	r7, [r1, #24]
 8005dfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e00:	2f78      	cmp	r7, #120	@ 0x78
 8005e02:	4691      	mov	r9, r2
 8005e04:	4680      	mov	r8, r0
 8005e06:	460c      	mov	r4, r1
 8005e08:	469a      	mov	sl, r3
 8005e0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e0e:	d807      	bhi.n	8005e20 <_printf_i+0x28>
 8005e10:	2f62      	cmp	r7, #98	@ 0x62
 8005e12:	d80a      	bhi.n	8005e2a <_printf_i+0x32>
 8005e14:	2f00      	cmp	r7, #0
 8005e16:	f000 80d2 	beq.w	8005fbe <_printf_i+0x1c6>
 8005e1a:	2f58      	cmp	r7, #88	@ 0x58
 8005e1c:	f000 80b9 	beq.w	8005f92 <_printf_i+0x19a>
 8005e20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e28:	e03a      	b.n	8005ea0 <_printf_i+0xa8>
 8005e2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e2e:	2b15      	cmp	r3, #21
 8005e30:	d8f6      	bhi.n	8005e20 <_printf_i+0x28>
 8005e32:	a101      	add	r1, pc, #4	@ (adr r1, 8005e38 <_printf_i+0x40>)
 8005e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e38:	08005e91 	.word	0x08005e91
 8005e3c:	08005ea5 	.word	0x08005ea5
 8005e40:	08005e21 	.word	0x08005e21
 8005e44:	08005e21 	.word	0x08005e21
 8005e48:	08005e21 	.word	0x08005e21
 8005e4c:	08005e21 	.word	0x08005e21
 8005e50:	08005ea5 	.word	0x08005ea5
 8005e54:	08005e21 	.word	0x08005e21
 8005e58:	08005e21 	.word	0x08005e21
 8005e5c:	08005e21 	.word	0x08005e21
 8005e60:	08005e21 	.word	0x08005e21
 8005e64:	08005fa5 	.word	0x08005fa5
 8005e68:	08005ecf 	.word	0x08005ecf
 8005e6c:	08005f5f 	.word	0x08005f5f
 8005e70:	08005e21 	.word	0x08005e21
 8005e74:	08005e21 	.word	0x08005e21
 8005e78:	08005fc7 	.word	0x08005fc7
 8005e7c:	08005e21 	.word	0x08005e21
 8005e80:	08005ecf 	.word	0x08005ecf
 8005e84:	08005e21 	.word	0x08005e21
 8005e88:	08005e21 	.word	0x08005e21
 8005e8c:	08005f67 	.word	0x08005f67
 8005e90:	6833      	ldr	r3, [r6, #0]
 8005e92:	1d1a      	adds	r2, r3, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6032      	str	r2, [r6, #0]
 8005e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e09d      	b.n	8005fe0 <_printf_i+0x1e8>
 8005ea4:	6833      	ldr	r3, [r6, #0]
 8005ea6:	6820      	ldr	r0, [r4, #0]
 8005ea8:	1d19      	adds	r1, r3, #4
 8005eaa:	6031      	str	r1, [r6, #0]
 8005eac:	0606      	lsls	r6, r0, #24
 8005eae:	d501      	bpl.n	8005eb4 <_printf_i+0xbc>
 8005eb0:	681d      	ldr	r5, [r3, #0]
 8005eb2:	e003      	b.n	8005ebc <_printf_i+0xc4>
 8005eb4:	0645      	lsls	r5, r0, #25
 8005eb6:	d5fb      	bpl.n	8005eb0 <_printf_i+0xb8>
 8005eb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ebc:	2d00      	cmp	r5, #0
 8005ebe:	da03      	bge.n	8005ec8 <_printf_i+0xd0>
 8005ec0:	232d      	movs	r3, #45	@ 0x2d
 8005ec2:	426d      	negs	r5, r5
 8005ec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ec8:	4859      	ldr	r0, [pc, #356]	@ (8006030 <_printf_i+0x238>)
 8005eca:	230a      	movs	r3, #10
 8005ecc:	e011      	b.n	8005ef2 <_printf_i+0xfa>
 8005ece:	6821      	ldr	r1, [r4, #0]
 8005ed0:	6833      	ldr	r3, [r6, #0]
 8005ed2:	0608      	lsls	r0, r1, #24
 8005ed4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ed8:	d402      	bmi.n	8005ee0 <_printf_i+0xe8>
 8005eda:	0649      	lsls	r1, r1, #25
 8005edc:	bf48      	it	mi
 8005ede:	b2ad      	uxthmi	r5, r5
 8005ee0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ee2:	4853      	ldr	r0, [pc, #332]	@ (8006030 <_printf_i+0x238>)
 8005ee4:	6033      	str	r3, [r6, #0]
 8005ee6:	bf14      	ite	ne
 8005ee8:	230a      	movne	r3, #10
 8005eea:	2308      	moveq	r3, #8
 8005eec:	2100      	movs	r1, #0
 8005eee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ef2:	6866      	ldr	r6, [r4, #4]
 8005ef4:	60a6      	str	r6, [r4, #8]
 8005ef6:	2e00      	cmp	r6, #0
 8005ef8:	bfa2      	ittt	ge
 8005efa:	6821      	ldrge	r1, [r4, #0]
 8005efc:	f021 0104 	bicge.w	r1, r1, #4
 8005f00:	6021      	strge	r1, [r4, #0]
 8005f02:	b90d      	cbnz	r5, 8005f08 <_printf_i+0x110>
 8005f04:	2e00      	cmp	r6, #0
 8005f06:	d04b      	beq.n	8005fa0 <_printf_i+0x1a8>
 8005f08:	4616      	mov	r6, r2
 8005f0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f0e:	fb03 5711 	mls	r7, r3, r1, r5
 8005f12:	5dc7      	ldrb	r7, [r0, r7]
 8005f14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f18:	462f      	mov	r7, r5
 8005f1a:	42bb      	cmp	r3, r7
 8005f1c:	460d      	mov	r5, r1
 8005f1e:	d9f4      	bls.n	8005f0a <_printf_i+0x112>
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d10b      	bne.n	8005f3c <_printf_i+0x144>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	07df      	lsls	r7, r3, #31
 8005f28:	d508      	bpl.n	8005f3c <_printf_i+0x144>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	6861      	ldr	r1, [r4, #4]
 8005f2e:	4299      	cmp	r1, r3
 8005f30:	bfde      	ittt	le
 8005f32:	2330      	movle	r3, #48	@ 0x30
 8005f34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f3c:	1b92      	subs	r2, r2, r6
 8005f3e:	6122      	str	r2, [r4, #16]
 8005f40:	f8cd a000 	str.w	sl, [sp]
 8005f44:	464b      	mov	r3, r9
 8005f46:	aa03      	add	r2, sp, #12
 8005f48:	4621      	mov	r1, r4
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	f7ff fee6 	bl	8005d1c <_printf_common>
 8005f50:	3001      	adds	r0, #1
 8005f52:	d14a      	bne.n	8005fea <_printf_i+0x1f2>
 8005f54:	f04f 30ff 	mov.w	r0, #4294967295
 8005f58:	b004      	add	sp, #16
 8005f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	f043 0320 	orr.w	r3, r3, #32
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	4833      	ldr	r0, [pc, #204]	@ (8006034 <_printf_i+0x23c>)
 8005f68:	2778      	movs	r7, #120	@ 0x78
 8005f6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	6831      	ldr	r1, [r6, #0]
 8005f72:	061f      	lsls	r7, r3, #24
 8005f74:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f78:	d402      	bmi.n	8005f80 <_printf_i+0x188>
 8005f7a:	065f      	lsls	r7, r3, #25
 8005f7c:	bf48      	it	mi
 8005f7e:	b2ad      	uxthmi	r5, r5
 8005f80:	6031      	str	r1, [r6, #0]
 8005f82:	07d9      	lsls	r1, r3, #31
 8005f84:	bf44      	itt	mi
 8005f86:	f043 0320 	orrmi.w	r3, r3, #32
 8005f8a:	6023      	strmi	r3, [r4, #0]
 8005f8c:	b11d      	cbz	r5, 8005f96 <_printf_i+0x19e>
 8005f8e:	2310      	movs	r3, #16
 8005f90:	e7ac      	b.n	8005eec <_printf_i+0xf4>
 8005f92:	4827      	ldr	r0, [pc, #156]	@ (8006030 <_printf_i+0x238>)
 8005f94:	e7e9      	b.n	8005f6a <_printf_i+0x172>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	f023 0320 	bic.w	r3, r3, #32
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	e7f6      	b.n	8005f8e <_printf_i+0x196>
 8005fa0:	4616      	mov	r6, r2
 8005fa2:	e7bd      	b.n	8005f20 <_printf_i+0x128>
 8005fa4:	6833      	ldr	r3, [r6, #0]
 8005fa6:	6825      	ldr	r5, [r4, #0]
 8005fa8:	6961      	ldr	r1, [r4, #20]
 8005faa:	1d18      	adds	r0, r3, #4
 8005fac:	6030      	str	r0, [r6, #0]
 8005fae:	062e      	lsls	r6, r5, #24
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	d501      	bpl.n	8005fb8 <_printf_i+0x1c0>
 8005fb4:	6019      	str	r1, [r3, #0]
 8005fb6:	e002      	b.n	8005fbe <_printf_i+0x1c6>
 8005fb8:	0668      	lsls	r0, r5, #25
 8005fba:	d5fb      	bpl.n	8005fb4 <_printf_i+0x1bc>
 8005fbc:	8019      	strh	r1, [r3, #0]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	6123      	str	r3, [r4, #16]
 8005fc2:	4616      	mov	r6, r2
 8005fc4:	e7bc      	b.n	8005f40 <_printf_i+0x148>
 8005fc6:	6833      	ldr	r3, [r6, #0]
 8005fc8:	1d1a      	adds	r2, r3, #4
 8005fca:	6032      	str	r2, [r6, #0]
 8005fcc:	681e      	ldr	r6, [r3, #0]
 8005fce:	6862      	ldr	r2, [r4, #4]
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f7fa f8dc 	bl	8000190 <memchr>
 8005fd8:	b108      	cbz	r0, 8005fde <_printf_i+0x1e6>
 8005fda:	1b80      	subs	r0, r0, r6
 8005fdc:	6060      	str	r0, [r4, #4]
 8005fde:	6863      	ldr	r3, [r4, #4]
 8005fe0:	6123      	str	r3, [r4, #16]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fe8:	e7aa      	b.n	8005f40 <_printf_i+0x148>
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	4632      	mov	r2, r6
 8005fee:	4649      	mov	r1, r9
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	47d0      	blx	sl
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d0ad      	beq.n	8005f54 <_printf_i+0x15c>
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	079b      	lsls	r3, r3, #30
 8005ffc:	d413      	bmi.n	8006026 <_printf_i+0x22e>
 8005ffe:	68e0      	ldr	r0, [r4, #12]
 8006000:	9b03      	ldr	r3, [sp, #12]
 8006002:	4298      	cmp	r0, r3
 8006004:	bfb8      	it	lt
 8006006:	4618      	movlt	r0, r3
 8006008:	e7a6      	b.n	8005f58 <_printf_i+0x160>
 800600a:	2301      	movs	r3, #1
 800600c:	4632      	mov	r2, r6
 800600e:	4649      	mov	r1, r9
 8006010:	4640      	mov	r0, r8
 8006012:	47d0      	blx	sl
 8006014:	3001      	adds	r0, #1
 8006016:	d09d      	beq.n	8005f54 <_printf_i+0x15c>
 8006018:	3501      	adds	r5, #1
 800601a:	68e3      	ldr	r3, [r4, #12]
 800601c:	9903      	ldr	r1, [sp, #12]
 800601e:	1a5b      	subs	r3, r3, r1
 8006020:	42ab      	cmp	r3, r5
 8006022:	dcf2      	bgt.n	800600a <_printf_i+0x212>
 8006024:	e7eb      	b.n	8005ffe <_printf_i+0x206>
 8006026:	2500      	movs	r5, #0
 8006028:	f104 0619 	add.w	r6, r4, #25
 800602c:	e7f5      	b.n	800601a <_printf_i+0x222>
 800602e:	bf00      	nop
 8006030:	08006295 	.word	0x08006295
 8006034:	080062a6 	.word	0x080062a6

08006038 <memmove>:
 8006038:	4288      	cmp	r0, r1
 800603a:	b510      	push	{r4, lr}
 800603c:	eb01 0402 	add.w	r4, r1, r2
 8006040:	d902      	bls.n	8006048 <memmove+0x10>
 8006042:	4284      	cmp	r4, r0
 8006044:	4623      	mov	r3, r4
 8006046:	d807      	bhi.n	8006058 <memmove+0x20>
 8006048:	1e43      	subs	r3, r0, #1
 800604a:	42a1      	cmp	r1, r4
 800604c:	d008      	beq.n	8006060 <memmove+0x28>
 800604e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006052:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006056:	e7f8      	b.n	800604a <memmove+0x12>
 8006058:	4402      	add	r2, r0
 800605a:	4601      	mov	r1, r0
 800605c:	428a      	cmp	r2, r1
 800605e:	d100      	bne.n	8006062 <memmove+0x2a>
 8006060:	bd10      	pop	{r4, pc}
 8006062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800606a:	e7f7      	b.n	800605c <memmove+0x24>

0800606c <_sbrk_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4d06      	ldr	r5, [pc, #24]	@ (8006088 <_sbrk_r+0x1c>)
 8006070:	2300      	movs	r3, #0
 8006072:	4604      	mov	r4, r0
 8006074:	4608      	mov	r0, r1
 8006076:	602b      	str	r3, [r5, #0]
 8006078:	f7fa ff24 	bl	8000ec4 <_sbrk>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	d102      	bne.n	8006086 <_sbrk_r+0x1a>
 8006080:	682b      	ldr	r3, [r5, #0]
 8006082:	b103      	cbz	r3, 8006086 <_sbrk_r+0x1a>
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	bd38      	pop	{r3, r4, r5, pc}
 8006088:	200002e0 	.word	0x200002e0

0800608c <memcpy>:
 800608c:	440a      	add	r2, r1
 800608e:	4291      	cmp	r1, r2
 8006090:	f100 33ff 	add.w	r3, r0, #4294967295
 8006094:	d100      	bne.n	8006098 <memcpy+0xc>
 8006096:	4770      	bx	lr
 8006098:	b510      	push	{r4, lr}
 800609a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800609e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060a2:	4291      	cmp	r1, r2
 80060a4:	d1f9      	bne.n	800609a <memcpy+0xe>
 80060a6:	bd10      	pop	{r4, pc}

080060a8 <_realloc_r>:
 80060a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ac:	4680      	mov	r8, r0
 80060ae:	4615      	mov	r5, r2
 80060b0:	460c      	mov	r4, r1
 80060b2:	b921      	cbnz	r1, 80060be <_realloc_r+0x16>
 80060b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060b8:	4611      	mov	r1, r2
 80060ba:	f7ff bc4b 	b.w	8005954 <_malloc_r>
 80060be:	b92a      	cbnz	r2, 80060cc <_realloc_r+0x24>
 80060c0:	f7ff fbdc 	bl	800587c <_free_r>
 80060c4:	2400      	movs	r4, #0
 80060c6:	4620      	mov	r0, r4
 80060c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060cc:	f000 f81a 	bl	8006104 <_malloc_usable_size_r>
 80060d0:	4285      	cmp	r5, r0
 80060d2:	4606      	mov	r6, r0
 80060d4:	d802      	bhi.n	80060dc <_realloc_r+0x34>
 80060d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060da:	d8f4      	bhi.n	80060c6 <_realloc_r+0x1e>
 80060dc:	4629      	mov	r1, r5
 80060de:	4640      	mov	r0, r8
 80060e0:	f7ff fc38 	bl	8005954 <_malloc_r>
 80060e4:	4607      	mov	r7, r0
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d0ec      	beq.n	80060c4 <_realloc_r+0x1c>
 80060ea:	42b5      	cmp	r5, r6
 80060ec:	462a      	mov	r2, r5
 80060ee:	4621      	mov	r1, r4
 80060f0:	bf28      	it	cs
 80060f2:	4632      	movcs	r2, r6
 80060f4:	f7ff ffca 	bl	800608c <memcpy>
 80060f8:	4621      	mov	r1, r4
 80060fa:	4640      	mov	r0, r8
 80060fc:	f7ff fbbe 	bl	800587c <_free_r>
 8006100:	463c      	mov	r4, r7
 8006102:	e7e0      	b.n	80060c6 <_realloc_r+0x1e>

08006104 <_malloc_usable_size_r>:
 8006104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006108:	1f18      	subs	r0, r3, #4
 800610a:	2b00      	cmp	r3, #0
 800610c:	bfbc      	itt	lt
 800610e:	580b      	ldrlt	r3, [r1, r0]
 8006110:	18c0      	addlt	r0, r0, r3
 8006112:	4770      	bx	lr

08006114 <_init>:
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	bf00      	nop
 8006118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611a:	bc08      	pop	{r3}
 800611c:	469e      	mov	lr, r3
 800611e:	4770      	bx	lr

08006120 <_fini>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	bf00      	nop
 8006124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006126:	bc08      	pop	{r3}
 8006128:	469e      	mov	lr, r3
 800612a:	4770      	bx	lr
