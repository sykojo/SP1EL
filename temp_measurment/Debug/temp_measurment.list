
temp_measurment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006064  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  080061a4  080061a4  000071a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006344  08006344  00007344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800634c  0800634c  0000734c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006350  08006350  00007350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000008  08006354  00008008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000028c  20000064  080063b0  00008064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002f0  080063b0  000082f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014cad  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a37  00000000  00000000  0001cd41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001690  00000000  00000000  0001f778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001137  00000000  00000000  00020e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023a8d  00000000  00000000  00021f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001412e  00000000  00000000  000459cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000eb995  00000000  00000000  00059afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0014548f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000064ac  00000000  00000000  001454d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  0014b980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000064 	.word	0x20000064
 800015c:	00000000 	.word	0x00000000
 8000160:	0800618c 	.word	0x0800618c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000068 	.word	0x20000068
 800017c:	0800618c 	.word	0x0800618c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800052e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800053c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000544:	68fb      	ldr	r3, [r7, #12]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d102      	bne.n	800056a <HAL_GPIO_EXTI_Callback+0x16>
	{
		exti_interupt=true;
 8000564:	4b04      	ldr	r3, [pc, #16]	@ (8000578 <HAL_GPIO_EXTI_Callback+0x24>)
 8000566:	2201      	movs	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]
	}
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	2000019c 	.word	0x2000019c

0800057c <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	rtc_interupt = true;
 8000584:	4b04      	ldr	r3, [pc, #16]	@ (8000598 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000019d 	.word	0x2000019d

0800059c <calculate_temperature>:

int32_t calculate_temperature(uint16_t raw_value)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
	uint16_t temp_mv = (3000*raw_value)/4096;
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da01      	bge.n	80005b8 <calculate_temperature+0x1c>
 80005b4:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80005b8:	131b      	asrs	r3, r3, #12
 80005ba:	81fb      	strh	r3, [r7, #14]
	int32_t retval = (int32_t)(1.22f*temp_mv-785)/2.5f + 30;
 80005bc:	89fb      	ldrh	r3, [r7, #14]
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000608 <calculate_temperature+0x6c>
 80005ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ce:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800060c <calculate_temperature+0x70>
 80005d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005de:	eef0 6a04 	vmov.f32	s13, #4	@ 0x40200000  2.5
 80005e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005e6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80005ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005f2:	ee17 3a90 	vmov	r3, s15
 80005f6:	60bb      	str	r3, [r7, #8]
	return retval;
 80005f8:	68bb      	ldr	r3, [r7, #8]

}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	3f9c28f6 	.word	0x3f9c28f6
 800060c:	44444000 	.word	0x44444000

08000610 <calculate_average>:

uint16_t calculate_average(uint16_t* values,uint32_t len)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
	int32_t sum=0;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	e00b      	b.n	800063c <calculate_average+0x2c>
	{
		  sum+=values[i];
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	4413      	add	r3, r2
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4413      	add	r3, r2
 8000634:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	3301      	adds	r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	429a      	cmp	r2, r3
 8000642:	d8ef      	bhi.n	8000624 <calculate_average+0x14>
	}
	return (uint16_t)sum/len;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	b29b      	uxth	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000650:	b29b      	uxth	r3, r3
}
 8000652:	4618      	mov	r0, r3
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <measure_temperature>:

int32_t measure_temperature()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	@ 0x28
 8000664:	af00      	add	r7, sp, #0
	uint16_t raw_values[N_SAMPLES] = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	221e      	movs	r2, #30
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f005 f90d 	bl	800588c <memset>
	for (int i = 0; i < N_SAMPLES; i++)
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
 8000676:	e018      	b.n	80006aa <measure_temperature+0x4a>
	{
	  HAL_ADC_Start(&hadc1);
 8000678:	4815      	ldr	r0, [pc, #84]	@ (80006d0 <measure_temperature+0x70>)
 800067a:	f001 f933 	bl	80018e4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800067e:	f04f 31ff 	mov.w	r1, #4294967295
 8000682:	4813      	ldr	r0, [pc, #76]	@ (80006d0 <measure_temperature+0x70>)
 8000684:	f001 f9b5 	bl	80019f2 <HAL_ADC_PollForConversion>
	  raw_values[i] = HAL_ADC_GetValue(&hadc1);
 8000688:	4811      	ldr	r0, [pc, #68]	@ (80006d0 <measure_temperature+0x70>)
 800068a:	f001 fa3f 	bl	8001b0c <HAL_ADC_GetValue>
 800068e:	4603      	mov	r3, r0
 8000690:	b29a      	uxth	r2, r3
 8000692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	3328      	adds	r3, #40	@ 0x28
 8000698:	443b      	add	r3, r7
 800069a:	f823 2c24 	strh.w	r2, [r3, #-36]
	  HAL_ADC_Stop(&hadc1);
 800069e:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <measure_temperature+0x70>)
 80006a0:	f001 f974 	bl	800198c <HAL_ADC_Stop>
	for (int i = 0; i < N_SAMPLES; i++)
 80006a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a6:	3301      	adds	r3, #1
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80006aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ac:	2b0e      	cmp	r3, #14
 80006ae:	dde3      	ble.n	8000678 <measure_temperature+0x18>
	}
	uint16_t average = calculate_average(raw_values,N_SAMPLES);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	210f      	movs	r1, #15
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ffab 	bl	8000610 <calculate_average>
 80006ba:	4603      	mov	r3, r0
 80006bc:	847b      	strh	r3, [r7, #34]	@ 0x22
	return calculate_temperature(average);
 80006be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff6b 	bl	800059c <calculate_temperature>
 80006c6:	4603      	mov	r3, r0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3728      	adds	r7, #40	@ 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000080 	.word	0x20000080

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	char msg[10] = {0};
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	809a      	strh	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 fcd1 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f8c3 	bl	8000874 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ee:	f000 f92d 	bl	800094c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f000 fa2b 	bl	8000b4c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006f6:	f000 f9dd 	bl	8000ab4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80006fa:	f000 f945 	bl	8000988 <MX_ADC1_Init>
  MX_RTC_Init();
 80006fe:	f000 f9a7 	bl	8000a50 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  char* str = "Going into SLEEP MODE in 5 seconds\r\n";
 8000702:	4b53      	ldr	r3, [pc, #332]	@ (8000850 <main+0x17c>)
 8000704:	617b      	str	r3, [r7, #20]
  HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000706:	6978      	ldr	r0, [r7, #20]
 8000708:	f7ff fd3a 	bl	8000180 <strlen>
 800070c:	4603      	mov	r3, r0
 800070e:	b29a      	uxth	r2, r3
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	6979      	ldr	r1, [r7, #20]
 8000716:	484f      	ldr	r0, [pc, #316]	@ (8000854 <main+0x180>)
 8000718:	f004 fac0 	bl	8004c9c <HAL_UART_Transmit>

  for (int i = 0; i < 10; i++) {
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
 8000720:	e00a      	b.n	8000738 <main+0x64>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000722:	2102      	movs	r1, #2
 8000724:	484c      	ldr	r0, [pc, #304]	@ (8000858 <main+0x184>)
 8000726:	f002 f9f3 	bl	8002b10 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800072a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800072e:	f000 fd33 	bl	8001198 <HAL_Delay>
  for (int i = 0; i < 10; i++) {
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3301      	adds	r3, #1
 8000736:	61fb      	str	r3, [r7, #28]
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	2b09      	cmp	r3, #9
 800073c:	ddf1      	ble.n	8000722 <main+0x4e>
	}

  HAL_SuspendTick();
 800073e:	f000 fd4f 	bl	80011e0 <HAL_SuspendTick>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2102      	movs	r1, #2
 8000746:	4844      	ldr	r0, [pc, #272]	@ (8000858 <main+0x184>)
 8000748:	f002 f9ca 	bl	8002ae0 <HAL_GPIO_WritePin>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // enter STOP MODE
 800074c:	2101      	movs	r1, #1
 800074e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000752:	f002 fa1f 	bl	8002b94 <HAL_PWR_EnterSTOPMode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(exti_interupt || rtc_interupt)
 8000756:	4b41      	ldr	r3, [pc, #260]	@ (800085c <main+0x188>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d103      	bne.n	8000766 <main+0x92>
 800075e:	4b40      	ldr	r3, [pc, #256]	@ (8000860 <main+0x18c>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0f7      	beq.n	8000756 <main+0x82>
	  {
		  SystemClock_Config();
 8000766:	f000 f885 	bl	8000874 <SystemClock_Config>
		  HAL_ResumeTick();
 800076a:	f000 fd49 	bl	8001200 <HAL_ResumeTick>
		  char *str;
		  if(exti_interupt)
 800076e:	4b3b      	ldr	r3, [pc, #236]	@ (800085c <main+0x188>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d00d      	beq.n	8000792 <main+0xbe>
		  {
			  str = "WAKEUP FROM EXTII\n\n\r";
 8000776:	4b3b      	ldr	r3, [pc, #236]	@ (8000864 <main+0x190>)
 8000778:	613b      	str	r3, [r7, #16]
			  HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen (str), HAL_MAX_DELAY);
 800077a:	6938      	ldr	r0, [r7, #16]
 800077c:	f7ff fd00 	bl	8000180 <strlen>
 8000780:	4603      	mov	r3, r0
 8000782:	b29a      	uxth	r2, r3
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	6939      	ldr	r1, [r7, #16]
 800078a:	4832      	ldr	r0, [pc, #200]	@ (8000854 <main+0x180>)
 800078c:	f004 fa86 	bl	8004c9c <HAL_UART_Transmit>
 8000790:	e010      	b.n	80007b4 <main+0xe0>
		  }
		  else if(rtc_interupt)
 8000792:	4b33      	ldr	r3, [pc, #204]	@ (8000860 <main+0x18c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d00c      	beq.n	80007b4 <main+0xe0>
		  {
			  str = "WAKEUP FROM RTC\n\n\r";
 800079a:	4b33      	ldr	r3, [pc, #204]	@ (8000868 <main+0x194>)
 800079c:	613b      	str	r3, [r7, #16]
			  HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen (str), HAL_MAX_DELAY);
 800079e:	6938      	ldr	r0, [r7, #16]
 80007a0:	f7ff fcee 	bl	8000180 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	6939      	ldr	r1, [r7, #16]
 80007ae:	4829      	ldr	r0, [pc, #164]	@ (8000854 <main+0x180>)
 80007b0:	f004 fa74 	bl	8004c9c <HAL_UART_Transmit>
		  }
		exti_interupt=false;
 80007b4:	4b29      	ldr	r3, [pc, #164]	@ (800085c <main+0x188>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
		rtc_interupt=false;
 80007ba:	4b29      	ldr	r3, [pc, #164]	@ (8000860 <main+0x18c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]


		// MEASURE TEMPERATURE
		__HAL_RCC_ADC_CLK_ENABLE();
 80007c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80007c4:	f7ff feac 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
		HAL_Delay(100);
 80007c8:	2064      	movs	r0, #100	@ 0x64
 80007ca:	f000 fce5 	bl	8001198 <HAL_Delay>
		int32_t temperature = measure_temperature();
 80007ce:	f7ff ff47 	bl	8000660 <measure_temperature>
 80007d2:	60f8      	str	r0, [r7, #12]
		sprintf(msg,"Temp: %hu\r\n",(int)temperature);
 80007d4:	463b      	mov	r3, r7
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	4924      	ldr	r1, [pc, #144]	@ (800086c <main+0x198>)
 80007da:	4618      	mov	r0, r3
 80007dc:	f005 f836 	bl	800584c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007e0:	463b      	mov	r3, r7
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fccc 	bl	8000180 <strlen>
 80007e8:	4603      	mov	r3, r0
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	4639      	mov	r1, r7
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	4818      	ldr	r0, [pc, #96]	@ (8000854 <main+0x180>)
 80007f4:	f004 fa52 	bl	8004c9c <HAL_UART_Transmit>

		//BLINK 5 TIMES
		for (int i = 0; i < 10; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	e00a      	b.n	8000814 <main+0x140>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80007fe:	2102      	movs	r1, #2
 8000800:	4815      	ldr	r0, [pc, #84]	@ (8000858 <main+0x184>)
 8000802:	f002 f985 	bl	8002b10 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8000806:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800080a:	f000 fcc5 	bl	8001198 <HAL_Delay>
		for (int i = 0; i < 10; i++) {
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	3301      	adds	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	2b09      	cmp	r3, #9
 8000818:	ddf1      	ble.n	80007fe <main+0x12a>
		}

		str = "GOING BACK TO SLEEP \n\n\r";
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <main+0x19c>)
 800081c:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen (str), HAL_MAX_DELAY);
 800081e:	6938      	ldr	r0, [r7, #16]
 8000820:	f7ff fcae 	bl	8000180 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	6939      	ldr	r1, [r7, #16]
 800082e:	4809      	ldr	r0, [pc, #36]	@ (8000854 <main+0x180>)
 8000830:	f004 fa34 	bl	8004c9c <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2102      	movs	r1, #2
 8000838:	4807      	ldr	r0, [pc, #28]	@ (8000858 <main+0x184>)
 800083a:	f002 f951 	bl	8002ae0 <HAL_GPIO_WritePin>

		HAL_SuspendTick();
 800083e:	f000 fccf 	bl	80011e0 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // enter STOP MODE
 8000842:	2101      	movs	r1, #1
 8000844:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000848:	f002 f9a4 	bl	8002b94 <HAL_PWR_EnterSTOPMode>
	  if(exti_interupt || rtc_interupt)
 800084c:	e783      	b.n	8000756 <main+0x82>
 800084e:	bf00      	nop
 8000850:	080061a4 	.word	0x080061a4
 8000854:	20000108 	.word	0x20000108
 8000858:	48000400 	.word	0x48000400
 800085c:	2000019c 	.word	0x2000019c
 8000860:	2000019d 	.word	0x2000019d
 8000864:	080061cc 	.word	0x080061cc
 8000868:	080061e4 	.word	0x080061e4
 800086c:	080061f8 	.word	0x080061f8
 8000870:	08006204 	.word	0x08006204

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b09a      	sub	sp, #104	@ 0x68
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2248      	movs	r2, #72	@ 0x48
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f005 f802 	bl	800588c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
 8000896:	615a      	str	r2, [r3, #20]
 8000898:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800089a:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <SystemClock_Config+0xd4>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80008a2:	4a29      	ldr	r2, [pc, #164]	@ (8000948 <SystemClock_Config+0xd4>)
 80008a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <SystemClock_Config+0xd4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80008b6:	232b      	movs	r3, #43	@ 0x2b
 80008b8:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008c6:	2301      	movs	r3, #1
 80008c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ca:	2340      	movs	r3, #64	@ 0x40
 80008cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008d2:	2360      	movs	r3, #96	@ 0x60
 80008d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008d6:	2305      	movs	r3, #5
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008de:	2301      	movs	r3, #1
 80008e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008e6:	2318      	movs	r3, #24
 80008e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80008ea:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 80008ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008f0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008f4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008fa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4618      	mov	r0, r3
 8000902:	f002 fd39 	bl	8003378 <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800090c:	f000 f994 	bl	8000c38 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000910:	236f      	movs	r3, #111	@ 0x6f
 8000912:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2303      	movs	r3, #3
 8000916:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2102      	movs	r1, #2
 8000930:	4618      	mov	r0, r3
 8000932:	f003 f895 	bl	8003a60 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800093c:	f000 f97c 	bl	8000c38 <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	3768      	adds	r7, #104	@ 0x68
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	58000400 	.word	0x58000400

0800094c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	@ 0x50
 8000950:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2250      	movs	r2, #80	@ 0x50
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f004 ff97 	bl	800588c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800095e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000962:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000964:	2300      	movs	r3, #0
 8000966:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000968:	2300      	movs	r3, #0
 800096a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fcb3 	bl	80042da <HAL_RCCEx_PeriphCLKConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800097a:	f000 f95d 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800097e:	bf00      	nop
 8000980:	3750      	adds	r7, #80	@ 0x50
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098e:	463b      	mov	r3, r7
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800099e:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009a0:	4a29      	ldr	r2, [pc, #164]	@ (8000a48 <MX_ADC1_Init+0xc0>)
 80009a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80009a4:	4b27      	ldr	r3, [pc, #156]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ac:	4b25      	ldr	r3, [pc, #148]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b2:	4b24      	ldr	r3, [pc, #144]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b8:	4b22      	ldr	r3, [pc, #136]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009be:	4b21      	ldr	r3, [pc, #132]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009c0:	2204      	movs	r2, #4
 80009c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80009d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009de:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009f2:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a00:	4810      	ldr	r0, [pc, #64]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 8000a02:	f000 fe23 	bl	800164c <HAL_ADC_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000a0c:	f000 f914 	bl	8000c38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_ADC1_Init+0xc4>)
 8000a12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a14:	2306      	movs	r3, #6
 8000a16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000a18:	2307      	movs	r3, #7
 8000a1a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a1c:	237f      	movs	r3, #127	@ 0x7f
 8000a1e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a20:	2304      	movs	r3, #4
 8000a22:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <MX_ADC1_Init+0xbc>)
 8000a2e:	f001 f87b 	bl	8001b28 <HAL_ADC_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000a38:	f000 f8fe 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000080 	.word	0x20000080
 8000a48:	50040000 	.word	0x50040000
 8000a4c:	c7520000 	.word	0xc7520000

08000a50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a54:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <MX_RTC_Init+0x5c>)
 8000a56:	4a16      	ldr	r2, [pc, #88]	@ (8000ab0 <MX_RTC_Init+0x60>)
 8000a58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MX_RTC_Init+0x5c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <MX_RTC_Init+0x5c>)
 8000a62:	227f      	movs	r2, #127	@ 0x7f
 8000a64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_RTC_Init+0x5c>)
 8000a68:	22ff      	movs	r2, #255	@ 0xff
 8000a6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_RTC_Init+0x5c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_RTC_Init+0x5c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_RTC_Init+0x5c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_RTC_Init+0x5c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a84:	4809      	ldr	r0, [pc, #36]	@ (8000aac <MX_RTC_Init+0x5c>)
 8000a86:	f003 feaf 	bl	80047e8 <HAL_RTC_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a90:	f000 f8d2 	bl	8000c38 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000a94:	2204      	movs	r2, #4
 8000a96:	213c      	movs	r1, #60	@ 0x3c
 8000a98:	4804      	ldr	r0, [pc, #16]	@ (8000aac <MX_RTC_Init+0x5c>)
 8000a9a:	f003 ffa5 	bl	80049e8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000aa4:	f000 f8c8 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200000e4 	.word	0x200000e4
 8000ab0:	40002800 	.word	0x40002800

08000ab4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab8:	4b22      	ldr	r3, [pc, #136]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000aba:	4a23      	ldr	r2, [pc, #140]	@ (8000b48 <MX_USART1_UART_Init+0x94>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000abe:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000ac0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af6:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000afc:	4811      	ldr	r0, [pc, #68]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000afe:	f004 f875 	bl	8004bec <HAL_HalfDuplex_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b08:	f000 f896 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	480d      	ldr	r0, [pc, #52]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000b10:	f004 fdd2 	bl	80056b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b1a:	f000 f88d 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4808      	ldr	r0, [pc, #32]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000b22:	f004 fe07 	bl	8005734 <HAL_UARTEx_SetRxFifoThreshold>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b2c:	f000 f884 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	@ (8000b44 <MX_USART1_UART_Init+0x90>)
 8000b32:	f004 fd88 	bl	8005646 <HAL_UARTEx_DisableFifoMode>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b3c:	f000 f87c 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000108 	.word	0x20000108
 8000b48:	40013800 	.word	0x40013800

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	2004      	movs	r0, #4
 8000b62:	f7ff fcdd 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	2002      	movs	r0, #2
 8000b68:	f7ff fcda 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff fcd7 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	2008      	movs	r0, #8
 8000b74:	f7ff fcd4 	bl	8000520 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2123      	movs	r1, #35	@ 0x23
 8000b7c:	482b      	ldr	r0, [pc, #172]	@ (8000c2c <MX_GPIO_Init+0xe0>)
 8000b7e:	f001 ffaf 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b82:	2310      	movs	r3, #16
 8000b84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	4619      	mov	r1, r3
 8000b92:	4827      	ldr	r0, [pc, #156]	@ (8000c30 <MX_GPIO_Init+0xe4>)
 8000b94:	f001 fe34 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000b98:	2323      	movs	r3, #35	@ 0x23
 8000b9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	4619      	mov	r1, r3
 8000bac:	481f      	ldr	r0, [pc, #124]	@ (8000c2c <MX_GPIO_Init+0xe0>)
 8000bae:	f001 fe27 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000bb2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000bb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd0:	f001 fe16 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_0_Pin */
  GPIO_InitStruct.Pin = BTN_0_Pin;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bd8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN_0_GPIO_Port, &GPIO_InitStruct);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4813      	ldr	r0, [pc, #76]	@ (8000c34 <MX_GPIO_Init+0xe8>)
 8000be8:	f001 fe0a 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bec:	2302      	movs	r3, #2
 8000bee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <MX_GPIO_Init+0xe8>)
 8000c00:	f001 fdfe 	bl	8002800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2100      	movs	r1, #0
 8000c08:	2006      	movs	r0, #6
 8000c0a:	f001 fdc4 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c0e:	2006      	movs	r0, #6
 8000c10:	f001 fddb 	bl	80027ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2007      	movs	r0, #7
 8000c1a:	f001 fdbc 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c1e:	2007      	movs	r0, #7
 8000c20:	f001 fdd3 	bl	80027ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	48000400 	.word	0x48000400
 8000c30:	48000800 	.word	0x48000800
 8000c34:	48000c00 	.word	0x48000c00

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <Error_Handler+0x8>

08000c44 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <LL_AHB2_GRP1_EnableClock>:
{
 8000c66:	b480      	push	{r7}
 8000c68:	b085      	sub	sp, #20
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4013      	ands	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ca4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ca6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b085      	sub	sp, #20
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cd6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000cd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ce6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4013      	ands	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b096      	sub	sp, #88	@ 0x58
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	2250      	movs	r2, #80	@ 0x50
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f004 fdb5 	bl	800588c <memset>
  if(hadc->Instance==ADC1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <HAL_ADC_MspInit+0x50>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d113      	bne.n	8000d54 <HAL_ADC_MspInit+0x48>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d30:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL;
 8000d32:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d36:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 facc 	bl	80042da <HAL_RCCEx_PeriphCLKConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8000d48:	f7ff ff76 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d4c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d50:	f7ff ff89 	bl	8000c66 <LL_AHB2_GRP1_EnableClock>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d54:	bf00      	nop
 8000d56:	3758      	adds	r7, #88	@ 0x58
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	50040000 	.word	0x50040000

08000d60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b096      	sub	sp, #88	@ 0x58
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	2250      	movs	r2, #80	@ 0x50
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 fd8b 	bl	800588c <memset>
  if(hrtc->Instance==RTC)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a13      	ldr	r2, [pc, #76]	@ (8000dc8 <HAL_RTC_MspInit+0x68>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d11f      	bne.n	8000dc0 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8000d80:	f001 fef8 	bl	8002b74 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d88:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 faa0 	bl	80042da <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8000da0:	f7ff ff4a 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000da4:	f7ff ff4e 	bl	8000c44 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000da8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000dac:	f7ff ff74 	bl	8000c98 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	2003      	movs	r0, #3
 8000db6:	f001 fcee 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000dba:	2003      	movs	r0, #3
 8000dbc:	f001 fd05 	bl	80027ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3758      	adds	r7, #88	@ 0x58
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40002800 	.word	0x40002800

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b09c      	sub	sp, #112	@ 0x70
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	2250      	movs	r2, #80	@ 0x50
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f004 fd4d 	bl	800588c <memset>
  if(huart->Instance==USART1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e70 <HAL_UART_MspInit+0xa4>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d134      	bne.n	8000e66 <HAL_UART_MspInit+0x9a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 fa66 	bl	80042da <HAL_RCCEx_PeriphCLKConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e14:	f7ff ff10 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e18:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e1c:	f7ff ff55 	bl	8000cca <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e20:	2002      	movs	r0, #2
 8000e22:	f7ff ff20 	bl	8000c66 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 8000e26:	2340      	movs	r3, #64	@ 0x40
 8000e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2a:	2312      	movs	r3, #18
 8000e2c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e36:	2307      	movs	r3, #7
 8000e38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <HAL_UART_MspInit+0xa8>)
 8000e42:	f001 fcdd 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 8000e46:	2380      	movs	r3, #128	@ 0x80
 8000e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e56:	2307      	movs	r3, #7
 8000e58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4804      	ldr	r0, [pc, #16]	@ (8000e74 <HAL_UART_MspInit+0xa8>)
 8000e62:	f001 fccd 	bl	8002800 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e66:	bf00      	nop
 8000e68:	3770      	adds	r7, #112	@ 0x70
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40013800 	.word	0x40013800
 8000e74:	48000400 	.word	0x48000400

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <NMI_Handler+0x4>

08000e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <MemManage_Handler+0x4>

08000e90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <UsageFault_Handler+0x4>

08000ea0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ece:	f000 f937 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <RTC_WKUP_IRQHandler+0x10>)
 8000ede:	f003 fe3f 	bl	8004b60 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000e4 	.word	0x200000e4

08000eec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_0_Pin);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f001 fe27 	bl	8002b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000efe:	2002      	movs	r0, #2
 8000f00:	f001 fe20 	bl	8002b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	@ (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f004 fcb0 	bl	800589c <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20030000 	.word	0x20030000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	200001a0 	.word	0x200001a0
 8000f70:	200002f0 	.word	0x200002f0

08000f74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000f78:	4b24      	ldr	r3, [pc, #144]	@ (800100c <SystemInit+0x98>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7e:	4a23      	ldr	r2, [pc, #140]	@ (800100c <SystemInit+0x98>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f9c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000fa0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <SystemInit+0x9c>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fbe:	f023 0305 	bic.w	r3, r3, #5
 8000fc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000fce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fd2:	f023 0301 	bic.w	r3, r3, #1
 8000fd6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fde:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <SystemInit+0xa0>)
 8000fe0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8001014 <SystemInit+0xa0>)
 8000fe8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ff4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ff8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	faf6fefb 	.word	0xfaf6fefb
 8001014:	22041000 	.word	0x22041000

08001018 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001018:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101c:	3304      	adds	r3, #4

0800101e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001020:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001022:	d3f9      	bcc.n	8001018 <CopyDataInit>
  bx lr
 8001024:	4770      	bx	lr

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001026:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001028:	3004      	adds	r0, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800102a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>
  bx lr
 800102e:	4770      	bx	lr

08001030 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001030:	480c      	ldr	r0, [pc, #48]	@ (8001064 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001032:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001034:	f7ff ff9e 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001038:	480b      	ldr	r0, [pc, #44]	@ (8001068 <LoopForever+0x6>)
 800103a:	490c      	ldr	r1, [pc, #48]	@ (800106c <LoopForever+0xa>)
 800103c:	4a0c      	ldr	r2, [pc, #48]	@ (8001070 <LoopForever+0xe>)
 800103e:	2300      	movs	r3, #0
 8001040:	f7ff ffed 	bl	800101e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001044:	480b      	ldr	r0, [pc, #44]	@ (8001074 <LoopForever+0x12>)
 8001046:	490c      	ldr	r1, [pc, #48]	@ (8001078 <LoopForever+0x16>)
 8001048:	4a0c      	ldr	r2, [pc, #48]	@ (800107c <LoopForever+0x1a>)
 800104a:	2300      	movs	r3, #0
 800104c:	f7ff ffe7 	bl	800101e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001050:	480b      	ldr	r0, [pc, #44]	@ (8001080 <LoopForever+0x1e>)
 8001052:	490c      	ldr	r1, [pc, #48]	@ (8001084 <LoopForever+0x22>)
 8001054:	2300      	movs	r3, #0
 8001056:	f7ff ffe8 	bl	800102a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800105a:	f004 fc25 	bl	80058a8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800105e:	f7ff fb39 	bl	80006d4 <main>

08001062 <LoopForever>:

LoopForever:
  b LoopForever
 8001062:	e7fe      	b.n	8001062 <LoopForever>
  ldr   r0, =_estack
 8001064:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001068:	20000008 	.word	0x20000008
 800106c:	20000064 	.word	0x20000064
 8001070:	08006354 	.word	0x08006354
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001074:	20030000 	.word	0x20030000
 8001078:	20030000 	.word	0x20030000
 800107c:	080063b0 	.word	0x080063b0
  INIT_BSS _sbss, _ebss
 8001080:	20000064 	.word	0x20000064
 8001084:	200002f0 	.word	0x200002f0

08001088 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC1_IRQHandler>
	...

0800108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <HAL_Init+0x3c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a0b      	ldr	r2, [pc, #44]	@ (80010c8 <HAL_Init+0x3c>)
 800109c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a2:	2003      	movs	r0, #3
 80010a4:	f001 fb6c 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a8:	2000      	movs	r0, #0
 80010aa:	f000 f80f 	bl	80010cc <HAL_InitTick>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	e001      	b.n	80010be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ba:	f7ff fe1f 	bl	8000cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010be:	79fb      	ldrb	r3, [r7, #7]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58004000 	.word	0x58004000

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80010d8:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <HAL_InitTick+0x6c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d024      	beq.n	800112a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010e0:	f002 fe6a 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 80010e4:	4602      	mov	r2, r0
 80010e6:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <HAL_InitTick+0x6c>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fb74 	bl	80027e6 <HAL_SYSTICK_Config>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10f      	bne.n	8001124 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	d809      	bhi.n	800111e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110a:	2200      	movs	r2, #0
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	f04f 30ff 	mov.w	r0, #4294967295
 8001112:	f001 fb40 	bl	8002796 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001116:	4a09      	ldr	r2, [pc, #36]	@ (800113c <HAL_InitTick+0x70>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	e007      	b.n	800112e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e004      	b.n	800112e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e001      	b.n	800112e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000010 	.word	0x20000010
 800113c:	2000000c 	.word	0x2000000c

08001140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000010 	.word	0x20000010
 8001164:	200001a4 	.word	0x200001a4

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	200001a4 	.word	0x200001a4

08001180 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001184:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <HAL_GetTickPrio+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000000c 	.word	0x2000000c

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffe2 	bl	8001168 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffd2 	bl	8001168 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000010 	.word	0x20000010

080011e0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <HAL_SuspendTick+0x1c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <HAL_SuspendTick+0x1c>)
 80011ea:	f023 0302 	bic.w	r3, r3, #2
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e010 	.word	0xe000e010

08001200 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <HAL_ResumeTick+0x1c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a04      	ldr	r2, [pc, #16]	@ (800121c <HAL_ResumeTick+0x1c>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3360      	adds	r3, #96	@ 0x60
 800129a:	461a      	mov	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <LL_ADC_SetOffset+0x44>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	4313      	orrs	r3, r2
 80012b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012c0:	bf00      	nop
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	03fff000 	.word	0x03fff000

080012d0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3360      	adds	r3, #96	@ 0x60
 80012de:	461a      	mov	r2, r3
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3360      	adds	r3, #96	@ 0x60
 800130c:	461a      	mov	r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	431a      	orrs	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001326:	bf00      	nop
 8001328:	371c      	adds	r7, #28
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800134a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3330      	adds	r3, #48	@ 0x30
 8001368:	461a      	mov	r2, r3
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	4413      	add	r3, r2
 8001376:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	f003 031f 	and.w	r3, r3, #31
 8001382:	211f      	movs	r1, #31
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	401a      	ands	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	0e9b      	lsrs	r3, r3, #26
 8001390:	f003 011f 	and.w	r1, r3, #31
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	431a      	orrs	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80013a4:	bf00      	nop
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3314      	adds	r3, #20
 80013c0:	461a      	mov	r2, r3
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	0e5b      	lsrs	r3, r3, #25
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	4413      	add	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	0d1b      	lsrs	r3, r3, #20
 80013d8:	f003 031f 	and.w	r3, r3, #31
 80013dc:	2107      	movs	r1, #7
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	401a      	ands	r2, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	0d1b      	lsrs	r3, r3, #20
 80013ea:	f003 031f 	and.w	r3, r3, #31
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	431a      	orrs	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80013fa:	bf00      	nop
 80013fc:	371c      	adds	r7, #28
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001420:	43db      	mvns	r3, r3
 8001422:	401a      	ands	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0318 	and.w	r3, r3, #24
 800142a:	4908      	ldr	r1, [pc, #32]	@ (800144c <LL_ADC_SetChannelSingleDiff+0x44>)
 800142c:	40d9      	lsrs	r1, r3
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	400b      	ands	r3, r1
 8001432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001436:	431a      	orrs	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	0007ffff 	.word	0x0007ffff

08001450 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6093      	str	r3, [r2, #8]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001488:	d101      	bne.n	800148e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80014ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80014d8:	d101      	bne.n	80014de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001500:	f043 0201 	orr.w	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001524:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001528:	f043 0202 	orr.w	r2, r3, #2
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b01      	cmp	r3, #1
 800154e:	d101      	bne.n	8001554 <LL_ADC_IsEnabled+0x18>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <LL_ADC_IsEnabled+0x1a>
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b02      	cmp	r3, #2
 8001574:	d101      	bne.n	800157a <LL_ADC_IsDisableOngoing+0x18>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <LL_ADC_IsDisableOngoing+0x1a>
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001598:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800159c:	f043 0204 	orr.w	r2, r3, #4
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015c4:	f043 0210 	orr.w	r2, r3, #16
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d101      	bne.n	80015f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800160e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001612:	f043 0220 	orr.w	r2, r3, #32
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b08      	cmp	r3, #8
 8001638:	d101      	bne.n	800163e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e12e      	b.n	80018c8 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001674:	2b00      	cmp	r3, #0
 8001676:	d109      	bne.n	800168c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fb47 	bl	8000d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff feef 	bl	8001474 <LL_ADC_IsDeepPowerDownEnabled>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fed5 	bl	8001450 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff0a 	bl	80014c4 <LL_ADC_IsInternalRegulatorEnabled>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d115      	bne.n	80016e2 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff feee 	bl	800149c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016c0:	4b83      	ldr	r3, [pc, #524]	@ (80018d0 <HAL_ADC_Init+0x284>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	099b      	lsrs	r3, r3, #6
 80016c6:	4a83      	ldr	r2, [pc, #524]	@ (80018d4 <HAL_ADC_Init+0x288>)
 80016c8:	fba2 2303 	umull	r2, r3, r2, r3
 80016cc:	099b      	lsrs	r3, r3, #6
 80016ce:	3301      	adds	r3, #1
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016d4:	e002      	b.n	80016dc <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3b01      	subs	r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f9      	bne.n	80016d6 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff feec 	bl	80014c4 <LL_ADC_IsInternalRegulatorEnabled>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10d      	bne.n	800170e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f6:	f043 0210 	orr.w	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001702:	f043 0201 	orr.w	r2, r3, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff60 	bl	80015d8 <LL_ADC_REG_IsConversionOngoing>
 8001718:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 80c7 	bne.w	80018b6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f040 80c3 	bne.w	80018b6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001734:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001738:	f043 0202 	orr.w	r2, r3, #2
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fef9 	bl	800153c <LL_ADC_IsEnabled>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10b      	bne.n	8001768 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001750:	4861      	ldr	r0, [pc, #388]	@ (80018d8 <HAL_ADC_Init+0x28c>)
 8001752:	f7ff fef3 	bl	800153c <LL_ADC_IsEnabled>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4619      	mov	r1, r3
 8001762:	485e      	ldr	r0, [pc, #376]	@ (80018dc <HAL_ADC_Init+0x290>)
 8001764:	f7ff fd5c 	bl	8001220 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7e5b      	ldrb	r3, [r3, #25]
 800176c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001772:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001778:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800177e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001786:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001788:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d106      	bne.n	80017a8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179e:	3b01      	subs	r3, #1
 80017a0:	045b      	lsls	r3, r3, #17
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	4b45      	ldr	r3, [pc, #276]	@ (80018e0 <HAL_ADC_Init+0x294>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	69b9      	ldr	r1, [r7, #24]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fefb 	bl	80015d8 <LL_ADC_REG_IsConversionOngoing>
 80017e2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff1c 	bl	8001626 <LL_ADC_INJ_IsConversionOngoing>
 80017ee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d13d      	bne.n	8001872 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d13a      	bne.n	8001872 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001800:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001808:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001818:	f023 0302 	bic.w	r3, r3, #2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	69b9      	ldr	r1, [r7, #24]
 8001822:	430b      	orrs	r3, r1
 8001824:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800182c:	2b01      	cmp	r3, #1
 800182e:	d118      	bne.n	8001862 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800183a:	f023 0304 	bic.w	r3, r3, #4
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001846:	4311      	orrs	r1, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800184c:	4311      	orrs	r1, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001852:	430a      	orrs	r2, r1
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	611a      	str	r2, [r3, #16]
 8001860:	e007      	b.n	8001872 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d10c      	bne.n	8001894 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	f023 010f 	bic.w	r1, r3, #15
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	1e5a      	subs	r2, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	631a      	str	r2, [r3, #48]	@ 0x30
 8001892:	e007      	b.n	80018a4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 020f 	bic.w	r2, r2, #15
 80018a2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a8:	f023 0303 	bic.w	r3, r3, #3
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80018b4:	e007      	b.n	80018c6 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ba:	f043 0210 	orr.w	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000008 	.word	0x20000008
 80018d4:	053e2d63 	.word	0x053e2d63
 80018d8:	50040000 	.word	0x50040000
 80018dc:	50040300 	.word	0x50040300
 80018e0:	fff0c007 	.word	0xfff0c007

080018e4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fe71 	bl	80015d8 <LL_ADC_REG_IsConversionOngoing>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d140      	bne.n	800197e <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001902:	2b01      	cmp	r3, #1
 8001904:	d101      	bne.n	800190a <HAL_ADC_Start+0x26>
 8001906:	2302      	movs	r3, #2
 8001908:	e03c      	b.n	8001984 <HAL_ADC_Start+0xa0>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fd8a 	bl	800242c <ADC_Enable>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d128      	bne.n	8001974 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001926:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800193e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001942:	d106      	bne.n	8001952 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001948:	f023 0206 	bic.w	r2, r3, #6
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001950:	e002      	b.n	8001958 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	221c      	movs	r2, #28
 800195e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fe0b 	bl	8001588 <LL_ADC_REG_StartConversion>
 8001972:	e006      	b.n	8001982 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800197c:	e001      	b.n	8001982 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800197e:	2302      	movs	r3, #2
 8001980:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001982:	7bfb      	ldrb	r3, [r7, #15]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_Stop+0x16>
 800199e:	2302      	movs	r3, #2
 80019a0:	e023      	b.n	80019ea <HAL_ADC_Stop+0x5e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80019aa:	2103      	movs	r1, #3
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 fc81 	bl	80022b4 <ADC_ConversionStop>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d111      	bne.n	80019e0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 fdaf 	bl	8002520 <ADC_Disable>
 80019c2:	4603      	mov	r3, r0
 80019c4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d109      	bne.n	80019e0 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d102      	bne.n	8001a0a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001a04:	2308      	movs	r3, #8
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	e010      	b.n	8001a2c <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d007      	beq.n	8001a28 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1c:	f043 0220 	orr.w	r2, r3, #32
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e06d      	b.n	8001b04 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001a28:	2304      	movs	r3, #4
 8001a2a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a2c:	f7ff fb9c 	bl	8001168 <HAL_GetTick>
 8001a30:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a32:	e021      	b.n	8001a78 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3a:	d01d      	beq.n	8001a78 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a3c:	f7ff fb94 	bl	8001168 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d302      	bcc.n	8001a52 <HAL_ADC_PollForConversion+0x60>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d112      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10b      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a64:	f043 0204 	orr.w	r2, r3, #4
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e045      	b.n	8001b04 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0d6      	beq.n	8001a34 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a8a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fc4b 	bl	8001332 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01c      	beq.n	8001adc <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7e5b      	ldrb	r3, [r3, #25]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d118      	bne.n	8001adc <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d111      	bne.n	8001adc <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001abc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad4:	f043 0201 	orr.w	r2, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d104      	bne.n	8001aec <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e00a      	b.n	8001b02 <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	220c      	movs	r2, #12
 8001b00:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b0b6      	sub	sp, #216	@ 0xd8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x22>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e39f      	b.n	800228a <HAL_ADC_ConfigChannel+0x762>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fd3e 	bl	80015d8 <LL_ADC_REG_IsConversionOngoing>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f040 8384 	bne.w	800226c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	f7ff fbf1 	bl	8001358 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fd2c 	bl	80015d8 <LL_ADC_REG_IsConversionOngoing>
 8001b80:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fd4c 	bl	8001626 <LL_ADC_INJ_IsConversionOngoing>
 8001b8e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 81a6 	bne.w	8001ee8 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f040 81a1 	bne.w	8001ee8 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	6819      	ldr	r1, [r3, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f7ff fbfc 	bl	80013b0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	08db      	lsrs	r3, r3, #3
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d00a      	beq.n	8001bf0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6919      	ldr	r1, [r3, #16]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001bea:	f7ff fb4d 	bl	8001288 <LL_ADC_SetOffset>
 8001bee:	e17b      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fb6a 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10a      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0xf4>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fb5f 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	0e9b      	lsrs	r3, r3, #26
 8001c16:	f003 021f 	and.w	r2, r3, #31
 8001c1a:	e01e      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x132>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fb54 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	e004      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001c4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d105      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x14a>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	0e9b      	lsrs	r3, r3, #26
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	e018      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x17c>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001c8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8001c96:	2320      	movs	r3, #32
 8001c98:	e004      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8001c9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d106      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2200      	movs	r2, #0
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fb23 	bl	80012fc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2101      	movs	r1, #1
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fb07 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10a      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x1ba>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fafc 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	0e9b      	lsrs	r3, r3, #26
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	e01e      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x1f8>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff faf1 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001d00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001d08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8001d10:	2320      	movs	r3, #32
 8001d12:	e004      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8001d14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x210>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0e9b      	lsrs	r3, r3, #26
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	e018      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x242>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001d4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	e004      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8001d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d106      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2200      	movs	r2, #0
 8001d74:	2101      	movs	r1, #1
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fac0 	bl	80012fc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2102      	movs	r1, #2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff faa4 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10a      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x280>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2102      	movs	r1, #2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fa99 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	0e9b      	lsrs	r3, r3, #26
 8001da2:	f003 021f 	and.w	r2, r3, #31
 8001da6:	e01e      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x2be>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2102      	movs	r1, #2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fa8e 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001dc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001dce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	e004      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001dda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d105      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x2d6>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	0e9b      	lsrs	r3, r3, #26
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	e016      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x304>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001e10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	e004      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8001e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d106      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2200      	movs	r2, #0
 8001e36:	2102      	movs	r1, #2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fa5f 	bl	80012fc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2103      	movs	r1, #3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fa43 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10a      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x342>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2103      	movs	r1, #3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fa38 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001e60:	4603      	mov	r3, r0
 8001e62:	0e9b      	lsrs	r3, r3, #26
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	e017      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x372>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2103      	movs	r1, #3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fa2d 	bl	80012d0 <LL_ADC_GetOffsetChannel>
 8001e76:	4603      	mov	r3, r0
 8001e78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001e82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e84:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001e86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	e003      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8001e90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x38a>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	0e9b      	lsrs	r3, r3, #26
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	e011      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x3ae>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001ec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ec2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8001eca:	2320      	movs	r3, #32
 8001ecc:	e003      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8001ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d106      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2103      	movs	r1, #3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fa0a 	bl	80012fc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fb25 	bl	800153c <LL_ADC_IsEnabled>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f040 81c2 	bne.w	800227e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6819      	ldr	r1, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	461a      	mov	r2, r3
 8001f08:	f7ff fa7e 	bl	8001408 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4a8e      	ldr	r2, [pc, #568]	@ (800214c <HAL_ADC_ConfigChannel+0x624>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	f040 8130 	bne.w	8002178 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10b      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x418>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	0e9b      	lsrs	r3, r3, #26
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	2b09      	cmp	r3, #9
 8001f36:	bf94      	ite	ls
 8001f38:	2301      	movls	r3, #1
 8001f3a:	2300      	movhi	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	e019      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x44c>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001f4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f50:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001f52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8001f58:	2320      	movs	r3, #32
 8001f5a:	e003      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8001f5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	f003 031f 	and.w	r3, r3, #31
 8001f6a:	2b09      	cmp	r3, #9
 8001f6c:	bf94      	ite	ls
 8001f6e:	2301      	movls	r3, #1
 8001f70:	2300      	movhi	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d079      	beq.n	800206c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d107      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x46c>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0e9b      	lsrs	r3, r3, #26
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	069b      	lsls	r3, r3, #26
 8001f8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f92:	e015      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x498>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fa4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001fac:	2320      	movs	r3, #32
 8001fae:	e003      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	3301      	adds	r3, #1
 8001fba:	069b      	lsls	r3, r3, #26
 8001fbc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x4b8>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0e9b      	lsrs	r3, r3, #26
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	2101      	movs	r1, #1
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	e017      	b.n	8002010 <HAL_ADC_ConfigChannel+0x4e8>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	e003      	b.n	8002004 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8001ffc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	3301      	adds	r3, #1
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	ea42 0103 	orr.w	r1, r2, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10a      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x50e>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0e9b      	lsrs	r3, r3, #26
 8002026:	3301      	adds	r3, #1
 8002028:	f003 021f 	and.w	r2, r3, #31
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	051b      	lsls	r3, r3, #20
 8002034:	e018      	b.n	8002068 <HAL_ADC_ConfigChannel+0x540>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002046:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800204e:	2320      	movs	r3, #32
 8002050:	e003      	b.n	800205a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	3301      	adds	r3, #1
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002068:	430b      	orrs	r3, r1
 800206a:	e080      	b.n	800216e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002074:	2b00      	cmp	r3, #0
 8002076:	d107      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x560>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0e9b      	lsrs	r3, r3, #26
 800207e:	3301      	adds	r3, #1
 8002080:	069b      	lsls	r3, r3, #26
 8002082:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002086:	e015      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x58c>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002098:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800209a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80020a0:	2320      	movs	r3, #32
 80020a2:	e003      	b.n	80020ac <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80020a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	3301      	adds	r3, #1
 80020ae:	069b      	lsls	r3, r3, #26
 80020b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x5ac>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	0e9b      	lsrs	r3, r3, #26
 80020c6:	3301      	adds	r3, #1
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	2101      	movs	r1, #1
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	e017      	b.n	8002104 <HAL_ADC_ConfigChannel+0x5dc>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	61fb      	str	r3, [r7, #28]
  return result;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80020ec:	2320      	movs	r3, #32
 80020ee:	e003      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	3301      	adds	r3, #1
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	2101      	movs	r1, #1
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	ea42 0103 	orr.w	r1, r2, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10d      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x608>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0e9b      	lsrs	r3, r3, #26
 800211a:	3301      	adds	r3, #1
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	3b1e      	subs	r3, #30
 8002128:	051b      	lsls	r3, r3, #20
 800212a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800212e:	e01d      	b.n	800216c <HAL_ADC_ConfigChannel+0x644>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	613b      	str	r3, [r7, #16]
  return result;
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d103      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002148:	2320      	movs	r3, #32
 800214a:	e005      	b.n	8002158 <HAL_ADC_ConfigChannel+0x630>
 800214c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	3301      	adds	r3, #1
 800215a:	f003 021f 	and.w	r2, r3, #31
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	3b1e      	subs	r3, #30
 8002166:	051b      	lsls	r3, r3, #20
 8002168:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800216c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002172:	4619      	mov	r1, r3
 8002174:	f7ff f91c 	bl	80013b0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b45      	ldr	r3, [pc, #276]	@ (8002294 <HAL_ADC_ConfigChannel+0x76c>)
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d07c      	beq.n	800227e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002184:	4844      	ldr	r0, [pc, #272]	@ (8002298 <HAL_ADC_ConfigChannel+0x770>)
 8002186:	f7ff f871 	bl	800126c <LL_ADC_GetCommonPathInternalCh>
 800218a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800218e:	4843      	ldr	r0, [pc, #268]	@ (800229c <HAL_ADC_ConfigChannel+0x774>)
 8002190:	f7ff f9d4 	bl	800153c <LL_ADC_IsEnabled>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d15e      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a40      	ldr	r2, [pc, #256]	@ (80022a0 <HAL_ADC_ConfigChannel+0x778>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d127      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x6cc>
 80021a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d121      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a39      	ldr	r2, [pc, #228]	@ (800229c <HAL_ADC_ConfigChannel+0x774>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d161      	bne.n	800227e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80021ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021c2:	4619      	mov	r1, r3
 80021c4:	4834      	ldr	r0, [pc, #208]	@ (8002298 <HAL_ADC_ConfigChannel+0x770>)
 80021c6:	f7ff f83e 	bl	8001246 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021ca:	4b36      	ldr	r3, [pc, #216]	@ (80022a4 <HAL_ADC_ConfigChannel+0x77c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	099b      	lsrs	r3, r3, #6
 80021d0:	4a35      	ldr	r2, [pc, #212]	@ (80022a8 <HAL_ADC_ConfigChannel+0x780>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80021e4:	e002      	b.n	80021ec <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f9      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021f2:	e044      	b.n	800227e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2c      	ldr	r2, [pc, #176]	@ (80022ac <HAL_ADC_ConfigChannel+0x784>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d113      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x6fe>
 80021fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002202:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10d      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a23      	ldr	r2, [pc, #140]	@ (800229c <HAL_ADC_ConfigChannel+0x774>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d134      	bne.n	800227e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002214:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002218:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800221c:	4619      	mov	r1, r3
 800221e:	481e      	ldr	r0, [pc, #120]	@ (8002298 <HAL_ADC_ConfigChannel+0x770>)
 8002220:	f7ff f811 	bl	8001246 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002224:	e02b      	b.n	800227e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a21      	ldr	r2, [pc, #132]	@ (80022b0 <HAL_ADC_ConfigChannel+0x788>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d126      	bne.n	800227e <HAL_ADC_ConfigChannel+0x756>
 8002230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002234:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d120      	bne.n	800227e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a16      	ldr	r2, [pc, #88]	@ (800229c <HAL_ADC_ConfigChannel+0x774>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d11b      	bne.n	800227e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002246:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800224a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800224e:	4619      	mov	r1, r3
 8002250:	4811      	ldr	r0, [pc, #68]	@ (8002298 <HAL_ADC_ConfigChannel+0x770>)
 8002252:	f7fe fff8 	bl	8001246 <LL_ADC_SetCommonPathInternalCh>
 8002256:	e012      	b.n	800227e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800226a:	e008      	b.n	800227e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002270:	f043 0220 	orr.w	r2, r3, #32
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002286:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800228a:	4618      	mov	r0, r3
 800228c:	37d8      	adds	r7, #216	@ 0xd8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	80080000 	.word	0x80080000
 8002298:	50040300 	.word	0x50040300
 800229c:	50040000 	.word	0x50040000
 80022a0:	c7520000 	.word	0xc7520000
 80022a4:	20000008 	.word	0x20000008
 80022a8:	053e2d63 	.word	0x053e2d63
 80022ac:	cb840000 	.word	0xcb840000
 80022b0:	80000001 	.word	0x80000001

080022b4 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff f984 	bl	80015d8 <LL_ADC_REG_IsConversionOngoing>
 80022d0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f9a5 	bl	8001626 <LL_ADC_INJ_IsConversionOngoing>
 80022dc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d103      	bne.n	80022ec <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8098 	beq.w	800241c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d02a      	beq.n	8002350 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7e5b      	ldrb	r3, [r3, #25]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d126      	bne.n	8002350 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7e1b      	ldrb	r3, [r3, #24]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d122      	bne.n	8002350 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800230a:	2301      	movs	r3, #1
 800230c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800230e:	e014      	b.n	800233a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	4a45      	ldr	r2, [pc, #276]	@ (8002428 <ADC_ConversionStop+0x174>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d90d      	bls.n	8002334 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231c:	f043 0210 	orr.w	r2, r3, #16
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e074      	b.n	800241e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	3301      	adds	r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002344:	2b40      	cmp	r3, #64	@ 0x40
 8002346:	d1e3      	bne.n	8002310 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2240      	movs	r2, #64	@ 0x40
 800234e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d014      	beq.n	8002380 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff f93c 	bl	80015d8 <LL_ADC_REG_IsConversionOngoing>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00c      	beq.n	8002380 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff f8f9 	bl	8001562 <LL_ADC_IsDisableOngoing>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d104      	bne.n	8002380 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff f918 	bl	80015b0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d014      	beq.n	80023b0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff f94b 	bl	8001626 <LL_ADC_INJ_IsConversionOngoing>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00c      	beq.n	80023b0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f8e1 	bl	8001562 <LL_ADC_IsDisableOngoing>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f927 	bl	80015fe <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d005      	beq.n	80023c2 <ADC_ConversionStop+0x10e>
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d105      	bne.n	80023c8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80023bc:	230c      	movs	r3, #12
 80023be:	617b      	str	r3, [r7, #20]
        break;
 80023c0:	e005      	b.n	80023ce <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80023c2:	2308      	movs	r3, #8
 80023c4:	617b      	str	r3, [r7, #20]
        break;
 80023c6:	e002      	b.n	80023ce <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80023c8:	2304      	movs	r3, #4
 80023ca:	617b      	str	r3, [r7, #20]
        break;
 80023cc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80023ce:	f7fe fecb 	bl	8001168 <HAL_GetTick>
 80023d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023d4:	e01b      	b.n	800240e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80023d6:	f7fe fec7 	bl	8001168 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d914      	bls.n	800240e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00d      	beq.n	800240e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f6:	f043 0210 	orr.w	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002402:	f043 0201 	orr.w	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e007      	b.n	800241e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1dc      	bne.n	80023d6 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	a33fffff 	.word	0xa33fffff

0800242c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff f87d 	bl	800153c <LL_ADC_IsEnabled>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d15e      	bne.n	8002506 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	4b30      	ldr	r3, [pc, #192]	@ (8002510 <ADC_Enable+0xe4>)
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00d      	beq.n	8002472 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245a:	f043 0210 	orr.w	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002466:	f043 0201 	orr.w	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e04a      	b.n	8002508 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff f838 	bl	80014ec <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800247c:	4825      	ldr	r0, [pc, #148]	@ (8002514 <ADC_Enable+0xe8>)
 800247e:	f7fe fef5 	bl	800126c <LL_ADC_GetCommonPathInternalCh>
 8002482:	4603      	mov	r3, r0
 8002484:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00f      	beq.n	80024ac <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800248c:	4b22      	ldr	r3, [pc, #136]	@ (8002518 <ADC_Enable+0xec>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	099b      	lsrs	r3, r3, #6
 8002492:	4a22      	ldr	r2, [pc, #136]	@ (800251c <ADC_Enable+0xf0>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	099b      	lsrs	r3, r3, #6
 800249a:	3301      	adds	r3, #1
 800249c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800249e:	e002      	b.n	80024a6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f9      	bne.n	80024a0 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80024ac:	f7fe fe5c 	bl	8001168 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024b2:	e021      	b.n	80024f8 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff f83f 	bl	800153c <LL_ADC_IsEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d104      	bne.n	80024ce <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff f80f 	bl	80014ec <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ce:	f7fe fe4b 	bl	8001168 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d90d      	bls.n	80024f8 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e0:	f043 0210 	orr.w	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e007      	b.n	8002508 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d1d6      	bne.n	80024b4 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	8000003f 	.word	0x8000003f
 8002514:	50040300 	.word	0x50040300
 8002518:	20000008 	.word	0x20000008
 800251c:	053e2d63 	.word	0x053e2d63

08002520 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff f818 	bl	8001562 <LL_ADC_IsDisableOngoing>
 8002532:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe ffff 	bl	800153c <LL_ADC_IsEnabled>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d047      	beq.n	80025d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d144      	bne.n	80025d4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 030d 	and.w	r3, r3, #13
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10c      	bne.n	8002572 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe ffd9 	bl	8001514 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2203      	movs	r2, #3
 8002568:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800256a:	f7fe fdfd 	bl	8001168 <HAL_GetTick>
 800256e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002570:	e029      	b.n	80025c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002576:	f043 0210 	orr.w	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e023      	b.n	80025d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800258e:	f7fe fdeb 	bl	8001168 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d914      	bls.n	80025c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ae:	f043 0210 	orr.w	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e007      	b.n	80025d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1dc      	bne.n	800258e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	@ (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	@ (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	@ (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	@ (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	@ 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	@ 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	@ (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f7ff ff8e 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	@ (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	@ (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff29 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027a4:	f7ff ff40 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80027a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7ff ff90 	bl	80026d4 <NVIC_EncodePriority>
 80027b4:	4602      	mov	r2, r0
 80027b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff5f 	bl	8002680 <__NVIC_SetPriority>
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff33 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ffa4 	bl	800273c <SysTick_Config>
 80027f4:	4603      	mov	r3, r0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280e:	e14c      	b.n	8002aaa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 813e 	beq.w	8002aa4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d005      	beq.n	8002840 <HAL_GPIO_Init+0x40>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d130      	bne.n	80028a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	2203      	movs	r2, #3
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002876:	2201      	movs	r2, #1
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	f003 0201 	and.w	r2, r3, #1
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d017      	beq.n	80028de <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d123      	bne.n	8002932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	08da      	lsrs	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3208      	adds	r2, #8
 80028f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	220f      	movs	r2, #15
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	08da      	lsrs	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3208      	adds	r2, #8
 800292c:	6939      	ldr	r1, [r7, #16]
 800292e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0203 	and.w	r2, r3, #3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8098 	beq.w	8002aa4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002974:	4a54      	ldr	r2, [pc, #336]	@ (8002ac8 <HAL_GPIO_Init+0x2c8>)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	089b      	lsrs	r3, r3, #2
 800297a:	3302      	adds	r3, #2
 800297c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	220f      	movs	r2, #15
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800299e:	d019      	beq.n	80029d4 <HAL_GPIO_Init+0x1d4>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a4a      	ldr	r2, [pc, #296]	@ (8002acc <HAL_GPIO_Init+0x2cc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d013      	beq.n	80029d0 <HAL_GPIO_Init+0x1d0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a49      	ldr	r2, [pc, #292]	@ (8002ad0 <HAL_GPIO_Init+0x2d0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00d      	beq.n	80029cc <HAL_GPIO_Init+0x1cc>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a48      	ldr	r2, [pc, #288]	@ (8002ad4 <HAL_GPIO_Init+0x2d4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d007      	beq.n	80029c8 <HAL_GPIO_Init+0x1c8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a47      	ldr	r2, [pc, #284]	@ (8002ad8 <HAL_GPIO_Init+0x2d8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_GPIO_Init+0x1c4>
 80029c0:	2304      	movs	r3, #4
 80029c2:	e008      	b.n	80029d6 <HAL_GPIO_Init+0x1d6>
 80029c4:	2307      	movs	r3, #7
 80029c6:	e006      	b.n	80029d6 <HAL_GPIO_Init+0x1d6>
 80029c8:	2303      	movs	r3, #3
 80029ca:	e004      	b.n	80029d6 <HAL_GPIO_Init+0x1d6>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e002      	b.n	80029d6 <HAL_GPIO_Init+0x1d6>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <HAL_GPIO_Init+0x1d6>
 80029d4:	2300      	movs	r3, #0
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	f002 0203 	and.w	r2, r2, #3
 80029dc:	0092      	lsls	r2, r2, #2
 80029de:	4093      	lsls	r3, r2
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029e6:	4938      	ldr	r1, [pc, #224]	@ (8002ac8 <HAL_GPIO_Init+0x2c8>)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	3302      	adds	r3, #2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029f4:	4b39      	ldr	r3, [pc, #228]	@ (8002adc <HAL_GPIO_Init+0x2dc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a18:	4a30      	ldr	r2, [pc, #192]	@ (8002adc <HAL_GPIO_Init+0x2dc>)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002adc <HAL_GPIO_Init+0x2dc>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a42:	4a26      	ldr	r2, [pc, #152]	@ (8002adc <HAL_GPIO_Init+0x2dc>)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a48:	4b24      	ldr	r3, [pc, #144]	@ (8002adc <HAL_GPIO_Init+0x2dc>)
 8002a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4013      	ands	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8002adc <HAL_GPIO_Init+0x2dc>)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002a76:	4b19      	ldr	r3, [pc, #100]	@ (8002adc <HAL_GPIO_Init+0x2dc>)
 8002a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8002adc <HAL_GPIO_Init+0x2dc>)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f47f aeab 	bne.w	8002810 <HAL_GPIO_Init+0x10>
  }
}
 8002aba:	bf00      	nop
 8002abc:	bf00      	nop
 8002abe:	371c      	adds	r7, #28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	48000400 	.word	0x48000400
 8002ad0:	48000800 	.word	0x48000800
 8002ad4:	48000c00 	.word	0x48000c00
 8002ad8:	48001000 	.word	0x48001000
 8002adc:	58000800 	.word	0x58000800

08002ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
 8002aec:	4613      	mov	r3, r2
 8002aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002af0:	787b      	ldrb	r3, [r7, #1]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002afc:	e002      	b.n	8002b04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002afe:	887a      	ldrh	r2, [r7, #2]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4013      	ands	r3, r2
 8002b28:	041a      	lsls	r2, r3, #16
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	43d9      	mvns	r1, r3
 8002b2e:	887b      	ldrh	r3, [r7, #2]
 8002b30:	400b      	ands	r3, r1
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	619a      	str	r2, [r3, #24]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b4e:	4b08      	ldr	r3, [pc, #32]	@ (8002b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b5a:	4a05      	ldr	r2, [pc, #20]	@ (8002b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fcf6 	bl	8000554 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	58000800 	.word	0x58000800

08002b74 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b78:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a04      	ldr	r2, [pc, #16]	@ (8002b90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b82:	6013      	str	r3, [r2, #0]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	58000400 	.word	0x58000400

08002b94 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if (Regulator == PWR_LOWPOWERREGULATOR_ON)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ba6:	d104      	bne.n	8002bb2 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f842 	bl	8002c34 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8002bb0:	e003      	b.n	8002bba <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 f813 	bl	8002be0 <HAL_PWREx_EnterSTOP0Mode>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002bc8:	4b04      	ldr	r3, [pc, #16]	@ (8002bdc <HAL_PWREx_GetVoltageRange+0x18>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	58000400 	.word	0x58000400

08002be0 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8002bea:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a0f      	ldr	r2, [pc, #60]	@ (8002c2c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002bf0:	f023 0307 	bic.w	r3, r3, #7
 8002bf4:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c30 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	4a0d      	ldr	r2, [pc, #52]	@ (8002c30 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002c08:	bf30      	wfi
 8002c0a:	e002      	b.n	8002c12 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002c0c:	bf40      	sev
    __WFE();
 8002c0e:	bf20      	wfe
    __WFE();
 8002c10:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002c12:	4b07      	ldr	r3, [pc, #28]	@ (8002c30 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	4a06      	ldr	r2, [pc, #24]	@ (8002c30 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002c18:	f023 0304 	bic.w	r3, r3, #4
 8002c1c:	6113      	str	r3, [r2, #16]
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	58000400 	.word	0x58000400
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8002c3e:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 0307 	bic.w	r3, r3, #7
 8002c46:	4a0f      	ldr	r2, [pc, #60]	@ (8002c84 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c88 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	4a0d      	ldr	r2, [pc, #52]	@ (8002c88 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002c60:	bf30      	wfi
 8002c62:	e002      	b.n	8002c6a <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002c64:	bf40      	sev
    __WFE();
 8002c66:	bf20      	wfe
    __WFE();
 8002c68:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002c6a:	4b07      	ldr	r3, [pc, #28]	@ (8002c88 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	4a06      	ldr	r2, [pc, #24]	@ (8002c88 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002c70:	f023 0304 	bic.w	r3, r3, #4
 8002c74:	6113      	str	r3, [r2, #16]
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	58000400 	.word	0x58000400
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c9e:	d101      	bne.n	8002ca4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_RCC_HSE_Enable>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <LL_RCC_HSE_Disable>:
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <LL_RCC_HSE_IsReady>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002cfe:	d101      	bne.n	8002d04 <LL_RCC_HSE_IsReady+0x18>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <LL_RCC_HSE_IsReady+0x1a>
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_RCC_HSI_Enable>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d22:	6013      	str	r3, [r2, #0]
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_HSI_Disable>:
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d40:	6013      	str	r3, [r2, #0]
}
 8002d42:	bf00      	nop
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_RCC_HSI_IsReady>:
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d5e:	d101      	bne.n	8002d64 <LL_RCC_HSI_IsReady+0x18>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <LL_RCC_HSI_IsReady+0x1a>
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	061b      	lsls	r3, r3, #24
 8002d86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <LL_RCC_HSI48_Enable>:
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002da6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_RCC_HSI48_Disable>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_RCC_HSI48_IsReady>:
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d101      	bne.n	8002df6 <LL_RCC_HSI48_IsReady+0x18>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <LL_RCC_HSI48_IsReady+0x1a>
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_RCC_LSE_Enable>:
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_RCC_LSE_Disable>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e34:	f023 0301 	bic.w	r3, r3, #1
 8002e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_RCC_LSE_EnableBypass>:
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e56:	f043 0304 	orr.w	r3, r3, #4
 8002e5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_RCC_LSE_DisableBypass>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e78:	f023 0304 	bic.w	r3, r3, #4
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_RCC_LSE_IsReady>:
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d101      	bne.n	8002ea2 <LL_RCC_LSE_IsReady+0x18>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <LL_RCC_LSE_IsReady+0x1a>
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_RCC_LSI1_Enable>:
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002ec6:	bf00      	nop
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_RCC_LSI1_Disable>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002edc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <LL_RCC_LSI1_IsReady>:
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d101      	bne.n	8002f0a <LL_RCC_LSI1_IsReady+0x18>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <LL_RCC_LSI1_IsReady+0x1a>
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_RCC_LSI2_Enable>:
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f26:	f043 0304 	orr.w	r3, r3, #4
 8002f2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_RCC_LSI2_Disable>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <LL_RCC_LSI2_IsReady>:
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d101      	bne.n	8002f72 <LL_RCC_LSI2_IsReady+0x18>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <LL_RCC_LSI2_IsReady+0x1a>
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <LL_RCC_LSI2_SetTrimming>:
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_RCC_MSI_Enable>:
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_RCC_MSI_Disable>:
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	6013      	str	r3, [r2, #0]
}
 8002fde:	bf00      	nop
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_RCC_MSI_IsReady>:
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d101      	bne.n	8002ffe <LL_RCC_MSI_IsReady+0x16>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <LL_RCC_MSI_IsReady+0x18>
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <LL_RCC_MSI_SetRange>:
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800301c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <LL_RCC_MSI_GetRange>:
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003042:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2bb0      	cmp	r3, #176	@ 0xb0
 8003048:	d901      	bls.n	800304e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800304a:	23b0      	movs	r3, #176	@ 0xb0
 800304c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800304e:	687b      	ldr	r3, [r7, #4]
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_RCC_MSI_SetCalibTrimming>:
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <LL_RCC_SetSysClkSource>:
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800308e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 0203 	bic.w	r2, r3, #3
 8003098:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <LL_RCC_GetSysClkSource>:
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 030c 	and.w	r3, r3, #12
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <LL_RCC_SetAHBPrescaler>:
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80030ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_C2_RCC_SetAHBPrescaler>:
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80030f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80030fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003102:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <LL_RCC_SetAHB4Prescaler>:
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003126:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800312a:	f023 020f 	bic.w	r2, r3, #15
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_RCC_SetAPB1Prescaler>:
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800315a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_RCC_SetAPB2Prescaler>:
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003182:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4313      	orrs	r3, r2
 800318a:	608b      	str	r3, [r1, #8]
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_RCC_GetAHBPrescaler>:
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800319c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_RCC_GetAHB4Prescaler>:
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80031b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_RCC_GetAPB1Prescaler>:
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_RCC_GetAPB2Prescaler>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80031e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800320a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800320e:	6013      	str	r3, [r2, #0]
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800321a:	b480      	push	{r7}
 800321c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800321e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003228:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800322c:	6013      	str	r3, [r2, #0]
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800323c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800324a:	d101      	bne.n	8003250 <LL_RCC_PLL_IsReady+0x18>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <LL_RCC_PLL_IsReady+0x1a>
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800327a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80032aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0303 	and.w	r3, r3, #3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d0:	d101      	bne.n	80032d6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80032e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80032ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032f6:	d101      	bne.n	80032fc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800330c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003310:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800331c:	d101      	bne.n	8003322 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003340:	d101      	bne.n	8003346 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003352:	b480      	push	{r7}
 8003354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003360:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003364:	d101      	bne.n	800336a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b08d      	sub	sp, #52	@ 0x34
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e363      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 808d 	beq.w	80034b2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003398:	f7ff fe89 	bl	80030ae <LL_RCC_GetSysClkSource>
 800339c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800339e:	f7ff ff82 	bl	80032a6 <LL_RCC_PLL_GetMainSource>
 80033a2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_RCC_OscConfig+0x3e>
 80033aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ac:	2b0c      	cmp	r3, #12
 80033ae:	d147      	bne.n	8003440 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80033b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d144      	bne.n	8003440 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e347      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80033c6:	f7ff fe34 	bl	8003032 <LL_RCC_MSI_GetRange>
 80033ca:	4603      	mov	r3, r0
 80033cc:	429c      	cmp	r4, r3
 80033ce:	d914      	bls.n	80033fa <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fd2f 	bl	8003e38 <RCC_SetFlashLatencyFromMSIRange>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e336      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fe0e 	bl	800300a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fe32 	bl	800305c <LL_RCC_MSI_SetCalibTrimming>
 80033f8:	e013      	b.n	8003422 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fe03 	bl	800300a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fe27 	bl	800305c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fd10 	bl	8003e38 <RCC_SetFlashLatencyFromMSIRange>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e317      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003422:	f000 fcc9 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003426:	4603      	mov	r3, r0
 8003428:	4aa4      	ldr	r2, [pc, #656]	@ (80036bc <HAL_RCC_OscConfig+0x344>)
 800342a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800342c:	4ba4      	ldr	r3, [pc, #656]	@ (80036c0 <HAL_RCC_OscConfig+0x348>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd fe4b 	bl	80010cc <HAL_InitTick>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d039      	beq.n	80034b0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e308      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01e      	beq.n	8003486 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003448:	f7ff fdb0 	bl	8002fac <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800344c:	f7fd fe8c 	bl	8001168 <HAL_GetTick>
 8003450:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003454:	f7fd fe88 	bl	8001168 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e2f5      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003466:	f7ff fdbf 	bl	8002fe8 <LL_RCC_MSI_IsReady>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f1      	beq.n	8003454 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fdc8 	bl	800300a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fdec 	bl	800305c <LL_RCC_MSI_SetCalibTrimming>
 8003484:	e015      	b.n	80034b2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003486:	f7ff fda0 	bl	8002fca <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800348a:	f7fd fe6d 	bl	8001168 <HAL_GetTick>
 800348e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003492:	f7fd fe69 	bl	8001168 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e2d6      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80034a4:	f7ff fda0 	bl	8002fe8 <LL_RCC_MSI_IsReady>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f1      	bne.n	8003492 <HAL_RCC_OscConfig+0x11a>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80034b0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d047      	beq.n	800354e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034be:	f7ff fdf6 	bl	80030ae <LL_RCC_GetSysClkSource>
 80034c2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034c4:	f7ff feef 	bl	80032a6 <LL_RCC_PLL_GetMainSource>
 80034c8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_OscConfig+0x164>
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	2b0c      	cmp	r3, #12
 80034d4:	d108      	bne.n	80034e8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d105      	bne.n	80034e8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d134      	bne.n	800354e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e2b4      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034f0:	d102      	bne.n	80034f8 <HAL_RCC_OscConfig+0x180>
 80034f2:	f7ff fbdd 	bl	8002cb0 <LL_RCC_HSE_Enable>
 80034f6:	e001      	b.n	80034fc <HAL_RCC_OscConfig+0x184>
 80034f8:	f7ff fbe9 	bl	8002cce <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d012      	beq.n	800352a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fd fe30 	bl	8001168 <HAL_GetTick>
 8003508:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800350c:	f7fd fe2c 	bl	8001168 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	@ 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e299      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800351e:	f7ff fbe5 	bl	8002cec <LL_RCC_HSE_IsReady>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f1      	beq.n	800350c <HAL_RCC_OscConfig+0x194>
 8003528:	e011      	b.n	800354e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fd fe1d 	bl	8001168 <HAL_GetTick>
 800352e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003532:	f7fd fe19 	bl	8001168 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b64      	cmp	r3, #100	@ 0x64
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e286      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003544:	f7ff fbd2 	bl	8002cec <LL_RCC_HSE_IsReady>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f1      	bne.n	8003532 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d04c      	beq.n	80035f4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355a:	f7ff fda8 	bl	80030ae <LL_RCC_GetSysClkSource>
 800355e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003560:	f7ff fea1 	bl	80032a6 <LL_RCC_PLL_GetMainSource>
 8003564:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d005      	beq.n	8003578 <HAL_RCC_OscConfig+0x200>
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d10e      	bne.n	8003590 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d10b      	bne.n	8003590 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e266      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fbf1 	bl	8002d70 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800358e:	e031      	b.n	80035f4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d019      	beq.n	80035cc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003598:	f7ff fbba 	bl	8002d10 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fd fde4 	bl	8001168 <HAL_GetTick>
 80035a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a4:	f7fd fde0 	bl	8001168 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e24d      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80035b6:	f7ff fbc9 	bl	8002d4c <LL_RCC_HSI_IsReady>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f1      	beq.n	80035a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fbd3 	bl	8002d70 <LL_RCC_HSI_SetCalibTrimming>
 80035ca:	e013      	b.n	80035f4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035cc:	f7ff fbaf 	bl	8002d2e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fd fdca 	bl	8001168 <HAL_GetTick>
 80035d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d8:	f7fd fdc6 	bl	8001168 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e233      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80035ea:	f7ff fbaf 	bl	8002d4c <LL_RCC_HSI_IsReady>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f1      	bne.n	80035d8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80a3 	beq.w	8003754 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d076      	beq.n	8003704 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d046      	beq.n	80036b0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003622:	f7ff fc66 	bl	8002ef2 <LL_RCC_LSI1_IsReady>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d113      	bne.n	8003654 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800362c:	f7ff fc3f 	bl	8002eae <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003630:	f7fd fd9a 	bl	8001168 <HAL_GetTick>
 8003634:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003638:	f7fd fd96 	bl	8001168 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e203      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800364a:	f7ff fc52 	bl	8002ef2 <LL_RCC_LSI1_IsReady>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f1      	beq.n	8003638 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003654:	f7ff fc5f 	bl	8002f16 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd fd86 	bl	8001168 <HAL_GetTick>
 800365c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003660:	f7fd fd82 	bl	8001168 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b03      	cmp	r3, #3
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e1ef      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003672:	f7ff fc72 	bl	8002f5a <LL_RCC_LSI2_IsReady>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f1      	beq.n	8003660 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff fc7c 	bl	8002f7e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003686:	f7ff fc23 	bl	8002ed0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fd fd6d 	bl	8001168 <HAL_GetTick>
 800368e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003692:	f7fd fd69 	bl	8001168 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e1d6      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80036a4:	f7ff fc25 	bl	8002ef2 <LL_RCC_LSI1_IsReady>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f1      	bne.n	8003692 <HAL_RCC_OscConfig+0x31a>
 80036ae:	e051      	b.n	8003754 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80036b0:	f7ff fbfd 	bl	8002eae <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fd fd58 	bl	8001168 <HAL_GetTick>
 80036b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80036ba:	e00c      	b.n	80036d6 <HAL_RCC_OscConfig+0x35e>
 80036bc:	20000008 	.word	0x20000008
 80036c0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036c4:	f7fd fd50 	bl	8001168 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e1bd      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80036d6:	f7ff fc0c 	bl	8002ef2 <LL_RCC_LSI1_IsReady>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f1      	beq.n	80036c4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80036e0:	f7ff fc2a 	bl	8002f38 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036e6:	f7fd fd3f 	bl	8001168 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e1ac      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80036f8:	f7ff fc2f 	bl	8002f5a <LL_RCC_LSI2_IsReady>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f1      	bne.n	80036e6 <HAL_RCC_OscConfig+0x36e>
 8003702:	e027      	b.n	8003754 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003704:	f7ff fc18 	bl	8002f38 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003708:	f7fd fd2e 	bl	8001168 <HAL_GetTick>
 800370c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003710:	f7fd fd2a 	bl	8001168 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b03      	cmp	r3, #3
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e197      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003722:	f7ff fc1a 	bl	8002f5a <LL_RCC_LSI2_IsReady>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f1      	bne.n	8003710 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800372c:	f7ff fbd0 	bl	8002ed0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7fd fd1a 	bl	8001168 <HAL_GetTick>
 8003734:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003738:	f7fd fd16 	bl	8001168 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e183      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800374a:	f7ff fbd2 	bl	8002ef2 <LL_RCC_LSI1_IsReady>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f1      	bne.n	8003738 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d05b      	beq.n	8003818 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003760:	4ba7      	ldr	r3, [pc, #668]	@ (8003a00 <HAL_RCC_OscConfig+0x688>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d114      	bne.n	8003796 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800376c:	f7ff fa02 	bl	8002b74 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003770:	f7fd fcfa 	bl	8001168 <HAL_GetTick>
 8003774:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003778:	f7fd fcf6 	bl	8001168 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e163      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378a:	4b9d      	ldr	r3, [pc, #628]	@ (8003a00 <HAL_RCC_OscConfig+0x688>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d102      	bne.n	80037a4 <HAL_RCC_OscConfig+0x42c>
 800379e:	f7ff fb30 	bl	8002e02 <LL_RCC_LSE_Enable>
 80037a2:	e00c      	b.n	80037be <HAL_RCC_OscConfig+0x446>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b05      	cmp	r3, #5
 80037aa:	d104      	bne.n	80037b6 <HAL_RCC_OscConfig+0x43e>
 80037ac:	f7ff fb4b 	bl	8002e46 <LL_RCC_LSE_EnableBypass>
 80037b0:	f7ff fb27 	bl	8002e02 <LL_RCC_LSE_Enable>
 80037b4:	e003      	b.n	80037be <HAL_RCC_OscConfig+0x446>
 80037b6:	f7ff fb35 	bl	8002e24 <LL_RCC_LSE_Disable>
 80037ba:	f7ff fb55 	bl	8002e68 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d014      	beq.n	80037f0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c6:	f7fd fccf 	bl	8001168 <HAL_GetTick>
 80037ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80037cc:	e00a      	b.n	80037e4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fd fccb 	bl	8001168 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037dc:	4293      	cmp	r3, r2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e136      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80037e4:	f7ff fb51 	bl	8002e8a <LL_RCC_LSE_IsReady>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0ef      	beq.n	80037ce <HAL_RCC_OscConfig+0x456>
 80037ee:	e013      	b.n	8003818 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7fd fcba 	bl	8001168 <HAL_GetTick>
 80037f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80037f6:	e00a      	b.n	800380e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f8:	f7fd fcb6 	bl	8001168 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e121      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800380e:	f7ff fb3c 	bl	8002e8a <LL_RCC_LSE_IsReady>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1ef      	bne.n	80037f8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003820:	2b00      	cmp	r3, #0
 8003822:	d02c      	beq.n	800387e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	2b00      	cmp	r3, #0
 800382a:	d014      	beq.n	8003856 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800382c:	f7ff fab5 	bl	8002d9a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fd fc9a 	bl	8001168 <HAL_GetTick>
 8003834:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003838:	f7fd fc96 	bl	8001168 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e103      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800384a:	f7ff fac8 	bl	8002dde <LL_RCC_HSI48_IsReady>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f1      	beq.n	8003838 <HAL_RCC_OscConfig+0x4c0>
 8003854:	e013      	b.n	800387e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003856:	f7ff fab1 	bl	8002dbc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385a:	f7fd fc85 	bl	8001168 <HAL_GetTick>
 800385e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003862:	f7fd fc81 	bl	8001168 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e0ee      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003874:	f7ff fab3 	bl	8002dde <LL_RCC_HSI48_IsReady>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f1      	bne.n	8003862 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80e4 	beq.w	8003a50 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003888:	f7ff fc11 	bl	80030ae <LL_RCC_GetSysClkSource>
 800388c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800388e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389a:	2b02      	cmp	r3, #2
 800389c:	f040 80b4 	bne.w	8003a08 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0203 	and.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d123      	bne.n	80038f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d11c      	bne.n	80038f6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d114      	bne.n	80038f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d10d      	bne.n	80038f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d106      	bne.n	80038f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d05d      	beq.n	80039b2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	d058      	beq.n	80039ae <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e0a1      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800390e:	f7ff fc84 	bl	800321a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003912:	f7fd fc29 	bl	8001168 <HAL_GetTick>
 8003916:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391a:	f7fd fc25 	bl	8001168 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e092      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1ef      	bne.n	800391a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	4b30      	ldr	r3, [pc, #192]	@ (8003a04 <HAL_RCC_OscConfig+0x68c>)
 8003942:	4013      	ands	r3, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800394c:	4311      	orrs	r1, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003952:	0212      	lsls	r2, r2, #8
 8003954:	4311      	orrs	r1, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800395a:	4311      	orrs	r1, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003960:	4311      	orrs	r1, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003966:	430a      	orrs	r2, r1
 8003968:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800396c:	4313      	orrs	r3, r2
 800396e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003970:	f7ff fc44 	bl	80031fc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800397e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003982:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003984:	f7fd fbf0 	bl	8001168 <HAL_GetTick>
 8003988:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398c:	f7fd fbec 	bl	8001168 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e059      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800399e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ef      	beq.n	800398c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039ac:	e050      	b.n	8003a50 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e04f      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d147      	bne.n	8003a50 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039c0:	f7ff fc1c 	bl	80031fc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039d4:	f7fd fbc8 	bl	8001168 <HAL_GetTick>
 80039d8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fd fbc4 	bl	8001168 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e031      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0ef      	beq.n	80039dc <HAL_RCC_OscConfig+0x664>
 80039fc:	e028      	b.n	8003a50 <HAL_RCC_OscConfig+0x6d8>
 80039fe:	bf00      	nop
 8003a00:	58000400 	.word	0x58000400
 8003a04:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	2b0c      	cmp	r3, #12
 8003a0c:	d01e      	beq.n	8003a4c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0e:	f7ff fc04 	bl	800321a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a12:	f7fd fba9 	bl	8001168 <HAL_GetTick>
 8003a16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1a:	f7fd fba5 	bl	8001168 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e012      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1ef      	bne.n	8003a1a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a44:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <HAL_RCC_OscConfig+0x6e4>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	60cb      	str	r3, [r1, #12]
 8003a4a:	e001      	b.n	8003a50 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3734      	adds	r7, #52	@ 0x34
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd90      	pop	{r4, r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	eefefffc 	.word	0xeefefffc

08003a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e12d      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a74:	4b98      	ldr	r3, [pc, #608]	@ (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d91b      	bls.n	8003aba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b95      	ldr	r3, [pc, #596]	@ (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 0207 	bic.w	r2, r3, #7
 8003a8a:	4993      	ldr	r1, [pc, #588]	@ (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a92:	f7fd fb69 	bl	8001168 <HAL_GetTick>
 8003a96:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a9a:	f7fd fb65 	bl	8001168 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e111      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aac:	4b8a      	ldr	r3, [pc, #552]	@ (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d1ef      	bne.n	8003a9a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d016      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fafb 	bl	80030c6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ad0:	f7fd fb4a 	bl	8001168 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ad8:	f7fd fb46 	bl	8001168 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e0f2      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003aea:	f7ff fbe8 	bl	80032be <LL_RCC_IsActiveFlag_HPRE>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f1      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d016      	beq.n	8003b2e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff faf2 	bl	80030ee <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b0a:	f7fd fb2d 	bl	8001168 <HAL_GetTick>
 8003b0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b12:	f7fd fb29 	bl	8001168 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e0d5      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b24:	f7ff fbdd 	bl	80032e2 <LL_RCC_IsActiveFlag_C2HPRE>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f1      	beq.n	8003b12 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d016      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff faeb 	bl	800311a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b44:	f7fd fb10 	bl	8001168 <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b4c:	f7fd fb0c 	bl	8001168 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e0b8      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b5e:	f7ff fbd3 	bl	8003308 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f1      	beq.n	8003b4c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d016      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fae5 	bl	8003148 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b7e:	f7fd faf3 	bl	8001168 <HAL_GetTick>
 8003b82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b86:	f7fd faef 	bl	8001168 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e09b      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b98:	f7ff fbc9 	bl	800332e <LL_RCC_IsActiveFlag_PPRE1>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f1      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d017      	beq.n	8003bde <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fadb 	bl	8003170 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bba:	f7fd fad5 	bl	8001168 <HAL_GetTick>
 8003bbe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bc2:	f7fd fad1 	bl	8001168 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e07d      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003bd4:	f7ff fbbd 	bl	8003352 <LL_RCC_IsActiveFlag_PPRE2>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f1      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d043      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d106      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003bf2:	f7ff f87b 	bl	8002cec <LL_RCC_HSE_IsReady>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d11e      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e067      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003c08:	f7ff fb16 	bl	8003238 <LL_RCC_PLL_IsReady>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d113      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e05c      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003c1e:	f7ff f9e3 	bl	8002fe8 <LL_RCC_MSI_IsReady>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d108      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e051      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003c2c:	f7ff f88e 	bl	8002d4c <LL_RCC_HSI_IsReady>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e04a      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fa21 	bl	8003086 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c44:	f7fd fa90 	bl	8001168 <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4c:	f7fd fa8c 	bl	8001168 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e036      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	f7ff fa24 	bl	80030ae <LL_RCC_GetSysClkSource>
 8003c66:	4602      	mov	r2, r0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d1ec      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c72:	4b19      	ldr	r3, [pc, #100]	@ (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d21b      	bcs.n	8003cb8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c80:	4b15      	ldr	r3, [pc, #84]	@ (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f023 0207 	bic.w	r2, r3, #7
 8003c88:	4913      	ldr	r1, [pc, #76]	@ (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c90:	f7fd fa6a 	bl	8001168 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c98:	f7fd fa66 	bl	8001168 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e012      	b.n	8003cd0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d1ef      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003cb8:	f000 f87e 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4a07      	ldr	r2, [pc, #28]	@ (8003cdc <HAL_RCC_ClockConfig+0x27c>)
 8003cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003cc2:	f7fd fa5d 	bl	8001180 <HAL_GetTickPrio>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fd f9ff 	bl	80010cc <HAL_InitTick>
 8003cce:	4603      	mov	r3, r0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	58004000 	.word	0x58004000
 8003cdc:	20000008 	.word	0x20000008

08003ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce0:	b590      	push	{r4, r7, lr}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ce6:	f7ff f9e2 	bl	80030ae <LL_RCC_GetSysClkSource>
 8003cea:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003cf2:	f7ff f99e 	bl	8003032 <LL_RCC_MSI_GetRange>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	e04b      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d102      	bne.n	8003d14 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d0e:	4b28      	ldr	r3, [pc, #160]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	e045      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d10a      	bne.n	8003d30 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d1a:	f7fe ffb7 	bl	8002c8c <LL_RCC_HSE_IsEnabledDiv2>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d102      	bne.n	8003d2a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003d24:	4b22      	ldr	r3, [pc, #136]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	e03a      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003d2a:	4b22      	ldr	r3, [pc, #136]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	e037      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003d30:	f7ff fab9 	bl	80032a6 <LL_RCC_PLL_GetMainSource>
 8003d34:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d003      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x64>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x6a>
 8003d42:	e00d      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003d44:	4b1a      	ldr	r3, [pc, #104]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d46:	60bb      	str	r3, [r7, #8]
        break;
 8003d48:	e015      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d4a:	f7fe ff9f 	bl	8002c8c <LL_RCC_HSE_IsEnabledDiv2>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d102      	bne.n	8003d5a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003d54:	4b16      	ldr	r3, [pc, #88]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d56:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003d58:	e00d      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003d5a:	4b16      	ldr	r3, [pc, #88]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d5c:	60bb      	str	r3, [r7, #8]
        break;
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d60:	f7ff f967 	bl	8003032 <LL_RCC_MSI_GetRange>
 8003d64:	4603      	mov	r3, r0
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	4a0f      	ldr	r2, [pc, #60]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d72:	60bb      	str	r3, [r7, #8]
        break;
 8003d74:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003d76:	f7ff fa71 	bl	800325c <LL_RCC_PLL_GetN>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	fb03 f402 	mul.w	r4, r3, r2
 8003d82:	f7ff fa84 	bl	800328e <LL_RCC_PLL_GetDivider>
 8003d86:	4603      	mov	r3, r0
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003d90:	f7ff fa71 	bl	8003276 <LL_RCC_PLL_GetR>
 8003d94:	4603      	mov	r3, r0
 8003d96:	0f5b      	lsrs	r3, r3, #29
 8003d98:	3301      	adds	r3, #1
 8003d9a:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d9e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003da0:	68fb      	ldr	r3, [r7, #12]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd90      	pop	{r4, r7, pc}
 8003daa:	bf00      	nop
 8003dac:	080062a8 	.word	0x080062a8
 8003db0:	00f42400 	.word	0x00f42400
 8003db4:	01e84800 	.word	0x01e84800

08003db8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db8:	b598      	push	{r3, r4, r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003dbc:	f7ff ff90 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	f7ff f9e9 	bl	8003198 <LL_RCC_GetAHBPrescaler>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	4a03      	ldr	r2, [pc, #12]	@ (8003ddc <HAL_RCC_GetHCLKFreq+0x24>)
 8003dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd98      	pop	{r3, r4, r7, pc}
 8003ddc:	08006248 	.word	0x08006248

08003de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de0:	b598      	push	{r3, r4, r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003de4:	f7ff ffe8 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003de8:	4604      	mov	r4, r0
 8003dea:	f7ff f9ef 	bl	80031cc <LL_RCC_GetAPB1Prescaler>
 8003dee:	4603      	mov	r3, r0
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	4a04      	ldr	r2, [pc, #16]	@ (8003e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd98      	pop	{r3, r4, r7, pc}
 8003e08:	08006288 	.word	0x08006288

08003e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e0c:	b598      	push	{r3, r4, r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003e10:	f7ff ffd2 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003e14:	4604      	mov	r4, r0
 8003e16:	f7ff f9e5 	bl	80031e4 <LL_RCC_GetAPB2Prescaler>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	0adb      	lsrs	r3, r3, #11
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	4a04      	ldr	r2, [pc, #16]	@ (8003e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd98      	pop	{r3, r4, r7, pc}
 8003e34:	08006288 	.word	0x08006288

08003e38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003e38:	b590      	push	{r4, r7, lr}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2bb0      	cmp	r3, #176	@ 0xb0
 8003e44:	d903      	bls.n	8003e4e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003e46:	4b15      	ldr	r3, [pc, #84]	@ (8003e9c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	e007      	b.n	8003e5e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	4a11      	ldr	r2, [pc, #68]	@ (8003e9c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003e5e:	f7ff f9a7 	bl	80031b0 <LL_RCC_GetAHB4Prescaler>
 8003e62:	4603      	mov	r3, r0
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	0c9c      	lsrs	r4, r3, #18
 8003e82:	f7fe fe9f 	bl	8002bc4 <HAL_PWREx_GetVoltageRange>
 8003e86:	4603      	mov	r3, r0
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f000 f80c 	bl	8003ea8 <RCC_SetFlashLatency>
 8003e90:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd90      	pop	{r4, r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	080062a8 	.word	0x080062a8
 8003ea0:	08006248 	.word	0x08006248
 8003ea4:	431bde83 	.word	0x431bde83

08003ea8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003ea8:	b590      	push	{r4, r7, lr}
 8003eaa:	b093      	sub	sp, #76	@ 0x4c
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003eb2:	4b37      	ldr	r3, [pc, #220]	@ (8003f90 <RCC_SetFlashLatency+0xe8>)
 8003eb4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003eb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003eba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003ebe:	4a35      	ldr	r2, [pc, #212]	@ (8003f94 <RCC_SetFlashLatency+0xec>)
 8003ec0:	f107 031c 	add.w	r3, r7, #28
 8003ec4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ec6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003eca:	4b33      	ldr	r3, [pc, #204]	@ (8003f98 <RCC_SetFlashLatency+0xf0>)
 8003ecc:	f107 040c 	add.w	r4, r7, #12
 8003ed0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ed2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ee0:	d11a      	bne.n	8003f18 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ee6:	e013      	b.n	8003f10 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003ee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	3348      	adds	r3, #72	@ 0x48
 8003eee:	443b      	add	r3, r7
 8003ef0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d807      	bhi.n	8003f0a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	3348      	adds	r3, #72	@ 0x48
 8003f00:	443b      	add	r3, r7
 8003f02:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003f06:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003f08:	e020      	b.n	8003f4c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d9e8      	bls.n	8003ee8 <RCC_SetFlashLatency+0x40>
 8003f16:	e019      	b.n	8003f4c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f1c:	e013      	b.n	8003f46 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	3348      	adds	r3, #72	@ 0x48
 8003f24:	443b      	add	r3, r7
 8003f26:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d807      	bhi.n	8003f40 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	3348      	adds	r3, #72	@ 0x48
 8003f36:	443b      	add	r3, r7
 8003f38:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003f3c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003f3e:	e005      	b.n	8003f4c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f42:	3301      	adds	r3, #1
 8003f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d9e8      	bls.n	8003f1e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003f4c:	4b13      	ldr	r3, [pc, #76]	@ (8003f9c <RCC_SetFlashLatency+0xf4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 0207 	bic.w	r2, r3, #7
 8003f54:	4911      	ldr	r1, [pc, #68]	@ (8003f9c <RCC_SetFlashLatency+0xf4>)
 8003f56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f5c:	f7fd f904 	bl	8001168 <HAL_GetTick>
 8003f60:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f62:	e008      	b.n	8003f76 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f64:	f7fd f900 	bl	8001168 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e007      	b.n	8003f86 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f76:	4b09      	ldr	r3, [pc, #36]	@ (8003f9c <RCC_SetFlashLatency+0xf4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d1ef      	bne.n	8003f64 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	374c      	adds	r7, #76	@ 0x4c
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd90      	pop	{r4, r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	0800621c 	.word	0x0800621c
 8003f94:	0800622c 	.word	0x0800622c
 8003f98:	08006238 	.word	0x08006238
 8003f9c:	58004000 	.word	0x58004000

08003fa0 <LL_RCC_LSE_IsEnabled>:
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <LL_RCC_LSE_IsEnabled+0x18>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <LL_RCC_LSE_IsEnabled+0x1a>
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <LL_RCC_LSE_IsReady>:
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d101      	bne.n	8003fdc <LL_RCC_LSE_IsReady+0x18>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <LL_RCC_LSE_IsReady+0x1a>
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <LL_RCC_SetRFWKPClockSource>:
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ffc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_RCC_SetSMPSClockSource>:
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800401c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004022:	f023 0203 	bic.w	r2, r3, #3
 8004026:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4313      	orrs	r3, r2
 800402e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <LL_RCC_SetSMPSPrescaler>:
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800404e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4313      	orrs	r3, r2
 8004056:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <LL_RCC_SetUSARTClockSource>:
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800406c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004074:	f023 0203 	bic.w	r2, r3, #3
 8004078:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_RCC_SetLPUARTClockSource>:
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <LL_RCC_SetI2CClockSource>:
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80040c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80040d4:	43db      	mvns	r3, r3
 80040d6:	401a      	ands	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80040e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <LL_RCC_SetLPTIMClockSource>:
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80040fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004102:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	43db      	mvns	r3, r3
 800410e:	401a      	ands	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	041b      	lsls	r3, r3, #16
 8004114:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <LL_RCC_SetSAIClockSource>:
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800413e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <LL_RCC_SetRNGClockSource>:
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800415e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004166:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800416a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <LL_RCC_SetCLK48ClockSource>:
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800418a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004192:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004196:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <LL_RCC_SetUSBClockSource>:
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff ffe3 	bl	8004182 <LL_RCC_SetCLK48ClockSource>
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <LL_RCC_SetADCClockSource>:
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80041cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <LL_RCC_SetRTCClockSource>:
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80041f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004200:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004204:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_RCC_GetRTCClockSource>:
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004228:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <LL_RCC_ForceBackupDomainReset>:
{
 8004236:	b480      	push	{r7}
 8004238:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800423a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004242:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800424a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800424e:	bf00      	nop
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800425c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004264:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004268:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <LL_RCC_PLLSAI1_Enable>:
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800427e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004288:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800428c:	6013      	str	r3, [r2, #0]
}
 800428e:	bf00      	nop
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <LL_RCC_PLLSAI1_Disable>:
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800429c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042aa:	6013      	str	r3, [r2, #0]
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <LL_RCC_PLLSAI1_IsReady>:
{
 80042b6:	b480      	push	{r7}
 80042b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80042ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042c8:	d101      	bne.n	80042ce <LL_RCC_PLLSAI1_IsReady+0x18>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b088      	sub	sp, #32
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80042e2:	2300      	movs	r3, #0
 80042e4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80042e6:	2300      	movs	r3, #0
 80042e8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d034      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042fe:	d021      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004300:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004304:	d81b      	bhi.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004306:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800430a:	d01d      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800430c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004310:	d815      	bhi.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00b      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004316:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800431a:	d110      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800431c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800432a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800432c:	e00d      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3304      	adds	r3, #4
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f947 	bl	80045c6 <RCCEx_PLLSAI1_ConfigNP>
 8004338:	4603      	mov	r3, r0
 800433a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800433c:	e005      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	77fb      	strb	r3, [r7, #31]
        break;
 8004342:	e002      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004344:	bf00      	nop
 8004346:	e000      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800434a:	7ffb      	ldrb	r3, [r7, #31]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fee8 	bl	800412a <LL_RCC_SetSAIClockSource>
 800435a:	e001      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435c:	7ffb      	ldrb	r3, [r7, #31]
 800435e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004368:	2b00      	cmp	r3, #0
 800436a:	d046      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800436c:	f7ff ff56 	bl	800421c <LL_RCC_GetRTCClockSource>
 8004370:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	429a      	cmp	r2, r3
 800437a:	d03c      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800437c:	f7fe fbfa 	bl	8002b74 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d105      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff ff30 	bl	80041f0 <LL_RCC_SetRTCClockSource>
 8004390:	e02e      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800439c:	f7ff ff4b 	bl	8004236 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80043a0:	f7ff ff5a 	bl	8004258 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80043b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80043bc:	f7ff fdf0 	bl	8003fa0 <LL_RCC_LSE_IsEnabled>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d114      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043c6:	f7fc fecf 	bl	8001168 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80043cc:	e00b      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fc fecb 	bl	8001168 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d902      	bls.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	77fb      	strb	r3, [r7, #31]
              break;
 80043e4:	e004      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80043e6:	f7ff fded 	bl	8003fc4 <LL_RCC_LSE_IsReady>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d1ee      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80043f0:	7ffb      	ldrb	r3, [r7, #31]
 80043f2:	77bb      	strb	r3, [r7, #30]
 80043f4:	e001      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f6:	7ffb      	ldrb	r3, [r7, #31]
 80043f8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fe2a 	bl	8004064 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d004      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fe35 	bl	8004090 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b00      	cmp	r3, #0
 8004430:	d004      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff fe5d 	bl	80040f6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d004      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fe52 	bl	80040f6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d004      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff fe2a 	bl	80040bc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d004      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fe1f 	bl	80040bc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d022      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fe8d 	bl	80041ae <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004498:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800449c:	d107      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800449e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044ac:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044b6:	d10b      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f8dd 	bl	800467c <RCCEx_PLLSAI1_ConfigNQ>
 80044c2:	4603      	mov	r3, r0
 80044c4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80044c6:	7ffb      	ldrb	r3, [r7, #31]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80044cc:	7ffb      	ldrb	r3, [r7, #31]
 80044ce:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d02b      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e4:	d008      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044ee:	d003      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d105      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fe2a 	bl	8004156 <LL_RCC_SetRNGClockSource>
 8004502:	e00a      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	2000      	movs	r0, #0
 8004510:	f7ff fe21 	bl	8004156 <LL_RCC_SetRNGClockSource>
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f7ff fe34 	bl	8004182 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004522:	d107      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800452e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004532:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800453c:	2b00      	cmp	r3, #0
 800453e:	d022      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fe3d 	bl	80041c4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004552:	d107      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800455e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004562:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800456c:	d10b      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f8dd 	bl	8004732 <RCCEx_PLLSAI1_ConfigNR>
 8004578:	4603      	mov	r3, r0
 800457a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800457c:	7ffb      	ldrb	r3, [r7, #31]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004582:	7ffb      	ldrb	r3, [r7, #31]
 8004584:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d004      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fd26 	bl	8003fe8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d009      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff fd45 	bl	800403c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fd2c 	bl	8004014 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80045bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80045d2:	f7ff fe61 	bl	8004298 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045d6:	f7fc fdc7 	bl	8001168 <HAL_GetTick>
 80045da:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80045dc:	e009      	b.n	80045f2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045de:	f7fc fdc3 	bl	8001168 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d902      	bls.n	80045f2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	73fb      	strb	r3, [r7, #15]
      break;
 80045f0:	e004      	b.n	80045fc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80045f2:	f7ff fe60 	bl	80042b6 <LL_RCC_PLLSAI1_IsReady>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f0      	bne.n	80045de <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d137      	bne.n	8004672 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004616:	4313      	orrs	r3, r2
 8004618:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800461a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800462c:	4313      	orrs	r3, r2
 800462e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004630:	f7ff fe23 	bl	800427a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004634:	f7fc fd98 	bl	8001168 <HAL_GetTick>
 8004638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800463a:	e009      	b.n	8004650 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800463c:	f7fc fd94 	bl	8001168 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d902      	bls.n	8004650 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	73fb      	strb	r3, [r7, #15]
        break;
 800464e:	e004      	b.n	800465a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004650:	f7ff fe31 	bl	80042b6 <LL_RCC_PLLSAI1_IsReady>
 8004654:	4603      	mov	r3, r0
 8004656:	2b01      	cmp	r3, #1
 8004658:	d1f0      	bne.n	800463c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d108      	bne.n	8004672 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800466e:	4313      	orrs	r3, r2
 8004670:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004672:	7bfb      	ldrb	r3, [r7, #15]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004688:	f7ff fe06 	bl	8004298 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800468c:	f7fc fd6c 	bl	8001168 <HAL_GetTick>
 8004690:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004692:	e009      	b.n	80046a8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004694:	f7fc fd68 	bl	8001168 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d902      	bls.n	80046a8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	73fb      	strb	r3, [r7, #15]
      break;
 80046a6:	e004      	b.n	80046b2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046a8:	f7ff fe05 	bl	80042b6 <LL_RCC_PLLSAI1_IsReady>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d137      	bne.n	8004728 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80046b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046cc:	4313      	orrs	r3, r2
 80046ce:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80046d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046e2:	4313      	orrs	r3, r2
 80046e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80046e6:	f7ff fdc8 	bl	800427a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ea:	f7fc fd3d 	bl	8001168 <HAL_GetTick>
 80046ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80046f0:	e009      	b.n	8004706 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046f2:	f7fc fd39 	bl	8001168 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d902      	bls.n	8004706 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	73fb      	strb	r3, [r7, #15]
        break;
 8004704:	e004      	b.n	8004710 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004706:	f7ff fdd6 	bl	80042b6 <LL_RCC_PLLSAI1_IsReady>
 800470a:	4603      	mov	r3, r0
 800470c:	2b01      	cmp	r3, #1
 800470e:	d1f0      	bne.n	80046f2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d108      	bne.n	8004728 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004724:	4313      	orrs	r3, r2
 8004726:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004728:	7bfb      	ldrb	r3, [r7, #15]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800473e:	f7ff fdab 	bl	8004298 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004742:	f7fc fd11 	bl	8001168 <HAL_GetTick>
 8004746:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004748:	e009      	b.n	800475e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800474a:	f7fc fd0d 	bl	8001168 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d902      	bls.n	800475e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	73fb      	strb	r3, [r7, #15]
      break;
 800475c:	e004      	b.n	8004768 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800475e:	f7ff fdaa 	bl	80042b6 <LL_RCC_PLLSAI1_IsReady>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f0      	bne.n	800474a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d137      	bne.n	80047de <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800476e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004782:	4313      	orrs	r3, r2
 8004784:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004798:	4313      	orrs	r3, r2
 800479a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800479c:	f7ff fd6d 	bl	800427a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a0:	f7fc fce2 	bl	8001168 <HAL_GetTick>
 80047a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80047a6:	e009      	b.n	80047bc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047a8:	f7fc fcde 	bl	8001168 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d902      	bls.n	80047bc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	73fb      	strb	r3, [r7, #15]
        break;
 80047ba:	e004      	b.n	80047c6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80047bc:	f7ff fd7b 	bl	80042b6 <LL_RCC_PLLSAI1_IsReady>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d1f0      	bne.n	80047a8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d108      	bne.n	80047de <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80047cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047da:	4313      	orrs	r3, r2
 80047dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80047de:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e09f      	b.n	800493a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fc faa6 	bl	8000d60 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800481c:	4b49      	ldr	r3, [pc, #292]	@ (8004944 <HAL_RTC_Init+0x15c>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b10      	cmp	r3, #16
 8004826:	d07e      	beq.n	8004926 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	22ca      	movs	r2, #202	@ 0xca
 800482e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2253      	movs	r2, #83	@ 0x53
 8004836:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f8ab 	bl	8004994 <RTC_EnterInitMode>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	22ff      	movs	r2, #255	@ 0xff
 800484a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2204      	movs	r2, #4
 8004850:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
 8004858:	e067      	b.n	800492a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800486c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6899      	ldr	r1, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68d2      	ldr	r2, [r2, #12]
 8004894:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6919      	ldr	r1, [r3, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	041a      	lsls	r2, r3, #16
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048b8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0203 	bic.w	r2, r2, #3
 80048c8:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d113      	bne.n	8004918 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f829 	bl	8004948 <HAL_RTC_WaitForSynchro>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00d      	beq.n	8004918 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	22ff      	movs	r2, #255	@ 0xff
 8004902:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2204      	movs	r2, #4
 8004908:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e010      	b.n	800493a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	22ff      	movs	r2, #255	@ 0xff
 800491e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	73fb      	strb	r3, [r7, #15]
 8004924:	e001      	b.n	800492a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d103      	bne.n	8004938 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8004938:	7bfb      	ldrb	r3, [r7, #15]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40002800 	.word	0x40002800

08004948 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800495e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004960:	f7fc fc02 	bl	8001168 <HAL_GetTick>
 8004964:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004966:	e009      	b.n	800497c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004968:	f7fc fbfe 	bl	8001168 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004976:	d901      	bls.n	800497c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e007      	b.n	800498c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0ee      	beq.n	8004968 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d119      	bne.n	80049de <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f04f 32ff 	mov.w	r2, #4294967295
 80049b2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80049b4:	f7fc fbd8 	bl	8001168 <HAL_GetTick>
 80049b8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80049ba:	e009      	b.n	80049d0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80049bc:	f7fc fbd4 	bl	8001168 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049ca:	d901      	bls.n	80049d0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e007      	b.n	80049e0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0ee      	beq.n	80049bc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e0a8      	b.n	8004b54 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	22ca      	movs	r2, #202	@ 0xca
 8004a18:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2253      	movs	r2, #83	@ 0x53
 8004a20:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d020      	beq.n	8004a72 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8004a30:	f7fc fb9a 	bl	8001168 <HAL_GetTick>
 8004a34:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004a36:	e015      	b.n	8004a64 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a38:	f7fc fb96 	bl	8001168 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a46:	d90d      	bls.n	8004a64 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	22ff      	movs	r2, #255	@ 0xff
 8004a4e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2203      	movs	r2, #3
 8004a54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e077      	b.n	8004b54 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e2      	bne.n	8004a38 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a80:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8004a92:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004a94:	f7fc fb68 	bl	8001168 <HAL_GetTick>
 8004a98:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004a9a:	e015      	b.n	8004ac8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a9c:	f7fc fb64 	bl	8001168 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004aaa:	d90d      	bls.n	8004ac8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	22ff      	movs	r2, #255	@ 0xff
 8004ab2:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e045      	b.n	8004b54 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0e2      	beq.n	8004a9c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0207 	bic.w	r2, r2, #7
 8004aec:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6899      	ldr	r1, [r3, #8]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004afe:	4b17      	ldr	r3, [pc, #92]	@ (8004b5c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b04:	4a15      	ldr	r2, [pc, #84]	@ (8004b5c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004b06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b0a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004b0e:	4b13      	ldr	r3, [pc, #76]	@ (8004b5c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a12      	ldr	r2, [pc, #72]	@ (8004b5c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004b14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b18:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b28:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b38:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	22ff      	movs	r2, #255	@ 0xff
 8004b40:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	58000800 	.word	0x58000800

08004b60 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fb fd00 	bl	800057c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8004b8c:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004b8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ba8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8004b90:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004b94:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	58000800 	.word	0x58000800

08004bac <LL_RCC_GetUSARTClockSource>:
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4013      	ands	r3, r2
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <LL_RCC_GetLPUARTClockSource>:
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4013      	ands	r3, r2
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e04a      	b.n	8004c94 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d106      	bne.n	8004c16 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7fc f8db 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2224      	movs	r2, #36	@ 0x24
 8004c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0201 	bic.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fae6 	bl	8005208 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f8bb 	bl	8004db8 <UART_SetConfig>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e023      	b.n	8004c94 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004c6a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0208 	orr.w	r2, r2, #8
 8004c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fb5d 	bl	800534c <UART_CheckIdleState>
 8004c92:	4603      	mov	r3, r0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	@ 0x28
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d17b      	bne.n	8004dae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_UART_Transmit+0x26>
 8004cbc:	88fb      	ldrh	r3, [r7, #6]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e074      	b.n	8004db0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2221      	movs	r2, #33	@ 0x21
 8004cd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cd6:	f7fc fa47 	bl	8001168 <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf4:	d108      	bne.n	8004d08 <HAL_UART_Transmit+0x6c>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	e003      	b.n	8004d10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d10:	e030      	b.n	8004d74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2180      	movs	r1, #128	@ 0x80
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 fbbf 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e03d      	b.n	8004db0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10b      	bne.n	8004d52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	e007      	b.n	8004d62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1c8      	bne.n	8004d12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2200      	movs	r2, #0
 8004d88:	2140      	movs	r1, #64	@ 0x40
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fb88 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e006      	b.n	8004db0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e000      	b.n	8004db0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
  }
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dbc:	b08c      	sub	sp, #48	@ 0x30
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	4baf      	ldr	r3, [pc, #700]	@ (80050a4 <UART_SetConfig+0x2ec>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004df0:	430b      	orrs	r3, r1
 8004df2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4aa4      	ldr	r2, [pc, #656]	@ (80050a8 <UART_SetConfig+0x2f0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e20:	4313      	orrs	r3, r2
 8004e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004e2e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	6812      	ldr	r2, [r2, #0]
 8004e36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e42:	f023 010f 	bic.w	r1, r3, #15
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a95      	ldr	r2, [pc, #596]	@ (80050ac <UART_SetConfig+0x2f4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d125      	bne.n	8004ea8 <UART_SetConfig+0xf0>
 8004e5c:	2003      	movs	r0, #3
 8004e5e:	f7ff fea5 	bl	8004bac <LL_RCC_GetUSARTClockSource>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d81b      	bhi.n	8004ea0 <UART_SetConfig+0xe8>
 8004e68:	a201      	add	r2, pc, #4	@ (adr r2, 8004e70 <UART_SetConfig+0xb8>)
 8004e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6e:	bf00      	nop
 8004e70:	08004e81 	.word	0x08004e81
 8004e74:	08004e91 	.word	0x08004e91
 8004e78:	08004e89 	.word	0x08004e89
 8004e7c:	08004e99 	.word	0x08004e99
 8004e80:	2301      	movs	r3, #1
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e86:	e042      	b.n	8004f0e <UART_SetConfig+0x156>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e8e:	e03e      	b.n	8004f0e <UART_SetConfig+0x156>
 8004e90:	2304      	movs	r3, #4
 8004e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e96:	e03a      	b.n	8004f0e <UART_SetConfig+0x156>
 8004e98:	2308      	movs	r3, #8
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9e:	e036      	b.n	8004f0e <UART_SetConfig+0x156>
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea6:	e032      	b.n	8004f0e <UART_SetConfig+0x156>
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a7e      	ldr	r2, [pc, #504]	@ (80050a8 <UART_SetConfig+0x2f0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d12a      	bne.n	8004f08 <UART_SetConfig+0x150>
 8004eb2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004eb6:	f7ff fe89 	bl	8004bcc <LL_RCC_GetLPUARTClockSource>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ec0:	d01a      	beq.n	8004ef8 <UART_SetConfig+0x140>
 8004ec2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ec6:	d81b      	bhi.n	8004f00 <UART_SetConfig+0x148>
 8004ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ecc:	d00c      	beq.n	8004ee8 <UART_SetConfig+0x130>
 8004ece:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ed2:	d815      	bhi.n	8004f00 <UART_SetConfig+0x148>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <UART_SetConfig+0x128>
 8004ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004edc:	d008      	beq.n	8004ef0 <UART_SetConfig+0x138>
 8004ede:	e00f      	b.n	8004f00 <UART_SetConfig+0x148>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ee6:	e012      	b.n	8004f0e <UART_SetConfig+0x156>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eee:	e00e      	b.n	8004f0e <UART_SetConfig+0x156>
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ef6:	e00a      	b.n	8004f0e <UART_SetConfig+0x156>
 8004ef8:	2308      	movs	r3, #8
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004efe:	e006      	b.n	8004f0e <UART_SetConfig+0x156>
 8004f00:	2310      	movs	r3, #16
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f06:	e002      	b.n	8004f0e <UART_SetConfig+0x156>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a65      	ldr	r2, [pc, #404]	@ (80050a8 <UART_SetConfig+0x2f0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	f040 8097 	bne.w	8005048 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d823      	bhi.n	8004f6a <UART_SetConfig+0x1b2>
 8004f22:	a201      	add	r2, pc, #4	@ (adr r2, 8004f28 <UART_SetConfig+0x170>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f4d 	.word	0x08004f4d
 8004f2c:	08004f6b 	.word	0x08004f6b
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f6b 	.word	0x08004f6b
 8004f38:	08004f5b 	.word	0x08004f5b
 8004f3c:	08004f6b 	.word	0x08004f6b
 8004f40:	08004f6b 	.word	0x08004f6b
 8004f44:	08004f6b 	.word	0x08004f6b
 8004f48:	08004f63 	.word	0x08004f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f4c:	f7fe ff48 	bl	8003de0 <HAL_RCC_GetPCLK1Freq>
 8004f50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f52:	e010      	b.n	8004f76 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f54:	4b56      	ldr	r3, [pc, #344]	@ (80050b0 <UART_SetConfig+0x2f8>)
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f58:	e00d      	b.n	8004f76 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5a:	f7fe fec1 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8004f5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f60:	e009      	b.n	8004f76 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f68:	e005      	b.n	8004f76 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 812b 	beq.w	80051d4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f82:	4a4c      	ldr	r2, [pc, #304]	@ (80050b4 <UART_SetConfig+0x2fc>)
 8004f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	4413      	add	r3, r2
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d305      	bcc.n	8004fae <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d903      	bls.n	8004fb6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fb4:	e10e      	b.n	80051d4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	2200      	movs	r2, #0
 8004fba:	60bb      	str	r3, [r7, #8]
 8004fbc:	60fa      	str	r2, [r7, #12]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc2:	4a3c      	ldr	r2, [pc, #240]	@ (80050b4 <UART_SetConfig+0x2fc>)
 8004fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2200      	movs	r2, #0
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fd8:	f7fb f92a 	bl	8000230 <__aeabi_uldivmod>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	020b      	lsls	r3, r1, #8
 8004fee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ff2:	0202      	lsls	r2, r0, #8
 8004ff4:	6979      	ldr	r1, [r7, #20]
 8004ff6:	6849      	ldr	r1, [r1, #4]
 8004ff8:	0849      	lsrs	r1, r1, #1
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	460c      	mov	r4, r1
 8004ffe:	4605      	mov	r5, r0
 8005000:	eb12 0804 	adds.w	r8, r2, r4
 8005004:	eb43 0905 	adc.w	r9, r3, r5
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	469a      	mov	sl, r3
 8005010:	4693      	mov	fp, r2
 8005012:	4652      	mov	r2, sl
 8005014:	465b      	mov	r3, fp
 8005016:	4640      	mov	r0, r8
 8005018:	4649      	mov	r1, r9
 800501a:	f7fb f909 	bl	8000230 <__aeabi_uldivmod>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4613      	mov	r3, r2
 8005024:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800502c:	d308      	bcc.n	8005040 <UART_SetConfig+0x288>
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005034:	d204      	bcs.n	8005040 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6a3a      	ldr	r2, [r7, #32]
 800503c:	60da      	str	r2, [r3, #12]
 800503e:	e0c9      	b.n	80051d4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005046:	e0c5      	b.n	80051d4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005050:	d16d      	bne.n	800512e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005052:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005056:	3b01      	subs	r3, #1
 8005058:	2b07      	cmp	r3, #7
 800505a:	d82d      	bhi.n	80050b8 <UART_SetConfig+0x300>
 800505c:	a201      	add	r2, pc, #4	@ (adr r2, 8005064 <UART_SetConfig+0x2ac>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005085 	.word	0x08005085
 8005068:	0800508d 	.word	0x0800508d
 800506c:	080050b9 	.word	0x080050b9
 8005070:	08005093 	.word	0x08005093
 8005074:	080050b9 	.word	0x080050b9
 8005078:	080050b9 	.word	0x080050b9
 800507c:	080050b9 	.word	0x080050b9
 8005080:	0800509b 	.word	0x0800509b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005084:	f7fe fec2 	bl	8003e0c <HAL_RCC_GetPCLK2Freq>
 8005088:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800508a:	e01b      	b.n	80050c4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800508c:	4b08      	ldr	r3, [pc, #32]	@ (80050b0 <UART_SetConfig+0x2f8>)
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005090:	e018      	b.n	80050c4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005092:	f7fe fe25 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8005096:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005098:	e014      	b.n	80050c4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050a0:	e010      	b.n	80050c4 <UART_SetConfig+0x30c>
 80050a2:	bf00      	nop
 80050a4:	cfff69f3 	.word	0xcfff69f3
 80050a8:	40008000 	.word	0x40008000
 80050ac:	40013800 	.word	0x40013800
 80050b0:	00f42400 	.word	0x00f42400
 80050b4:	080062e8 	.word	0x080062e8
      default:
        pclk = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 8084 	beq.w	80051d4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d0:	4a4b      	ldr	r2, [pc, #300]	@ (8005200 <UART_SetConfig+0x448>)
 80050d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050d6:	461a      	mov	r2, r3
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	fbb3 f3f2 	udiv	r3, r3, r2
 80050de:	005a      	lsls	r2, r3, #1
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	085b      	lsrs	r3, r3, #1
 80050e6:	441a      	add	r2, r3
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	2b0f      	cmp	r3, #15
 80050f6:	d916      	bls.n	8005126 <UART_SetConfig+0x36e>
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050fe:	d212      	bcs.n	8005126 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f023 030f 	bic.w	r3, r3, #15
 8005108:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	085b      	lsrs	r3, r3, #1
 800510e:	b29b      	uxth	r3, r3
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	b29a      	uxth	r2, r3
 8005116:	8bfb      	ldrh	r3, [r7, #30]
 8005118:	4313      	orrs	r3, r2
 800511a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	8bfa      	ldrh	r2, [r7, #30]
 8005122:	60da      	str	r2, [r3, #12]
 8005124:	e056      	b.n	80051d4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800512c:	e052      	b.n	80051d4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800512e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005132:	3b01      	subs	r3, #1
 8005134:	2b07      	cmp	r3, #7
 8005136:	d822      	bhi.n	800517e <UART_SetConfig+0x3c6>
 8005138:	a201      	add	r2, pc, #4	@ (adr r2, 8005140 <UART_SetConfig+0x388>)
 800513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513e:	bf00      	nop
 8005140:	08005161 	.word	0x08005161
 8005144:	08005169 	.word	0x08005169
 8005148:	0800517f 	.word	0x0800517f
 800514c:	0800516f 	.word	0x0800516f
 8005150:	0800517f 	.word	0x0800517f
 8005154:	0800517f 	.word	0x0800517f
 8005158:	0800517f 	.word	0x0800517f
 800515c:	08005177 	.word	0x08005177
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005160:	f7fe fe54 	bl	8003e0c <HAL_RCC_GetPCLK2Freq>
 8005164:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005166:	e010      	b.n	800518a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005168:	4b26      	ldr	r3, [pc, #152]	@ (8005204 <UART_SetConfig+0x44c>)
 800516a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800516c:	e00d      	b.n	800518a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516e:	f7fe fdb7 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8005172:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005174:	e009      	b.n	800518a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800517c:	e005      	b.n	800518a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005188:	bf00      	nop
    }

    if (pclk != 0U)
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	2b00      	cmp	r3, #0
 800518e:	d021      	beq.n	80051d4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005194:	4a1a      	ldr	r2, [pc, #104]	@ (8005200 <UART_SetConfig+0x448>)
 8005196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800519a:	461a      	mov	r2, r3
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	fbb3 f2f2 	udiv	r2, r3, r2
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	085b      	lsrs	r3, r3, #1
 80051a8:	441a      	add	r2, r3
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	2b0f      	cmp	r3, #15
 80051b8:	d909      	bls.n	80051ce <UART_SetConfig+0x416>
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c0:	d205      	bcs.n	80051ce <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	e002      	b.n	80051d4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2201      	movs	r2, #1
 80051e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2200      	movs	r2, #0
 80051e8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2200      	movs	r2, #0
 80051ee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80051f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3730      	adds	r7, #48	@ 0x30
 80051f8:	46bd      	mov	sp, r7
 80051fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051fe:	bf00      	nop
 8005200:	080062e8 	.word	0x080062e8
 8005204:	00f42400 	.word	0x00f42400

08005208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01a      	beq.n	800531e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005306:	d10a      	bne.n	800531e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	605a      	str	r2, [r3, #4]
  }
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b098      	sub	sp, #96	@ 0x60
 8005350:	af02      	add	r7, sp, #8
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800535c:	f7fb ff04 	bl	8001168 <HAL_GetTick>
 8005360:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b08      	cmp	r3, #8
 800536e:	d12f      	bne.n	80053d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005370:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005378:	2200      	movs	r2, #0
 800537a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f88e 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d022      	beq.n	80053d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800539e:	653b      	str	r3, [r7, #80]	@ 0x50
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80053aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e6      	bne.n	800538a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e063      	b.n	8005498 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d149      	bne.n	8005472 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e6:	2200      	movs	r2, #0
 80053e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f857 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d03c      	beq.n	8005472 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	623b      	str	r3, [r7, #32]
   return(result);
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800540c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005416:	633b      	str	r3, [r7, #48]	@ 0x30
 8005418:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800541c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e6      	bne.n	80053f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3308      	adds	r3, #8
 8005430:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	60fb      	str	r3, [r7, #12]
   return(result);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3308      	adds	r3, #8
 8005448:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800544a:	61fa      	str	r2, [r7, #28]
 800544c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	69b9      	ldr	r1, [r7, #24]
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	617b      	str	r3, [r7, #20]
   return(result);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e5      	bne.n	800542a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e012      	b.n	8005498 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3758      	adds	r7, #88	@ 0x58
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b0:	e04f      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d04b      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ba:	f7fb fe55 	bl	8001168 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e04e      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d037      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b80      	cmp	r3, #128	@ 0x80
 80054e6:	d034      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b40      	cmp	r3, #64	@ 0x40
 80054ec:	d031      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d110      	bne.n	800551e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2208      	movs	r2, #8
 8005502:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f838 	bl	800557a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2208      	movs	r2, #8
 800550e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e029      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800552c:	d111      	bne.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f81e 	bl	800557a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e00f      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4013      	ands	r3, r2
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	429a      	cmp	r2, r3
 8005560:	bf0c      	ite	eq
 8005562:	2301      	moveq	r3, #1
 8005564:	2300      	movne	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	429a      	cmp	r2, r3
 800556e:	d0a0      	beq.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800557a:	b480      	push	{r7}
 800557c:	b095      	sub	sp, #84	@ 0x54
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80055a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e6      	bne.n	8005582 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3308      	adds	r3, #8
 80055ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ca:	f023 0301 	bic.w	r3, r3, #1
 80055ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3308      	adds	r3, #8
 80055d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e3      	bne.n	80055b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d118      	bne.n	8005626 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	60bb      	str	r3, [r7, #8]
   return(result);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f023 0310 	bic.w	r3, r3, #16
 8005608:	647b      	str	r3, [r7, #68]	@ 0x44
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	6979      	ldr	r1, [r7, #20]
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	613b      	str	r3, [r7, #16]
   return(result);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e6      	bne.n	80055f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800563a:	bf00      	nop
 800563c:	3754      	adds	r7, #84	@ 0x54
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_UARTEx_DisableFifoMode+0x16>
 8005658:	2302      	movs	r3, #2
 800565a:	e027      	b.n	80056ac <HAL_UARTEx_DisableFifoMode+0x66>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2224      	movs	r2, #36	@ 0x24
 8005668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0201 	bic.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800568a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e02d      	b.n	800572c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2224      	movs	r2, #36	@ 0x24
 80056dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0201 	bic.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f84f 	bl	80057b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005748:	2302      	movs	r3, #2
 800574a:	e02d      	b.n	80057a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2224      	movs	r2, #36	@ 0x24
 8005758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0201 	bic.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f811 	bl	80057b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d108      	bne.n	80057d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057d0:	e031      	b.n	8005836 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057d2:	2308      	movs	r3, #8
 80057d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057d6:	2308      	movs	r3, #8
 80057d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	0e5b      	lsrs	r3, r3, #25
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	0f5b      	lsrs	r3, r3, #29
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057fa:	7bbb      	ldrb	r3, [r7, #14]
 80057fc:	7b3a      	ldrb	r2, [r7, #12]
 80057fe:	4911      	ldr	r1, [pc, #68]	@ (8005844 <UARTEx_SetNbDataToProcess+0x94>)
 8005800:	5c8a      	ldrb	r2, [r1, r2]
 8005802:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005806:	7b3a      	ldrb	r2, [r7, #12]
 8005808:	490f      	ldr	r1, [pc, #60]	@ (8005848 <UARTEx_SetNbDataToProcess+0x98>)
 800580a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800580c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005810:	b29a      	uxth	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	7b7a      	ldrb	r2, [r7, #13]
 800581c:	4909      	ldr	r1, [pc, #36]	@ (8005844 <UARTEx_SetNbDataToProcess+0x94>)
 800581e:	5c8a      	ldrb	r2, [r1, r2]
 8005820:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005824:	7b7a      	ldrb	r2, [r7, #13]
 8005826:	4908      	ldr	r1, [pc, #32]	@ (8005848 <UARTEx_SetNbDataToProcess+0x98>)
 8005828:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800582a:	fb93 f3f2 	sdiv	r3, r3, r2
 800582e:	b29a      	uxth	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	08006300 	.word	0x08006300
 8005848:	08006308 	.word	0x08006308

0800584c <siprintf>:
 800584c:	b40e      	push	{r1, r2, r3}
 800584e:	b500      	push	{lr}
 8005850:	b09c      	sub	sp, #112	@ 0x70
 8005852:	ab1d      	add	r3, sp, #116	@ 0x74
 8005854:	9002      	str	r0, [sp, #8]
 8005856:	9006      	str	r0, [sp, #24]
 8005858:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800585c:	4809      	ldr	r0, [pc, #36]	@ (8005884 <siprintf+0x38>)
 800585e:	9107      	str	r1, [sp, #28]
 8005860:	9104      	str	r1, [sp, #16]
 8005862:	4909      	ldr	r1, [pc, #36]	@ (8005888 <siprintf+0x3c>)
 8005864:	f853 2b04 	ldr.w	r2, [r3], #4
 8005868:	9105      	str	r1, [sp, #20]
 800586a:	6800      	ldr	r0, [r0, #0]
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	a902      	add	r1, sp, #8
 8005870:	f000 f994 	bl	8005b9c <_svfiprintf_r>
 8005874:	9b02      	ldr	r3, [sp, #8]
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	b01c      	add	sp, #112	@ 0x70
 800587c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005880:	b003      	add	sp, #12
 8005882:	4770      	bx	lr
 8005884:	20000014 	.word	0x20000014
 8005888:	ffff0208 	.word	0xffff0208

0800588c <memset>:
 800588c:	4402      	add	r2, r0
 800588e:	4603      	mov	r3, r0
 8005890:	4293      	cmp	r3, r2
 8005892:	d100      	bne.n	8005896 <memset+0xa>
 8005894:	4770      	bx	lr
 8005896:	f803 1b01 	strb.w	r1, [r3], #1
 800589a:	e7f9      	b.n	8005890 <memset+0x4>

0800589c <__errno>:
 800589c:	4b01      	ldr	r3, [pc, #4]	@ (80058a4 <__errno+0x8>)
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	20000014 	.word	0x20000014

080058a8 <__libc_init_array>:
 80058a8:	b570      	push	{r4, r5, r6, lr}
 80058aa:	4d0d      	ldr	r5, [pc, #52]	@ (80058e0 <__libc_init_array+0x38>)
 80058ac:	4c0d      	ldr	r4, [pc, #52]	@ (80058e4 <__libc_init_array+0x3c>)
 80058ae:	1b64      	subs	r4, r4, r5
 80058b0:	10a4      	asrs	r4, r4, #2
 80058b2:	2600      	movs	r6, #0
 80058b4:	42a6      	cmp	r6, r4
 80058b6:	d109      	bne.n	80058cc <__libc_init_array+0x24>
 80058b8:	4d0b      	ldr	r5, [pc, #44]	@ (80058e8 <__libc_init_array+0x40>)
 80058ba:	4c0c      	ldr	r4, [pc, #48]	@ (80058ec <__libc_init_array+0x44>)
 80058bc:	f000 fc66 	bl	800618c <_init>
 80058c0:	1b64      	subs	r4, r4, r5
 80058c2:	10a4      	asrs	r4, r4, #2
 80058c4:	2600      	movs	r6, #0
 80058c6:	42a6      	cmp	r6, r4
 80058c8:	d105      	bne.n	80058d6 <__libc_init_array+0x2e>
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
 80058cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d0:	4798      	blx	r3
 80058d2:	3601      	adds	r6, #1
 80058d4:	e7ee      	b.n	80058b4 <__libc_init_array+0xc>
 80058d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058da:	4798      	blx	r3
 80058dc:	3601      	adds	r6, #1
 80058de:	e7f2      	b.n	80058c6 <__libc_init_array+0x1e>
 80058e0:	0800634c 	.word	0x0800634c
 80058e4:	0800634c 	.word	0x0800634c
 80058e8:	0800634c 	.word	0x0800634c
 80058ec:	08006350 	.word	0x08006350

080058f0 <__retarget_lock_acquire_recursive>:
 80058f0:	4770      	bx	lr

080058f2 <__retarget_lock_release_recursive>:
 80058f2:	4770      	bx	lr

080058f4 <_free_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4605      	mov	r5, r0
 80058f8:	2900      	cmp	r1, #0
 80058fa:	d041      	beq.n	8005980 <_free_r+0x8c>
 80058fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005900:	1f0c      	subs	r4, r1, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	bfb8      	it	lt
 8005906:	18e4      	addlt	r4, r4, r3
 8005908:	f000 f8e0 	bl	8005acc <__malloc_lock>
 800590c:	4a1d      	ldr	r2, [pc, #116]	@ (8005984 <_free_r+0x90>)
 800590e:	6813      	ldr	r3, [r2, #0]
 8005910:	b933      	cbnz	r3, 8005920 <_free_r+0x2c>
 8005912:	6063      	str	r3, [r4, #4]
 8005914:	6014      	str	r4, [r2, #0]
 8005916:	4628      	mov	r0, r5
 8005918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800591c:	f000 b8dc 	b.w	8005ad8 <__malloc_unlock>
 8005920:	42a3      	cmp	r3, r4
 8005922:	d908      	bls.n	8005936 <_free_r+0x42>
 8005924:	6820      	ldr	r0, [r4, #0]
 8005926:	1821      	adds	r1, r4, r0
 8005928:	428b      	cmp	r3, r1
 800592a:	bf01      	itttt	eq
 800592c:	6819      	ldreq	r1, [r3, #0]
 800592e:	685b      	ldreq	r3, [r3, #4]
 8005930:	1809      	addeq	r1, r1, r0
 8005932:	6021      	streq	r1, [r4, #0]
 8005934:	e7ed      	b.n	8005912 <_free_r+0x1e>
 8005936:	461a      	mov	r2, r3
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	b10b      	cbz	r3, 8005940 <_free_r+0x4c>
 800593c:	42a3      	cmp	r3, r4
 800593e:	d9fa      	bls.n	8005936 <_free_r+0x42>
 8005940:	6811      	ldr	r1, [r2, #0]
 8005942:	1850      	adds	r0, r2, r1
 8005944:	42a0      	cmp	r0, r4
 8005946:	d10b      	bne.n	8005960 <_free_r+0x6c>
 8005948:	6820      	ldr	r0, [r4, #0]
 800594a:	4401      	add	r1, r0
 800594c:	1850      	adds	r0, r2, r1
 800594e:	4283      	cmp	r3, r0
 8005950:	6011      	str	r1, [r2, #0]
 8005952:	d1e0      	bne.n	8005916 <_free_r+0x22>
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	6053      	str	r3, [r2, #4]
 800595a:	4408      	add	r0, r1
 800595c:	6010      	str	r0, [r2, #0]
 800595e:	e7da      	b.n	8005916 <_free_r+0x22>
 8005960:	d902      	bls.n	8005968 <_free_r+0x74>
 8005962:	230c      	movs	r3, #12
 8005964:	602b      	str	r3, [r5, #0]
 8005966:	e7d6      	b.n	8005916 <_free_r+0x22>
 8005968:	6820      	ldr	r0, [r4, #0]
 800596a:	1821      	adds	r1, r4, r0
 800596c:	428b      	cmp	r3, r1
 800596e:	bf04      	itt	eq
 8005970:	6819      	ldreq	r1, [r3, #0]
 8005972:	685b      	ldreq	r3, [r3, #4]
 8005974:	6063      	str	r3, [r4, #4]
 8005976:	bf04      	itt	eq
 8005978:	1809      	addeq	r1, r1, r0
 800597a:	6021      	streq	r1, [r4, #0]
 800597c:	6054      	str	r4, [r2, #4]
 800597e:	e7ca      	b.n	8005916 <_free_r+0x22>
 8005980:	bd38      	pop	{r3, r4, r5, pc}
 8005982:	bf00      	nop
 8005984:	200002ec 	.word	0x200002ec

08005988 <sbrk_aligned>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	4e0f      	ldr	r6, [pc, #60]	@ (80059c8 <sbrk_aligned+0x40>)
 800598c:	460c      	mov	r4, r1
 800598e:	6831      	ldr	r1, [r6, #0]
 8005990:	4605      	mov	r5, r0
 8005992:	b911      	cbnz	r1, 800599a <sbrk_aligned+0x12>
 8005994:	f000 fba6 	bl	80060e4 <_sbrk_r>
 8005998:	6030      	str	r0, [r6, #0]
 800599a:	4621      	mov	r1, r4
 800599c:	4628      	mov	r0, r5
 800599e:	f000 fba1 	bl	80060e4 <_sbrk_r>
 80059a2:	1c43      	adds	r3, r0, #1
 80059a4:	d103      	bne.n	80059ae <sbrk_aligned+0x26>
 80059a6:	f04f 34ff 	mov.w	r4, #4294967295
 80059aa:	4620      	mov	r0, r4
 80059ac:	bd70      	pop	{r4, r5, r6, pc}
 80059ae:	1cc4      	adds	r4, r0, #3
 80059b0:	f024 0403 	bic.w	r4, r4, #3
 80059b4:	42a0      	cmp	r0, r4
 80059b6:	d0f8      	beq.n	80059aa <sbrk_aligned+0x22>
 80059b8:	1a21      	subs	r1, r4, r0
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 fb92 	bl	80060e4 <_sbrk_r>
 80059c0:	3001      	adds	r0, #1
 80059c2:	d1f2      	bne.n	80059aa <sbrk_aligned+0x22>
 80059c4:	e7ef      	b.n	80059a6 <sbrk_aligned+0x1e>
 80059c6:	bf00      	nop
 80059c8:	200002e8 	.word	0x200002e8

080059cc <_malloc_r>:
 80059cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059d0:	1ccd      	adds	r5, r1, #3
 80059d2:	f025 0503 	bic.w	r5, r5, #3
 80059d6:	3508      	adds	r5, #8
 80059d8:	2d0c      	cmp	r5, #12
 80059da:	bf38      	it	cc
 80059dc:	250c      	movcc	r5, #12
 80059de:	2d00      	cmp	r5, #0
 80059e0:	4606      	mov	r6, r0
 80059e2:	db01      	blt.n	80059e8 <_malloc_r+0x1c>
 80059e4:	42a9      	cmp	r1, r5
 80059e6:	d904      	bls.n	80059f2 <_malloc_r+0x26>
 80059e8:	230c      	movs	r3, #12
 80059ea:	6033      	str	r3, [r6, #0]
 80059ec:	2000      	movs	r0, #0
 80059ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ac8 <_malloc_r+0xfc>
 80059f6:	f000 f869 	bl	8005acc <__malloc_lock>
 80059fa:	f8d8 3000 	ldr.w	r3, [r8]
 80059fe:	461c      	mov	r4, r3
 8005a00:	bb44      	cbnz	r4, 8005a54 <_malloc_r+0x88>
 8005a02:	4629      	mov	r1, r5
 8005a04:	4630      	mov	r0, r6
 8005a06:	f7ff ffbf 	bl	8005988 <sbrk_aligned>
 8005a0a:	1c43      	adds	r3, r0, #1
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	d158      	bne.n	8005ac2 <_malloc_r+0xf6>
 8005a10:	f8d8 4000 	ldr.w	r4, [r8]
 8005a14:	4627      	mov	r7, r4
 8005a16:	2f00      	cmp	r7, #0
 8005a18:	d143      	bne.n	8005aa2 <_malloc_r+0xd6>
 8005a1a:	2c00      	cmp	r4, #0
 8005a1c:	d04b      	beq.n	8005ab6 <_malloc_r+0xea>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	4639      	mov	r1, r7
 8005a22:	4630      	mov	r0, r6
 8005a24:	eb04 0903 	add.w	r9, r4, r3
 8005a28:	f000 fb5c 	bl	80060e4 <_sbrk_r>
 8005a2c:	4581      	cmp	r9, r0
 8005a2e:	d142      	bne.n	8005ab6 <_malloc_r+0xea>
 8005a30:	6821      	ldr	r1, [r4, #0]
 8005a32:	1a6d      	subs	r5, r5, r1
 8005a34:	4629      	mov	r1, r5
 8005a36:	4630      	mov	r0, r6
 8005a38:	f7ff ffa6 	bl	8005988 <sbrk_aligned>
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d03a      	beq.n	8005ab6 <_malloc_r+0xea>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	442b      	add	r3, r5
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	f8d8 3000 	ldr.w	r3, [r8]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	bb62      	cbnz	r2, 8005aa8 <_malloc_r+0xdc>
 8005a4e:	f8c8 7000 	str.w	r7, [r8]
 8005a52:	e00f      	b.n	8005a74 <_malloc_r+0xa8>
 8005a54:	6822      	ldr	r2, [r4, #0]
 8005a56:	1b52      	subs	r2, r2, r5
 8005a58:	d420      	bmi.n	8005a9c <_malloc_r+0xd0>
 8005a5a:	2a0b      	cmp	r2, #11
 8005a5c:	d917      	bls.n	8005a8e <_malloc_r+0xc2>
 8005a5e:	1961      	adds	r1, r4, r5
 8005a60:	42a3      	cmp	r3, r4
 8005a62:	6025      	str	r5, [r4, #0]
 8005a64:	bf18      	it	ne
 8005a66:	6059      	strne	r1, [r3, #4]
 8005a68:	6863      	ldr	r3, [r4, #4]
 8005a6a:	bf08      	it	eq
 8005a6c:	f8c8 1000 	streq.w	r1, [r8]
 8005a70:	5162      	str	r2, [r4, r5]
 8005a72:	604b      	str	r3, [r1, #4]
 8005a74:	4630      	mov	r0, r6
 8005a76:	f000 f82f 	bl	8005ad8 <__malloc_unlock>
 8005a7a:	f104 000b 	add.w	r0, r4, #11
 8005a7e:	1d23      	adds	r3, r4, #4
 8005a80:	f020 0007 	bic.w	r0, r0, #7
 8005a84:	1ac2      	subs	r2, r0, r3
 8005a86:	bf1c      	itt	ne
 8005a88:	1a1b      	subne	r3, r3, r0
 8005a8a:	50a3      	strne	r3, [r4, r2]
 8005a8c:	e7af      	b.n	80059ee <_malloc_r+0x22>
 8005a8e:	6862      	ldr	r2, [r4, #4]
 8005a90:	42a3      	cmp	r3, r4
 8005a92:	bf0c      	ite	eq
 8005a94:	f8c8 2000 	streq.w	r2, [r8]
 8005a98:	605a      	strne	r2, [r3, #4]
 8005a9a:	e7eb      	b.n	8005a74 <_malloc_r+0xa8>
 8005a9c:	4623      	mov	r3, r4
 8005a9e:	6864      	ldr	r4, [r4, #4]
 8005aa0:	e7ae      	b.n	8005a00 <_malloc_r+0x34>
 8005aa2:	463c      	mov	r4, r7
 8005aa4:	687f      	ldr	r7, [r7, #4]
 8005aa6:	e7b6      	b.n	8005a16 <_malloc_r+0x4a>
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	42a3      	cmp	r3, r4
 8005aae:	d1fb      	bne.n	8005aa8 <_malloc_r+0xdc>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	6053      	str	r3, [r2, #4]
 8005ab4:	e7de      	b.n	8005a74 <_malloc_r+0xa8>
 8005ab6:	230c      	movs	r3, #12
 8005ab8:	6033      	str	r3, [r6, #0]
 8005aba:	4630      	mov	r0, r6
 8005abc:	f000 f80c 	bl	8005ad8 <__malloc_unlock>
 8005ac0:	e794      	b.n	80059ec <_malloc_r+0x20>
 8005ac2:	6005      	str	r5, [r0, #0]
 8005ac4:	e7d6      	b.n	8005a74 <_malloc_r+0xa8>
 8005ac6:	bf00      	nop
 8005ac8:	200002ec 	.word	0x200002ec

08005acc <__malloc_lock>:
 8005acc:	4801      	ldr	r0, [pc, #4]	@ (8005ad4 <__malloc_lock+0x8>)
 8005ace:	f7ff bf0f 	b.w	80058f0 <__retarget_lock_acquire_recursive>
 8005ad2:	bf00      	nop
 8005ad4:	200002e4 	.word	0x200002e4

08005ad8 <__malloc_unlock>:
 8005ad8:	4801      	ldr	r0, [pc, #4]	@ (8005ae0 <__malloc_unlock+0x8>)
 8005ada:	f7ff bf0a 	b.w	80058f2 <__retarget_lock_release_recursive>
 8005ade:	bf00      	nop
 8005ae0:	200002e4 	.word	0x200002e4

08005ae4 <__ssputs_r>:
 8005ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	688e      	ldr	r6, [r1, #8]
 8005aea:	461f      	mov	r7, r3
 8005aec:	42be      	cmp	r6, r7
 8005aee:	680b      	ldr	r3, [r1, #0]
 8005af0:	4682      	mov	sl, r0
 8005af2:	460c      	mov	r4, r1
 8005af4:	4690      	mov	r8, r2
 8005af6:	d82d      	bhi.n	8005b54 <__ssputs_r+0x70>
 8005af8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005afc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b00:	d026      	beq.n	8005b50 <__ssputs_r+0x6c>
 8005b02:	6965      	ldr	r5, [r4, #20]
 8005b04:	6909      	ldr	r1, [r1, #16]
 8005b06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b0a:	eba3 0901 	sub.w	r9, r3, r1
 8005b0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b12:	1c7b      	adds	r3, r7, #1
 8005b14:	444b      	add	r3, r9
 8005b16:	106d      	asrs	r5, r5, #1
 8005b18:	429d      	cmp	r5, r3
 8005b1a:	bf38      	it	cc
 8005b1c:	461d      	movcc	r5, r3
 8005b1e:	0553      	lsls	r3, r2, #21
 8005b20:	d527      	bpl.n	8005b72 <__ssputs_r+0x8e>
 8005b22:	4629      	mov	r1, r5
 8005b24:	f7ff ff52 	bl	80059cc <_malloc_r>
 8005b28:	4606      	mov	r6, r0
 8005b2a:	b360      	cbz	r0, 8005b86 <__ssputs_r+0xa2>
 8005b2c:	6921      	ldr	r1, [r4, #16]
 8005b2e:	464a      	mov	r2, r9
 8005b30:	f000 fae8 	bl	8006104 <memcpy>
 8005b34:	89a3      	ldrh	r3, [r4, #12]
 8005b36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b3e:	81a3      	strh	r3, [r4, #12]
 8005b40:	6126      	str	r6, [r4, #16]
 8005b42:	6165      	str	r5, [r4, #20]
 8005b44:	444e      	add	r6, r9
 8005b46:	eba5 0509 	sub.w	r5, r5, r9
 8005b4a:	6026      	str	r6, [r4, #0]
 8005b4c:	60a5      	str	r5, [r4, #8]
 8005b4e:	463e      	mov	r6, r7
 8005b50:	42be      	cmp	r6, r7
 8005b52:	d900      	bls.n	8005b56 <__ssputs_r+0x72>
 8005b54:	463e      	mov	r6, r7
 8005b56:	6820      	ldr	r0, [r4, #0]
 8005b58:	4632      	mov	r2, r6
 8005b5a:	4641      	mov	r1, r8
 8005b5c:	f000 faa8 	bl	80060b0 <memmove>
 8005b60:	68a3      	ldr	r3, [r4, #8]
 8005b62:	1b9b      	subs	r3, r3, r6
 8005b64:	60a3      	str	r3, [r4, #8]
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	4433      	add	r3, r6
 8005b6a:	6023      	str	r3, [r4, #0]
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b72:	462a      	mov	r2, r5
 8005b74:	f000 fad4 	bl	8006120 <_realloc_r>
 8005b78:	4606      	mov	r6, r0
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d1e0      	bne.n	8005b40 <__ssputs_r+0x5c>
 8005b7e:	6921      	ldr	r1, [r4, #16]
 8005b80:	4650      	mov	r0, sl
 8005b82:	f7ff feb7 	bl	80058f4 <_free_r>
 8005b86:	230c      	movs	r3, #12
 8005b88:	f8ca 3000 	str.w	r3, [sl]
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b92:	81a3      	strh	r3, [r4, #12]
 8005b94:	f04f 30ff 	mov.w	r0, #4294967295
 8005b98:	e7e9      	b.n	8005b6e <__ssputs_r+0x8a>
	...

08005b9c <_svfiprintf_r>:
 8005b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba0:	4698      	mov	r8, r3
 8005ba2:	898b      	ldrh	r3, [r1, #12]
 8005ba4:	061b      	lsls	r3, r3, #24
 8005ba6:	b09d      	sub	sp, #116	@ 0x74
 8005ba8:	4607      	mov	r7, r0
 8005baa:	460d      	mov	r5, r1
 8005bac:	4614      	mov	r4, r2
 8005bae:	d510      	bpl.n	8005bd2 <_svfiprintf_r+0x36>
 8005bb0:	690b      	ldr	r3, [r1, #16]
 8005bb2:	b973      	cbnz	r3, 8005bd2 <_svfiprintf_r+0x36>
 8005bb4:	2140      	movs	r1, #64	@ 0x40
 8005bb6:	f7ff ff09 	bl	80059cc <_malloc_r>
 8005bba:	6028      	str	r0, [r5, #0]
 8005bbc:	6128      	str	r0, [r5, #16]
 8005bbe:	b930      	cbnz	r0, 8005bce <_svfiprintf_r+0x32>
 8005bc0:	230c      	movs	r3, #12
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc8:	b01d      	add	sp, #116	@ 0x74
 8005bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bce:	2340      	movs	r3, #64	@ 0x40
 8005bd0:	616b      	str	r3, [r5, #20]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bd6:	2320      	movs	r3, #32
 8005bd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005be0:	2330      	movs	r3, #48	@ 0x30
 8005be2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d80 <_svfiprintf_r+0x1e4>
 8005be6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bea:	f04f 0901 	mov.w	r9, #1
 8005bee:	4623      	mov	r3, r4
 8005bf0:	469a      	mov	sl, r3
 8005bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bf6:	b10a      	cbz	r2, 8005bfc <_svfiprintf_r+0x60>
 8005bf8:	2a25      	cmp	r2, #37	@ 0x25
 8005bfa:	d1f9      	bne.n	8005bf0 <_svfiprintf_r+0x54>
 8005bfc:	ebba 0b04 	subs.w	fp, sl, r4
 8005c00:	d00b      	beq.n	8005c1a <_svfiprintf_r+0x7e>
 8005c02:	465b      	mov	r3, fp
 8005c04:	4622      	mov	r2, r4
 8005c06:	4629      	mov	r1, r5
 8005c08:	4638      	mov	r0, r7
 8005c0a:	f7ff ff6b 	bl	8005ae4 <__ssputs_r>
 8005c0e:	3001      	adds	r0, #1
 8005c10:	f000 80a7 	beq.w	8005d62 <_svfiprintf_r+0x1c6>
 8005c14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c16:	445a      	add	r2, fp
 8005c18:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 809f 	beq.w	8005d62 <_svfiprintf_r+0x1c6>
 8005c24:	2300      	movs	r3, #0
 8005c26:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c2e:	f10a 0a01 	add.w	sl, sl, #1
 8005c32:	9304      	str	r3, [sp, #16]
 8005c34:	9307      	str	r3, [sp, #28]
 8005c36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c3c:	4654      	mov	r4, sl
 8005c3e:	2205      	movs	r2, #5
 8005c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c44:	484e      	ldr	r0, [pc, #312]	@ (8005d80 <_svfiprintf_r+0x1e4>)
 8005c46:	f7fa faa3 	bl	8000190 <memchr>
 8005c4a:	9a04      	ldr	r2, [sp, #16]
 8005c4c:	b9d8      	cbnz	r0, 8005c86 <_svfiprintf_r+0xea>
 8005c4e:	06d0      	lsls	r0, r2, #27
 8005c50:	bf44      	itt	mi
 8005c52:	2320      	movmi	r3, #32
 8005c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c58:	0711      	lsls	r1, r2, #28
 8005c5a:	bf44      	itt	mi
 8005c5c:	232b      	movmi	r3, #43	@ 0x2b
 8005c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c62:	f89a 3000 	ldrb.w	r3, [sl]
 8005c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c68:	d015      	beq.n	8005c96 <_svfiprintf_r+0xfa>
 8005c6a:	9a07      	ldr	r2, [sp, #28]
 8005c6c:	4654      	mov	r4, sl
 8005c6e:	2000      	movs	r0, #0
 8005c70:	f04f 0c0a 	mov.w	ip, #10
 8005c74:	4621      	mov	r1, r4
 8005c76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c7a:	3b30      	subs	r3, #48	@ 0x30
 8005c7c:	2b09      	cmp	r3, #9
 8005c7e:	d94b      	bls.n	8005d18 <_svfiprintf_r+0x17c>
 8005c80:	b1b0      	cbz	r0, 8005cb0 <_svfiprintf_r+0x114>
 8005c82:	9207      	str	r2, [sp, #28]
 8005c84:	e014      	b.n	8005cb0 <_svfiprintf_r+0x114>
 8005c86:	eba0 0308 	sub.w	r3, r0, r8
 8005c8a:	fa09 f303 	lsl.w	r3, r9, r3
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	9304      	str	r3, [sp, #16]
 8005c92:	46a2      	mov	sl, r4
 8005c94:	e7d2      	b.n	8005c3c <_svfiprintf_r+0xa0>
 8005c96:	9b03      	ldr	r3, [sp, #12]
 8005c98:	1d19      	adds	r1, r3, #4
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	9103      	str	r1, [sp, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bfbb      	ittet	lt
 8005ca2:	425b      	neglt	r3, r3
 8005ca4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ca8:	9307      	strge	r3, [sp, #28]
 8005caa:	9307      	strlt	r3, [sp, #28]
 8005cac:	bfb8      	it	lt
 8005cae:	9204      	strlt	r2, [sp, #16]
 8005cb0:	7823      	ldrb	r3, [r4, #0]
 8005cb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cb4:	d10a      	bne.n	8005ccc <_svfiprintf_r+0x130>
 8005cb6:	7863      	ldrb	r3, [r4, #1]
 8005cb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cba:	d132      	bne.n	8005d22 <_svfiprintf_r+0x186>
 8005cbc:	9b03      	ldr	r3, [sp, #12]
 8005cbe:	1d1a      	adds	r2, r3, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	9203      	str	r2, [sp, #12]
 8005cc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cc8:	3402      	adds	r4, #2
 8005cca:	9305      	str	r3, [sp, #20]
 8005ccc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d90 <_svfiprintf_r+0x1f4>
 8005cd0:	7821      	ldrb	r1, [r4, #0]
 8005cd2:	2203      	movs	r2, #3
 8005cd4:	4650      	mov	r0, sl
 8005cd6:	f7fa fa5b 	bl	8000190 <memchr>
 8005cda:	b138      	cbz	r0, 8005cec <_svfiprintf_r+0x150>
 8005cdc:	9b04      	ldr	r3, [sp, #16]
 8005cde:	eba0 000a 	sub.w	r0, r0, sl
 8005ce2:	2240      	movs	r2, #64	@ 0x40
 8005ce4:	4082      	lsls	r2, r0
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	3401      	adds	r4, #1
 8005cea:	9304      	str	r3, [sp, #16]
 8005cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf0:	4824      	ldr	r0, [pc, #144]	@ (8005d84 <_svfiprintf_r+0x1e8>)
 8005cf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cf6:	2206      	movs	r2, #6
 8005cf8:	f7fa fa4a 	bl	8000190 <memchr>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d036      	beq.n	8005d6e <_svfiprintf_r+0x1d2>
 8005d00:	4b21      	ldr	r3, [pc, #132]	@ (8005d88 <_svfiprintf_r+0x1ec>)
 8005d02:	bb1b      	cbnz	r3, 8005d4c <_svfiprintf_r+0x1b0>
 8005d04:	9b03      	ldr	r3, [sp, #12]
 8005d06:	3307      	adds	r3, #7
 8005d08:	f023 0307 	bic.w	r3, r3, #7
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	9303      	str	r3, [sp, #12]
 8005d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d12:	4433      	add	r3, r6
 8005d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d16:	e76a      	b.n	8005bee <_svfiprintf_r+0x52>
 8005d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	2001      	movs	r0, #1
 8005d20:	e7a8      	b.n	8005c74 <_svfiprintf_r+0xd8>
 8005d22:	2300      	movs	r3, #0
 8005d24:	3401      	adds	r4, #1
 8005d26:	9305      	str	r3, [sp, #20]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	f04f 0c0a 	mov.w	ip, #10
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d34:	3a30      	subs	r2, #48	@ 0x30
 8005d36:	2a09      	cmp	r2, #9
 8005d38:	d903      	bls.n	8005d42 <_svfiprintf_r+0x1a6>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0c6      	beq.n	8005ccc <_svfiprintf_r+0x130>
 8005d3e:	9105      	str	r1, [sp, #20]
 8005d40:	e7c4      	b.n	8005ccc <_svfiprintf_r+0x130>
 8005d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d46:	4604      	mov	r4, r0
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e7f0      	b.n	8005d2e <_svfiprintf_r+0x192>
 8005d4c:	ab03      	add	r3, sp, #12
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	462a      	mov	r2, r5
 8005d52:	4b0e      	ldr	r3, [pc, #56]	@ (8005d8c <_svfiprintf_r+0x1f0>)
 8005d54:	a904      	add	r1, sp, #16
 8005d56:	4638      	mov	r0, r7
 8005d58:	f3af 8000 	nop.w
 8005d5c:	1c42      	adds	r2, r0, #1
 8005d5e:	4606      	mov	r6, r0
 8005d60:	d1d6      	bne.n	8005d10 <_svfiprintf_r+0x174>
 8005d62:	89ab      	ldrh	r3, [r5, #12]
 8005d64:	065b      	lsls	r3, r3, #25
 8005d66:	f53f af2d 	bmi.w	8005bc4 <_svfiprintf_r+0x28>
 8005d6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d6c:	e72c      	b.n	8005bc8 <_svfiprintf_r+0x2c>
 8005d6e:	ab03      	add	r3, sp, #12
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	462a      	mov	r2, r5
 8005d74:	4b05      	ldr	r3, [pc, #20]	@ (8005d8c <_svfiprintf_r+0x1f0>)
 8005d76:	a904      	add	r1, sp, #16
 8005d78:	4638      	mov	r0, r7
 8005d7a:	f000 f879 	bl	8005e70 <_printf_i>
 8005d7e:	e7ed      	b.n	8005d5c <_svfiprintf_r+0x1c0>
 8005d80:	08006310 	.word	0x08006310
 8005d84:	0800631a 	.word	0x0800631a
 8005d88:	00000000 	.word	0x00000000
 8005d8c:	08005ae5 	.word	0x08005ae5
 8005d90:	08006316 	.word	0x08006316

08005d94 <_printf_common>:
 8005d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d98:	4616      	mov	r6, r2
 8005d9a:	4698      	mov	r8, r3
 8005d9c:	688a      	ldr	r2, [r1, #8]
 8005d9e:	690b      	ldr	r3, [r1, #16]
 8005da0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005da4:	4293      	cmp	r3, r2
 8005da6:	bfb8      	it	lt
 8005da8:	4613      	movlt	r3, r2
 8005daa:	6033      	str	r3, [r6, #0]
 8005dac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005db0:	4607      	mov	r7, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	b10a      	cbz	r2, 8005dba <_printf_common+0x26>
 8005db6:	3301      	adds	r3, #1
 8005db8:	6033      	str	r3, [r6, #0]
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	0699      	lsls	r1, r3, #26
 8005dbe:	bf42      	ittt	mi
 8005dc0:	6833      	ldrmi	r3, [r6, #0]
 8005dc2:	3302      	addmi	r3, #2
 8005dc4:	6033      	strmi	r3, [r6, #0]
 8005dc6:	6825      	ldr	r5, [r4, #0]
 8005dc8:	f015 0506 	ands.w	r5, r5, #6
 8005dcc:	d106      	bne.n	8005ddc <_printf_common+0x48>
 8005dce:	f104 0a19 	add.w	sl, r4, #25
 8005dd2:	68e3      	ldr	r3, [r4, #12]
 8005dd4:	6832      	ldr	r2, [r6, #0]
 8005dd6:	1a9b      	subs	r3, r3, r2
 8005dd8:	42ab      	cmp	r3, r5
 8005dda:	dc26      	bgt.n	8005e2a <_printf_common+0x96>
 8005ddc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	3b00      	subs	r3, #0
 8005de4:	bf18      	it	ne
 8005de6:	2301      	movne	r3, #1
 8005de8:	0692      	lsls	r2, r2, #26
 8005dea:	d42b      	bmi.n	8005e44 <_printf_common+0xb0>
 8005dec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005df0:	4641      	mov	r1, r8
 8005df2:	4638      	mov	r0, r7
 8005df4:	47c8      	blx	r9
 8005df6:	3001      	adds	r0, #1
 8005df8:	d01e      	beq.n	8005e38 <_printf_common+0xa4>
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	6922      	ldr	r2, [r4, #16]
 8005dfe:	f003 0306 	and.w	r3, r3, #6
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	bf02      	ittt	eq
 8005e06:	68e5      	ldreq	r5, [r4, #12]
 8005e08:	6833      	ldreq	r3, [r6, #0]
 8005e0a:	1aed      	subeq	r5, r5, r3
 8005e0c:	68a3      	ldr	r3, [r4, #8]
 8005e0e:	bf0c      	ite	eq
 8005e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e14:	2500      	movne	r5, #0
 8005e16:	4293      	cmp	r3, r2
 8005e18:	bfc4      	itt	gt
 8005e1a:	1a9b      	subgt	r3, r3, r2
 8005e1c:	18ed      	addgt	r5, r5, r3
 8005e1e:	2600      	movs	r6, #0
 8005e20:	341a      	adds	r4, #26
 8005e22:	42b5      	cmp	r5, r6
 8005e24:	d11a      	bne.n	8005e5c <_printf_common+0xc8>
 8005e26:	2000      	movs	r0, #0
 8005e28:	e008      	b.n	8005e3c <_printf_common+0xa8>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	4652      	mov	r2, sl
 8005e2e:	4641      	mov	r1, r8
 8005e30:	4638      	mov	r0, r7
 8005e32:	47c8      	blx	r9
 8005e34:	3001      	adds	r0, #1
 8005e36:	d103      	bne.n	8005e40 <_printf_common+0xac>
 8005e38:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e40:	3501      	adds	r5, #1
 8005e42:	e7c6      	b.n	8005dd2 <_printf_common+0x3e>
 8005e44:	18e1      	adds	r1, r4, r3
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	2030      	movs	r0, #48	@ 0x30
 8005e4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e4e:	4422      	add	r2, r4
 8005e50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e58:	3302      	adds	r3, #2
 8005e5a:	e7c7      	b.n	8005dec <_printf_common+0x58>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	4622      	mov	r2, r4
 8005e60:	4641      	mov	r1, r8
 8005e62:	4638      	mov	r0, r7
 8005e64:	47c8      	blx	r9
 8005e66:	3001      	adds	r0, #1
 8005e68:	d0e6      	beq.n	8005e38 <_printf_common+0xa4>
 8005e6a:	3601      	adds	r6, #1
 8005e6c:	e7d9      	b.n	8005e22 <_printf_common+0x8e>
	...

08005e70 <_printf_i>:
 8005e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e74:	7e0f      	ldrb	r7, [r1, #24]
 8005e76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e78:	2f78      	cmp	r7, #120	@ 0x78
 8005e7a:	4691      	mov	r9, r2
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	469a      	mov	sl, r3
 8005e82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e86:	d807      	bhi.n	8005e98 <_printf_i+0x28>
 8005e88:	2f62      	cmp	r7, #98	@ 0x62
 8005e8a:	d80a      	bhi.n	8005ea2 <_printf_i+0x32>
 8005e8c:	2f00      	cmp	r7, #0
 8005e8e:	f000 80d2 	beq.w	8006036 <_printf_i+0x1c6>
 8005e92:	2f58      	cmp	r7, #88	@ 0x58
 8005e94:	f000 80b9 	beq.w	800600a <_printf_i+0x19a>
 8005e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ea0:	e03a      	b.n	8005f18 <_printf_i+0xa8>
 8005ea2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ea6:	2b15      	cmp	r3, #21
 8005ea8:	d8f6      	bhi.n	8005e98 <_printf_i+0x28>
 8005eaa:	a101      	add	r1, pc, #4	@ (adr r1, 8005eb0 <_printf_i+0x40>)
 8005eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005eb0:	08005f09 	.word	0x08005f09
 8005eb4:	08005f1d 	.word	0x08005f1d
 8005eb8:	08005e99 	.word	0x08005e99
 8005ebc:	08005e99 	.word	0x08005e99
 8005ec0:	08005e99 	.word	0x08005e99
 8005ec4:	08005e99 	.word	0x08005e99
 8005ec8:	08005f1d 	.word	0x08005f1d
 8005ecc:	08005e99 	.word	0x08005e99
 8005ed0:	08005e99 	.word	0x08005e99
 8005ed4:	08005e99 	.word	0x08005e99
 8005ed8:	08005e99 	.word	0x08005e99
 8005edc:	0800601d 	.word	0x0800601d
 8005ee0:	08005f47 	.word	0x08005f47
 8005ee4:	08005fd7 	.word	0x08005fd7
 8005ee8:	08005e99 	.word	0x08005e99
 8005eec:	08005e99 	.word	0x08005e99
 8005ef0:	0800603f 	.word	0x0800603f
 8005ef4:	08005e99 	.word	0x08005e99
 8005ef8:	08005f47 	.word	0x08005f47
 8005efc:	08005e99 	.word	0x08005e99
 8005f00:	08005e99 	.word	0x08005e99
 8005f04:	08005fdf 	.word	0x08005fdf
 8005f08:	6833      	ldr	r3, [r6, #0]
 8005f0a:	1d1a      	adds	r2, r3, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6032      	str	r2, [r6, #0]
 8005f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e09d      	b.n	8006058 <_printf_i+0x1e8>
 8005f1c:	6833      	ldr	r3, [r6, #0]
 8005f1e:	6820      	ldr	r0, [r4, #0]
 8005f20:	1d19      	adds	r1, r3, #4
 8005f22:	6031      	str	r1, [r6, #0]
 8005f24:	0606      	lsls	r6, r0, #24
 8005f26:	d501      	bpl.n	8005f2c <_printf_i+0xbc>
 8005f28:	681d      	ldr	r5, [r3, #0]
 8005f2a:	e003      	b.n	8005f34 <_printf_i+0xc4>
 8005f2c:	0645      	lsls	r5, r0, #25
 8005f2e:	d5fb      	bpl.n	8005f28 <_printf_i+0xb8>
 8005f30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f34:	2d00      	cmp	r5, #0
 8005f36:	da03      	bge.n	8005f40 <_printf_i+0xd0>
 8005f38:	232d      	movs	r3, #45	@ 0x2d
 8005f3a:	426d      	negs	r5, r5
 8005f3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f40:	4859      	ldr	r0, [pc, #356]	@ (80060a8 <_printf_i+0x238>)
 8005f42:	230a      	movs	r3, #10
 8005f44:	e011      	b.n	8005f6a <_printf_i+0xfa>
 8005f46:	6821      	ldr	r1, [r4, #0]
 8005f48:	6833      	ldr	r3, [r6, #0]
 8005f4a:	0608      	lsls	r0, r1, #24
 8005f4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f50:	d402      	bmi.n	8005f58 <_printf_i+0xe8>
 8005f52:	0649      	lsls	r1, r1, #25
 8005f54:	bf48      	it	mi
 8005f56:	b2ad      	uxthmi	r5, r5
 8005f58:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f5a:	4853      	ldr	r0, [pc, #332]	@ (80060a8 <_printf_i+0x238>)
 8005f5c:	6033      	str	r3, [r6, #0]
 8005f5e:	bf14      	ite	ne
 8005f60:	230a      	movne	r3, #10
 8005f62:	2308      	moveq	r3, #8
 8005f64:	2100      	movs	r1, #0
 8005f66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f6a:	6866      	ldr	r6, [r4, #4]
 8005f6c:	60a6      	str	r6, [r4, #8]
 8005f6e:	2e00      	cmp	r6, #0
 8005f70:	bfa2      	ittt	ge
 8005f72:	6821      	ldrge	r1, [r4, #0]
 8005f74:	f021 0104 	bicge.w	r1, r1, #4
 8005f78:	6021      	strge	r1, [r4, #0]
 8005f7a:	b90d      	cbnz	r5, 8005f80 <_printf_i+0x110>
 8005f7c:	2e00      	cmp	r6, #0
 8005f7e:	d04b      	beq.n	8006018 <_printf_i+0x1a8>
 8005f80:	4616      	mov	r6, r2
 8005f82:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f86:	fb03 5711 	mls	r7, r3, r1, r5
 8005f8a:	5dc7      	ldrb	r7, [r0, r7]
 8005f8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f90:	462f      	mov	r7, r5
 8005f92:	42bb      	cmp	r3, r7
 8005f94:	460d      	mov	r5, r1
 8005f96:	d9f4      	bls.n	8005f82 <_printf_i+0x112>
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d10b      	bne.n	8005fb4 <_printf_i+0x144>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	07df      	lsls	r7, r3, #31
 8005fa0:	d508      	bpl.n	8005fb4 <_printf_i+0x144>
 8005fa2:	6923      	ldr	r3, [r4, #16]
 8005fa4:	6861      	ldr	r1, [r4, #4]
 8005fa6:	4299      	cmp	r1, r3
 8005fa8:	bfde      	ittt	le
 8005faa:	2330      	movle	r3, #48	@ 0x30
 8005fac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fb4:	1b92      	subs	r2, r2, r6
 8005fb6:	6122      	str	r2, [r4, #16]
 8005fb8:	f8cd a000 	str.w	sl, [sp]
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	aa03      	add	r2, sp, #12
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	f7ff fee6 	bl	8005d94 <_printf_common>
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d14a      	bne.n	8006062 <_printf_i+0x1f2>
 8005fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd0:	b004      	add	sp, #16
 8005fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	f043 0320 	orr.w	r3, r3, #32
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	4833      	ldr	r0, [pc, #204]	@ (80060ac <_printf_i+0x23c>)
 8005fe0:	2778      	movs	r7, #120	@ 0x78
 8005fe2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	6831      	ldr	r1, [r6, #0]
 8005fea:	061f      	lsls	r7, r3, #24
 8005fec:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ff0:	d402      	bmi.n	8005ff8 <_printf_i+0x188>
 8005ff2:	065f      	lsls	r7, r3, #25
 8005ff4:	bf48      	it	mi
 8005ff6:	b2ad      	uxthmi	r5, r5
 8005ff8:	6031      	str	r1, [r6, #0]
 8005ffa:	07d9      	lsls	r1, r3, #31
 8005ffc:	bf44      	itt	mi
 8005ffe:	f043 0320 	orrmi.w	r3, r3, #32
 8006002:	6023      	strmi	r3, [r4, #0]
 8006004:	b11d      	cbz	r5, 800600e <_printf_i+0x19e>
 8006006:	2310      	movs	r3, #16
 8006008:	e7ac      	b.n	8005f64 <_printf_i+0xf4>
 800600a:	4827      	ldr	r0, [pc, #156]	@ (80060a8 <_printf_i+0x238>)
 800600c:	e7e9      	b.n	8005fe2 <_printf_i+0x172>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	f023 0320 	bic.w	r3, r3, #32
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	e7f6      	b.n	8006006 <_printf_i+0x196>
 8006018:	4616      	mov	r6, r2
 800601a:	e7bd      	b.n	8005f98 <_printf_i+0x128>
 800601c:	6833      	ldr	r3, [r6, #0]
 800601e:	6825      	ldr	r5, [r4, #0]
 8006020:	6961      	ldr	r1, [r4, #20]
 8006022:	1d18      	adds	r0, r3, #4
 8006024:	6030      	str	r0, [r6, #0]
 8006026:	062e      	lsls	r6, r5, #24
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	d501      	bpl.n	8006030 <_printf_i+0x1c0>
 800602c:	6019      	str	r1, [r3, #0]
 800602e:	e002      	b.n	8006036 <_printf_i+0x1c6>
 8006030:	0668      	lsls	r0, r5, #25
 8006032:	d5fb      	bpl.n	800602c <_printf_i+0x1bc>
 8006034:	8019      	strh	r1, [r3, #0]
 8006036:	2300      	movs	r3, #0
 8006038:	6123      	str	r3, [r4, #16]
 800603a:	4616      	mov	r6, r2
 800603c:	e7bc      	b.n	8005fb8 <_printf_i+0x148>
 800603e:	6833      	ldr	r3, [r6, #0]
 8006040:	1d1a      	adds	r2, r3, #4
 8006042:	6032      	str	r2, [r6, #0]
 8006044:	681e      	ldr	r6, [r3, #0]
 8006046:	6862      	ldr	r2, [r4, #4]
 8006048:	2100      	movs	r1, #0
 800604a:	4630      	mov	r0, r6
 800604c:	f7fa f8a0 	bl	8000190 <memchr>
 8006050:	b108      	cbz	r0, 8006056 <_printf_i+0x1e6>
 8006052:	1b80      	subs	r0, r0, r6
 8006054:	6060      	str	r0, [r4, #4]
 8006056:	6863      	ldr	r3, [r4, #4]
 8006058:	6123      	str	r3, [r4, #16]
 800605a:	2300      	movs	r3, #0
 800605c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006060:	e7aa      	b.n	8005fb8 <_printf_i+0x148>
 8006062:	6923      	ldr	r3, [r4, #16]
 8006064:	4632      	mov	r2, r6
 8006066:	4649      	mov	r1, r9
 8006068:	4640      	mov	r0, r8
 800606a:	47d0      	blx	sl
 800606c:	3001      	adds	r0, #1
 800606e:	d0ad      	beq.n	8005fcc <_printf_i+0x15c>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	079b      	lsls	r3, r3, #30
 8006074:	d413      	bmi.n	800609e <_printf_i+0x22e>
 8006076:	68e0      	ldr	r0, [r4, #12]
 8006078:	9b03      	ldr	r3, [sp, #12]
 800607a:	4298      	cmp	r0, r3
 800607c:	bfb8      	it	lt
 800607e:	4618      	movlt	r0, r3
 8006080:	e7a6      	b.n	8005fd0 <_printf_i+0x160>
 8006082:	2301      	movs	r3, #1
 8006084:	4632      	mov	r2, r6
 8006086:	4649      	mov	r1, r9
 8006088:	4640      	mov	r0, r8
 800608a:	47d0      	blx	sl
 800608c:	3001      	adds	r0, #1
 800608e:	d09d      	beq.n	8005fcc <_printf_i+0x15c>
 8006090:	3501      	adds	r5, #1
 8006092:	68e3      	ldr	r3, [r4, #12]
 8006094:	9903      	ldr	r1, [sp, #12]
 8006096:	1a5b      	subs	r3, r3, r1
 8006098:	42ab      	cmp	r3, r5
 800609a:	dcf2      	bgt.n	8006082 <_printf_i+0x212>
 800609c:	e7eb      	b.n	8006076 <_printf_i+0x206>
 800609e:	2500      	movs	r5, #0
 80060a0:	f104 0619 	add.w	r6, r4, #25
 80060a4:	e7f5      	b.n	8006092 <_printf_i+0x222>
 80060a6:	bf00      	nop
 80060a8:	08006321 	.word	0x08006321
 80060ac:	08006332 	.word	0x08006332

080060b0 <memmove>:
 80060b0:	4288      	cmp	r0, r1
 80060b2:	b510      	push	{r4, lr}
 80060b4:	eb01 0402 	add.w	r4, r1, r2
 80060b8:	d902      	bls.n	80060c0 <memmove+0x10>
 80060ba:	4284      	cmp	r4, r0
 80060bc:	4623      	mov	r3, r4
 80060be:	d807      	bhi.n	80060d0 <memmove+0x20>
 80060c0:	1e43      	subs	r3, r0, #1
 80060c2:	42a1      	cmp	r1, r4
 80060c4:	d008      	beq.n	80060d8 <memmove+0x28>
 80060c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060ce:	e7f8      	b.n	80060c2 <memmove+0x12>
 80060d0:	4402      	add	r2, r0
 80060d2:	4601      	mov	r1, r0
 80060d4:	428a      	cmp	r2, r1
 80060d6:	d100      	bne.n	80060da <memmove+0x2a>
 80060d8:	bd10      	pop	{r4, pc}
 80060da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060e2:	e7f7      	b.n	80060d4 <memmove+0x24>

080060e4 <_sbrk_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4d06      	ldr	r5, [pc, #24]	@ (8006100 <_sbrk_r+0x1c>)
 80060e8:	2300      	movs	r3, #0
 80060ea:	4604      	mov	r4, r0
 80060ec:	4608      	mov	r0, r1
 80060ee:	602b      	str	r3, [r5, #0]
 80060f0:	f7fa ff0a 	bl	8000f08 <_sbrk>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	d102      	bne.n	80060fe <_sbrk_r+0x1a>
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	b103      	cbz	r3, 80060fe <_sbrk_r+0x1a>
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	bd38      	pop	{r3, r4, r5, pc}
 8006100:	200002e0 	.word	0x200002e0

08006104 <memcpy>:
 8006104:	440a      	add	r2, r1
 8006106:	4291      	cmp	r1, r2
 8006108:	f100 33ff 	add.w	r3, r0, #4294967295
 800610c:	d100      	bne.n	8006110 <memcpy+0xc>
 800610e:	4770      	bx	lr
 8006110:	b510      	push	{r4, lr}
 8006112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800611a:	4291      	cmp	r1, r2
 800611c:	d1f9      	bne.n	8006112 <memcpy+0xe>
 800611e:	bd10      	pop	{r4, pc}

08006120 <_realloc_r>:
 8006120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006124:	4680      	mov	r8, r0
 8006126:	4615      	mov	r5, r2
 8006128:	460c      	mov	r4, r1
 800612a:	b921      	cbnz	r1, 8006136 <_realloc_r+0x16>
 800612c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006130:	4611      	mov	r1, r2
 8006132:	f7ff bc4b 	b.w	80059cc <_malloc_r>
 8006136:	b92a      	cbnz	r2, 8006144 <_realloc_r+0x24>
 8006138:	f7ff fbdc 	bl	80058f4 <_free_r>
 800613c:	2400      	movs	r4, #0
 800613e:	4620      	mov	r0, r4
 8006140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006144:	f000 f81a 	bl	800617c <_malloc_usable_size_r>
 8006148:	4285      	cmp	r5, r0
 800614a:	4606      	mov	r6, r0
 800614c:	d802      	bhi.n	8006154 <_realloc_r+0x34>
 800614e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006152:	d8f4      	bhi.n	800613e <_realloc_r+0x1e>
 8006154:	4629      	mov	r1, r5
 8006156:	4640      	mov	r0, r8
 8006158:	f7ff fc38 	bl	80059cc <_malloc_r>
 800615c:	4607      	mov	r7, r0
 800615e:	2800      	cmp	r0, #0
 8006160:	d0ec      	beq.n	800613c <_realloc_r+0x1c>
 8006162:	42b5      	cmp	r5, r6
 8006164:	462a      	mov	r2, r5
 8006166:	4621      	mov	r1, r4
 8006168:	bf28      	it	cs
 800616a:	4632      	movcs	r2, r6
 800616c:	f7ff ffca 	bl	8006104 <memcpy>
 8006170:	4621      	mov	r1, r4
 8006172:	4640      	mov	r0, r8
 8006174:	f7ff fbbe 	bl	80058f4 <_free_r>
 8006178:	463c      	mov	r4, r7
 800617a:	e7e0      	b.n	800613e <_realloc_r+0x1e>

0800617c <_malloc_usable_size_r>:
 800617c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006180:	1f18      	subs	r0, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	bfbc      	itt	lt
 8006186:	580b      	ldrlt	r3, [r1, r0]
 8006188:	18c0      	addlt	r0, r0, r3
 800618a:	4770      	bx	lr

0800618c <_init>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	bf00      	nop
 8006190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006192:	bc08      	pop	{r3}
 8006194:	469e      	mov	lr, r3
 8006196:	4770      	bx	lr

08006198 <_fini>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	bf00      	nop
 800619c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619e:	bc08      	pop	{r3}
 80061a0:	469e      	mov	lr, r3
 80061a2:	4770      	bx	lr
