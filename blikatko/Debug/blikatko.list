
blikatko.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003678  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080037b4  080037b4  000047b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080038ac  080038ac  000048ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080038b4  080038b4  000048b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080038b8  080038b8  000048b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000028  20000008  080038bc  00005008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c4  20000030  080038e4  00005030  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200000f4  080038e4  000050f4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00005030  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e7a3  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ecc  00000000  00000000  00013803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001190  00000000  00000000  000156d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d56  00000000  00000000  00016860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021436  00000000  00000000  000175b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e9bb  00000000  00000000  000389ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d6689  00000000  00000000  000473a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0011da30  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000048dc  00000000  00000000  0011da74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00122350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000030 	.word	0x20000030
 8000158:	00000000 	.word	0x00000000
 800015c:	0800379c 	.word	0x0800379c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000034 	.word	0x20000034
 8000178:	0800379c 	.word	0x0800379c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96a 	b.w	8000468 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fa1f f68c 	uxth.w	r6, ip
 80001e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ea:	fb07 1114 	mls	r1, r7, r4, r1
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000202:	f080 8112 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810f 	bls.w	800042a <__udivmoddi4+0x27e>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fa1f f38e 	uxth.w	r3, lr
 8000216:	fbb1 f0f7 	udiv	r0, r1, r7
 800021a:	fb07 1110 	mls	r1, r7, r0, r1
 800021e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000222:	fb00 f606 	mul.w	r6, r0, r6
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000232:	f080 80fc 	bcs.w	800042e <__udivmoddi4+0x282>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f9 	bls.w	800042e <__udivmoddi4+0x282>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	1b9b      	subs	r3, r3, r6
 8000242:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000246:	2100      	movs	r1, #0
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80f0 	bcc.w	8000458 <__udivmoddi4+0x2ac>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 8090 	bne.w	80003b0 <__udivmoddi4+0x204>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000298:	fa1f f78c 	uxth.w	r7, ip
 800029c:	2101      	movs	r1, #1
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb08 4416 	mls	r4, r8, r6, r4
 80002aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ae:	fb07 f006 	mul.w	r0, r7, r6
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cd 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80002d2:	fb08 4410 	mls	r4, r8, r0, r4
 80002d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002da:	fb00 f707 	mul.w	r7, r0, r7
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80b0 	bhi.w	8000452 <__udivmoddi4+0x2a6>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0620 	rsb	r6, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 f706 	lsr.w	r7, r2, r6
 8000306:	431f      	orrs	r7, r3
 8000308:	fa20 fc06 	lsr.w	ip, r0, r6
 800030c:	fa04 f301 	lsl.w	r3, r4, r1
 8000310:	ea43 030c 	orr.w	r3, r3, ip
 8000314:	40f4      	lsrs	r4, r6
 8000316:	fa00 f801 	lsl.w	r8, r0, r1
 800031a:	0c38      	lsrs	r0, r7, #16
 800031c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000320:	fbb4 fef0 	udiv	lr, r4, r0
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fb00 441e 	mls	r4, r0, lr, r4
 800032c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000330:	fb0e f90c 	mul.w	r9, lr, ip
 8000334:	45a1      	cmp	r9, r4
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000342:	f080 8084 	bcs.w	800044e <__udivmoddi4+0x2a2>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f240 8081 	bls.w	800044e <__udivmoddi4+0x2a2>
 800034c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000350:	443c      	add	r4, r7
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	fa1f f983 	uxth.w	r9, r3
 800035a:	fbb4 f3f0 	udiv	r3, r4, r0
 800035e:	fb00 4413 	mls	r4, r0, r3, r4
 8000362:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000366:	fb03 fc0c 	mul.w	ip, r3, ip
 800036a:	45a4      	cmp	ip, r4
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x1d2>
 800036e:	193c      	adds	r4, r7, r4
 8000370:	f103 30ff 	add.w	r0, r3, #4294967295
 8000374:	d267      	bcs.n	8000446 <__udivmoddi4+0x29a>
 8000376:	45a4      	cmp	ip, r4
 8000378:	d965      	bls.n	8000446 <__udivmoddi4+0x29a>
 800037a:	3b02      	subs	r3, #2
 800037c:	443c      	add	r4, r7
 800037e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000382:	fba0 9302 	umull	r9, r3, r0, r2
 8000386:	eba4 040c 	sub.w	r4, r4, ip
 800038a:	429c      	cmp	r4, r3
 800038c:	46ce      	mov	lr, r9
 800038e:	469c      	mov	ip, r3
 8000390:	d351      	bcc.n	8000436 <__udivmoddi4+0x28a>
 8000392:	d04e      	beq.n	8000432 <__udivmoddi4+0x286>
 8000394:	b155      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000396:	ebb8 030e 	subs.w	r3, r8, lr
 800039a:	eb64 040c 	sbc.w	r4, r4, ip
 800039e:	fa04 f606 	lsl.w	r6, r4, r6
 80003a2:	40cb      	lsrs	r3, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e750      	b.n	8000252 <__udivmoddi4+0xa6>
 80003b0:	f1c2 0320 	rsb	r3, r2, #32
 80003b4:	fa20 f103 	lsr.w	r1, r0, r3
 80003b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003bc:	fa24 f303 	lsr.w	r3, r4, r3
 80003c0:	4094      	lsls	r4, r2
 80003c2:	430c      	orrs	r4, r1
 80003c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3110 	mls	r1, r8, r0, r3
 80003d8:	0c23      	lsrs	r3, r4, #16
 80003da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003de:	fb00 f107 	mul.w	r1, r0, r7
 80003e2:	4299      	cmp	r1, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x24c>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ee:	d22c      	bcs.n	800044a <__udivmoddi4+0x29e>
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d92a      	bls.n	800044a <__udivmoddi4+0x29e>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4463      	add	r3, ip
 80003f8:	1a5b      	subs	r3, r3, r1
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000400:	fb08 3311 	mls	r3, r8, r1, r3
 8000404:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000408:	fb01 f307 	mul.w	r3, r1, r7
 800040c:	42a3      	cmp	r3, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x276>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f101 36ff 	add.w	r6, r1, #4294967295
 8000418:	d213      	bcs.n	8000442 <__udivmoddi4+0x296>
 800041a:	42a3      	cmp	r3, r4
 800041c:	d911      	bls.n	8000442 <__udivmoddi4+0x296>
 800041e:	3902      	subs	r1, #2
 8000420:	4464      	add	r4, ip
 8000422:	1ae4      	subs	r4, r4, r3
 8000424:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000428:	e739      	b.n	800029e <__udivmoddi4+0xf2>
 800042a:	4604      	mov	r4, r0
 800042c:	e6f0      	b.n	8000210 <__udivmoddi4+0x64>
 800042e:	4608      	mov	r0, r1
 8000430:	e706      	b.n	8000240 <__udivmoddi4+0x94>
 8000432:	45c8      	cmp	r8, r9
 8000434:	d2ae      	bcs.n	8000394 <__udivmoddi4+0x1e8>
 8000436:	ebb9 0e02 	subs.w	lr, r9, r2
 800043a:	eb63 0c07 	sbc.w	ip, r3, r7
 800043e:	3801      	subs	r0, #1
 8000440:	e7a8      	b.n	8000394 <__udivmoddi4+0x1e8>
 8000442:	4631      	mov	r1, r6
 8000444:	e7ed      	b.n	8000422 <__udivmoddi4+0x276>
 8000446:	4603      	mov	r3, r0
 8000448:	e799      	b.n	800037e <__udivmoddi4+0x1d2>
 800044a:	4630      	mov	r0, r6
 800044c:	e7d4      	b.n	80003f8 <__udivmoddi4+0x24c>
 800044e:	46d6      	mov	lr, sl
 8000450:	e77f      	b.n	8000352 <__udivmoddi4+0x1a6>
 8000452:	4463      	add	r3, ip
 8000454:	3802      	subs	r0, #2
 8000456:	e74d      	b.n	80002f4 <__udivmoddi4+0x148>
 8000458:	4606      	mov	r6, r0
 800045a:	4623      	mov	r3, r4
 800045c:	4608      	mov	r0, r1
 800045e:	e70f      	b.n	8000280 <__udivmoddi4+0xd4>
 8000460:	3e02      	subs	r6, #2
 8000462:	4463      	add	r3, ip
 8000464:	e730      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000466:	bf00      	nop

08000468 <__aeabi_idiv0>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000478:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800047a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4013      	ands	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000490:	68fb      	ldr	r3, [r7, #12]
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
	...

080004a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a4:	f000 fb40 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a8:	f000 f840 	bl	800052c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004ac:	f000 f896 	bl	80005dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b0:	f000 f8b2 	bl	8000618 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80004b4:	2000      	movs	r0, #0
 80004b6:	f000 f9fb 	bl	80008b0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80004ba:	2001      	movs	r0, #1
 80004bc:	f000 f9f8 	bl	80008b0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80004c0:	2002      	movs	r0, #2
 80004c2:	f000 f9f5 	bl	80008b0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80004c6:	2101      	movs	r1, #1
 80004c8:	2000      	movs	r0, #0
 80004ca:	f000 fa2b 	bl	8000924 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80004ce:	2101      	movs	r1, #1
 80004d0:	2001      	movs	r0, #1
 80004d2:	f000 fa27 	bl	8000924 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80004d6:	2101      	movs	r1, #1
 80004d8:	2002      	movs	r0, #2
 80004da:	f000 fa23 	bl	8000924 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80004de:	4b11      	ldr	r3, [pc, #68]	@ (8000524 <main+0x84>)
 80004e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004e4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80004e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <main+0x84>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80004ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000524 <main+0x84>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80004f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <main+0x84>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80004f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000524 <main+0x84>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80004fe:	4909      	ldr	r1, [pc, #36]	@ (8000524 <main+0x84>)
 8000500:	2000      	movs	r0, #0
 8000502:	f000 fa7f 	bl	8000a04 <BSP_COM_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <main+0x70>
  {
    Error_Handler();
 800050c:	f000 f8c0 	bl	8000690 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000510:	2101      	movs	r1, #1
 8000512:	4805      	ldr	r0, [pc, #20]	@ (8000528 <main+0x88>)
 8000514:	f000 fe4a 	bl	80011ac <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000518:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800051c:	f000 fb8a 	bl	8000c34 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000520:	bf00      	nop
 8000522:	e7f5      	b.n	8000510 <main+0x70>
 8000524:	2000004c 	.word	0x2000004c
 8000528:	48000400 	.word	0x48000400

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b09a      	sub	sp, #104	@ 0x68
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2248      	movs	r2, #72	@ 0x48
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f003 f901 	bl	8003742 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000552:	4b21      	ldr	r3, [pc, #132]	@ (80005d8 <SystemClock_Config+0xac>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800055a:	4a1f      	ldr	r2, [pc, #124]	@ (80005d8 <SystemClock_Config+0xac>)
 800055c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000560:	6013      	str	r3, [r2, #0]
 8000562:	4b1d      	ldr	r3, [pc, #116]	@ (80005d8 <SystemClock_Config+0xac>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800056e:	2322      	movs	r3, #34	@ 0x22
 8000570:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000572:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2340      	movs	r3, #64	@ 0x40
 800057e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000580:	2300      	movs	r3, #0
 8000582:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000584:	23a0      	movs	r3, #160	@ 0xa0
 8000586:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000588:	2300      	movs	r3, #0
 800058a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f001 f9dd 	bl	8001950 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800059c:	f000 f878 	bl	8000690 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005a0:	236f      	movs	r3, #111	@ 0x6f
 80005a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2101      	movs	r1, #1
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fd39 	bl	8002038 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005cc:	f000 f860 	bl	8000690 <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3768      	adds	r7, #104	@ 0x68
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	58000400 	.word	0x58000400

080005dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2250      	movs	r2, #80	@ 0x50
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 f8aa 	bl	8003742 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80005ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 f957 	bl	80028b2 <HAL_RCCEx_PeriphCLKConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800060a:	f000 f841 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	@ 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062c:	2004      	movs	r0, #4
 800062e:	f7ff ff1d 	bl	800046c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	2002      	movs	r0, #2
 8000634:	f7ff ff1a 	bl	800046c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000638:	2001      	movs	r0, #1
 800063a:	f7ff ff17 	bl	800046c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2101      	movs	r1, #1
 8000642:	4812      	ldr	r0, [pc, #72]	@ (800068c <MX_GPIO_Init+0x74>)
 8000644:	f000 fd9a 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000648:	2301      	movs	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	480b      	ldr	r0, [pc, #44]	@ (800068c <MX_GPIO_Init+0x74>)
 800065e:	f000 fc1d 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000662:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000666:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000674:	230a      	movs	r3, #10
 8000676:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4619      	mov	r1, r3
 800067c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000680:	f000 fc0c 	bl	8000e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000684:	bf00      	nop
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	48000400 	.word	0x48000400

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <Error_Handler+0x8>

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006ae:	bf00      	nop
 80006b0:	e7fd      	b.n	80006ae <NMI_Handler+0x4>

080006b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b6:	bf00      	nop
 80006b8:	e7fd      	b.n	80006b6 <HardFault_Handler+0x4>

080006ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006be:	bf00      	nop
 80006c0:	e7fd      	b.n	80006be <MemManage_Handler+0x4>

080006c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c6:	bf00      	nop
 80006c8:	e7fd      	b.n	80006c6 <BusFault_Handler+0x4>

080006ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ce:	bf00      	nop
 80006d0:	e7fd      	b.n	80006ce <UsageFault_Handler+0x4>

080006d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000700:	f000 fa6c 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 800070c:	2001      	movs	r0, #1
 800070e:	f000 fd67 	bl	80011e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}

08000716 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 800071a:	2002      	movs	r0, #2
 800071c:	f000 fd60 	bl	80011e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8000728:	2010      	movs	r0, #16
 800072a:	f000 fd59 	bl	80011e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000738:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <SystemInit+0x98>)
 800073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800073e:	4a23      	ldr	r2, [pc, #140]	@ (80007cc <SystemInit+0x98>)
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800075c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000760:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <SystemInit+0x9c>)
 800076e:	4013      	ands	r3, r2
 8000770:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800077a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800077e:	f023 0305 	bic.w	r3, r3, #5
 8000782:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800078a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800078e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000792:	f023 0301 	bic.w	r3, r3, #1
 8000796:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800079a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800079e:	4a0d      	ldr	r2, [pc, #52]	@ (80007d4 <SystemInit+0xa0>)
 80007a0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80007a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007a6:	4a0b      	ldr	r2, [pc, #44]	@ (80007d4 <SystemInit+0xa0>)
 80007a8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80007b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000ed00 	.word	0xe000ed00
 80007d0:	faf6fefb 	.word	0xfaf6fefb
 80007d4:	22041000 	.word	0x22041000

080007d8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80007d8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007da:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007dc:	3304      	adds	r3, #4

080007de <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007de:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80007e2:	d3f9      	bcc.n	80007d8 <CopyDataInit>
  bx lr
 80007e4:	4770      	bx	lr

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80007e6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80007e8:	3004      	adds	r0, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80007ea:	4288      	cmp	r0, r1
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>
  bx lr
 80007ee:	4770      	bx	lr

080007f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f0:	480c      	ldr	r0, [pc, #48]	@ (8000824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f4:	f7ff ff9e 	bl	8000734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80007f8:	480b      	ldr	r0, [pc, #44]	@ (8000828 <LoopForever+0x6>)
 80007fa:	490c      	ldr	r1, [pc, #48]	@ (800082c <LoopForever+0xa>)
 80007fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000830 <LoopForever+0xe>)
 80007fe:	2300      	movs	r3, #0
 8000800:	f7ff ffed 	bl	80007de <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000804:	480b      	ldr	r0, [pc, #44]	@ (8000834 <LoopForever+0x12>)
 8000806:	490c      	ldr	r1, [pc, #48]	@ (8000838 <LoopForever+0x16>)
 8000808:	4a0c      	ldr	r2, [pc, #48]	@ (800083c <LoopForever+0x1a>)
 800080a:	2300      	movs	r3, #0
 800080c:	f7ff ffe7 	bl	80007de <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000810:	480b      	ldr	r0, [pc, #44]	@ (8000840 <LoopForever+0x1e>)
 8000812:	490c      	ldr	r1, [pc, #48]	@ (8000844 <LoopForever+0x22>)
 8000814:	2300      	movs	r3, #0
 8000816:	f7ff ffe8 	bl	80007ea <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800081a:	f002 ff9b 	bl	8003754 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800081e:	f7ff fe3f 	bl	80004a0 <main>

08000822 <LoopForever>:

LoopForever:
  b LoopForever
 8000822:	e7fe      	b.n	8000822 <LoopForever>
  ldr   r0, =_estack
 8000824:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000828:	20000008 	.word	0x20000008
 800082c:	20000030 	.word	0x20000030
 8000830:	080038bc 	.word	0x080038bc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000834:	20030000 	.word	0x20030000
 8000838:	20030000 	.word	0x20030000
 800083c:	080038e4 	.word	0x080038e4
  INIT_BSS _sbss, _ebss
 8000840:	20000030 	.word	0x20000030
 8000844:	200000f4 	.word	0x200000f4

08000848 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC1_IRQHandler>

0800084a <LL_AHB2_GRP1_EnableClock>:
{
 800084a:	b480      	push	{r7}
 800084c:	b085      	sub	sp, #20
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000856:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000858:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4313      	orrs	r3, r2
 8000860:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000866:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4013      	ands	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800086e:	68fb      	ldr	r3, [r7, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000888:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800088a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4313      	orrs	r3, r2
 8000892:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000898:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80008ca:	2002      	movs	r0, #2
 80008cc:	f7ff ffbd 	bl	800084a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a12      	ldr	r2, [pc, #72]	@ (800091c <BSP_LED_Init+0x6c>)
 80008d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008d8:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000920 <BSP_LED_Init+0x70>)
 80008ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ee:	f107 020c 	add.w	r2, r7, #12
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fad1 	bl	8000e9c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	4a08      	ldr	r2, [pc, #32]	@ (8000920 <BSP_LED_Init+0x70>)
 80008fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	4a05      	ldr	r2, [pc, #20]	@ (800091c <BSP_LED_Init+0x6c>)
 8000906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	f000 fc35 	bl	800117c <HAL_GPIO_WritePin>
}
 8000912:	bf00      	nop
 8000914:	3720      	adds	r7, #32
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	08003880 	.word	0x08003880
 8000920:	2000000c 	.word	0x2000000c

08000924 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d103      	bne.n	8000952 <BSP_PB_Init+0x2e>
 800094a:	2004      	movs	r0, #4
 800094c:	f7ff ff7d 	bl	800084a <LL_AHB2_GRP1_EnableClock>
 8000950:	e00c      	b.n	800096c <BSP_PB_Init+0x48>
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d103      	bne.n	8000960 <BSP_PB_Init+0x3c>
 8000958:	2008      	movs	r0, #8
 800095a:	f7ff ff76 	bl	800084a <LL_AHB2_GRP1_EnableClock>
 800095e:	e005      	b.n	800096c <BSP_PB_Init+0x48>
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	2b02      	cmp	r3, #2
 8000964:	d102      	bne.n	800096c <BSP_PB_Init+0x48>
 8000966:	2008      	movs	r0, #8
 8000968:	f7ff ff6f 	bl	800084a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d117      	bne.n	80009a2 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4a20      	ldr	r2, [pc, #128]	@ (80009f8 <BSP_PB_Init+0xd4>)
 8000976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097a:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8000980:	2301      	movs	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000984:	2302      	movs	r3, #2
 8000986:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <BSP_PB_Init+0xd8>)
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	f107 020c 	add.w	r2, r7, #12
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fa80 	bl	8000e9c <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 800099c:	2001      	movs	r0, #1
 800099e:	f000 f949 	bl	8000c34 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d123      	bne.n	80009f0 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4a13      	ldr	r2, [pc, #76]	@ (80009f8 <BSP_PB_Init+0xd4>)
 80009ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009b0:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80009b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009ba:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	4a0f      	ldr	r2, [pc, #60]	@ (80009fc <BSP_PB_Init+0xd8>)
 80009c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c4:	f107 020c 	add.w	r2, r7, #12
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fa66 	bl	8000e9c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a00 <BSP_PB_Init+0xdc>)
 80009d4:	5cd3      	ldrb	r3, [r2, r3]
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	2200      	movs	r2, #0
 80009da:	210f      	movs	r1, #15
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fa28 	bl	8000e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4a06      	ldr	r2, [pc, #24]	@ (8000a00 <BSP_PB_Init+0xdc>)
 80009e6:	5cd3      	ldrb	r3, [r2, r3]
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 fa3b 	bl	8000e66 <HAL_NVIC_EnableIRQ>
  }
}
 80009f0:	bf00      	nop
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	08003888 	.word	0x08003888
 80009fc:	20000018 	.word	0x20000018
 8000a00:	08003890 	.word	0x08003890

08000a04 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d903      	bls.n	8000a22 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000a1a:	f06f 0301 	mvn.w	r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	e018      	b.n	8000a54 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2294      	movs	r2, #148	@ 0x94
 8000a26:	fb02 f303 	mul.w	r3, r2, r3
 8000a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <BSP_COM_Init+0x5c>)
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f84a 	bl	8000ac8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2294      	movs	r2, #148	@ 0x94
 8000a38:	fb02 f303 	mul.w	r3, r2, r3
 8000a3c:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <BSP_COM_Init+0x5c>)
 8000a3e:	4413      	add	r3, r2
 8000a40:	6839      	ldr	r1, [r7, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f80e 	bl	8000a64 <MX_LPUART1_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000a4e:	f06f 0303 	mvn.w	r3, #3
 8000a52:	e000      	b.n	8000a56 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000a54:	68fb      	ldr	r3, [r7, #12]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000005c 	.word	0x2000005c

08000a64 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <MX_LPUART1_Init+0x60>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	220c      	movs	r2, #12
 8000a82:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	895b      	ldrh	r3, [r3, #10]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	891b      	ldrh	r3, [r3, #8]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	899b      	ldrh	r3, [r3, #12]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ab0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f002 f9a4 	bl	8002e00 <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000024 	.word	0x20000024

08000ac8 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f7ff feba 	bl	800084a <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f7ff feb7 	bl	800084a <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000adc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000ae0:	f7ff fecc 	bl	800087c <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000ae4:	2340      	movs	r3, #64	@ 0x40
 8000ae6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000af4:	2307      	movs	r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	4809      	ldr	r0, [pc, #36]	@ (8000b24 <COM1_MspInit+0x5c>)
 8000b00:	f000 f9cc 	bl	8000e9c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000b04:	2380      	movs	r3, #128	@ 0x80
 8000b06:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	4803      	ldr	r0, [pc, #12]	@ (8000b24 <COM1_MspInit+0x5c>)
 8000b18:	f000 f9c0 	bl	8000e9c <HAL_GPIO_Init>
}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	48000400 	.word	0x48000400

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <HAL_Init+0x3c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <HAL_Init+0x3c>)
 8000b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f000 f96c 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 f80f 	bl	8000b68 <HAL_InitTick>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	e001      	b.n	8000b5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b56:	f7ff fda1 	bl	800069c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	58004000 	.word	0x58004000

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000b74:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <HAL_InitTick+0x6c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d024      	beq.n	8000bc6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b7c:	f001 fc08 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 8000b80:	4602      	mov	r2, r0
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <HAL_InitTick+0x6c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4619      	mov	r1, r3
 8000b88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f974 	bl	8000e82 <HAL_SYSTICK_Config>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10f      	bne.n	8000bc0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b0f      	cmp	r3, #15
 8000ba4:	d809      	bhi.n	8000bba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	6879      	ldr	r1, [r7, #4]
 8000baa:	f04f 30ff 	mov.w	r0, #4294967295
 8000bae:	f000 f940 	bl	8000e32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb2:	4a09      	ldr	r2, [pc, #36]	@ (8000bd8 <HAL_InitTick+0x70>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	e007      	b.n	8000bca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e004      	b.n	8000bca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
 8000bc4:	e001      	b.n	8000bca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000002c 	.word	0x2000002c
 8000bd8:	20000028 	.word	0x20000028

08000bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2000002c 	.word	0x2000002c
 8000c00:	200000f0 	.word	0x200000f0

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200000f0 	.word	0x200000f0

08000c1c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000c20:	4b03      	ldr	r3, [pc, #12]	@ (8000c30 <HAL_GetTickPrio+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000028 	.word	0x20000028

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3c:	f7ff ffe2 	bl	8000c04 <HAL_GetTick>
 8000c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4c:	d005      	beq.n	8000c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <HAL_Delay+0x44>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5a:	bf00      	nop
 8000c5c:	f7ff ffd2 	bl	8000c04 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d8f7      	bhi.n	8000c5c <HAL_Delay+0x28>
  {
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000002c 	.word	0x2000002c

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	@ (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db0b      	blt.n	8000d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 021f 	and.w	r2, r3, #31
 8000cf8:	4907      	ldr	r1, [pc, #28]	@ (8000d18 <__NVIC_EnableIRQ+0x38>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	2001      	movs	r0, #1
 8000d02:	fa00 f202 	lsl.w	r2, r0, r2
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db0a      	blt.n	8000d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	490c      	ldr	r1, [pc, #48]	@ (8000d68 <__NVIC_SetPriority+0x4c>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	0112      	lsls	r2, r2, #4
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	440b      	add	r3, r1
 8000d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d44:	e00a      	b.n	8000d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4908      	ldr	r1, [pc, #32]	@ (8000d6c <__NVIC_SetPriority+0x50>)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	3b04      	subs	r3, #4
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	761a      	strb	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	@ 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f1c3 0307 	rsb	r3, r3, #7
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	bf28      	it	cs
 8000d8e:	2304      	movcs	r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3304      	adds	r3, #4
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d902      	bls.n	8000da0 <NVIC_EncodePriority+0x30>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3b03      	subs	r3, #3
 8000d9e:	e000      	b.n	8000da2 <NVIC_EncodePriority+0x32>
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	43d9      	mvns	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	4313      	orrs	r3, r2
         );
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3724      	adds	r7, #36	@ 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f7ff ff8e 	bl	8000d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff29 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e40:	f7ff ff40 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	6978      	ldr	r0, [r7, #20]
 8000e4c:	f7ff ff90 	bl	8000d70 <NVIC_EncodePriority>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff5f 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff33 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffa4 	bl	8000dd8 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	e14c      	b.n	8001146 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 813e 	beq.w	8001140 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d005      	beq.n	8000edc <HAL_GPIO_Init+0x40>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d130      	bne.n	8000f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f12:	2201      	movs	r2, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	f003 0201 	and.w	r2, r3, #1
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d017      	beq.n	8000f7a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d123      	bne.n	8000fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	6939      	ldr	r1, [r7, #16]
 8000fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0203 	and.w	r2, r3, #3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 8098 	beq.w	8001140 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001010:	4a54      	ldr	r2, [pc, #336]	@ (8001164 <HAL_GPIO_Init+0x2c8>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800103a:	d019      	beq.n	8001070 <HAL_GPIO_Init+0x1d4>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a4a      	ldr	r2, [pc, #296]	@ (8001168 <HAL_GPIO_Init+0x2cc>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d013      	beq.n	800106c <HAL_GPIO_Init+0x1d0>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a49      	ldr	r2, [pc, #292]	@ (800116c <HAL_GPIO_Init+0x2d0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d00d      	beq.n	8001068 <HAL_GPIO_Init+0x1cc>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a48      	ldr	r2, [pc, #288]	@ (8001170 <HAL_GPIO_Init+0x2d4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d007      	beq.n	8001064 <HAL_GPIO_Init+0x1c8>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a47      	ldr	r2, [pc, #284]	@ (8001174 <HAL_GPIO_Init+0x2d8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d101      	bne.n	8001060 <HAL_GPIO_Init+0x1c4>
 800105c:	2304      	movs	r3, #4
 800105e:	e008      	b.n	8001072 <HAL_GPIO_Init+0x1d6>
 8001060:	2307      	movs	r3, #7
 8001062:	e006      	b.n	8001072 <HAL_GPIO_Init+0x1d6>
 8001064:	2303      	movs	r3, #3
 8001066:	e004      	b.n	8001072 <HAL_GPIO_Init+0x1d6>
 8001068:	2302      	movs	r3, #2
 800106a:	e002      	b.n	8001072 <HAL_GPIO_Init+0x1d6>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <HAL_GPIO_Init+0x1d6>
 8001070:	2300      	movs	r3, #0
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	f002 0203 	and.w	r2, r2, #3
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	4093      	lsls	r3, r2
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001082:	4938      	ldr	r1, [pc, #224]	@ (8001164 <HAL_GPIO_Init+0x2c8>)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001090:	4b39      	ldr	r3, [pc, #228]	@ (8001178 <HAL_GPIO_Init+0x2dc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b4:	4a30      	ldr	r2, [pc, #192]	@ (8001178 <HAL_GPIO_Init+0x2dc>)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001178 <HAL_GPIO_Init+0x2dc>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010de:	4a26      	ldr	r2, [pc, #152]	@ (8001178 <HAL_GPIO_Init+0x2dc>)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010e4:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <HAL_GPIO_Init+0x2dc>)
 80010e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800110a:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <HAL_GPIO_Init+0x2dc>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <HAL_GPIO_Init+0x2dc>)
 8001114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001138:	4a0f      	ldr	r2, [pc, #60]	@ (8001178 <HAL_GPIO_Init+0x2dc>)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3301      	adds	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	fa22 f303 	lsr.w	r3, r2, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	f47f aeab 	bne.w	8000eac <HAL_GPIO_Init+0x10>
  }
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40010000 	.word	0x40010000
 8001168:	48000400 	.word	0x48000400
 800116c:	48000800 	.word	0x48000800
 8001170:	48000c00 	.word	0x48000c00
 8001174:	48001000 	.word	0x48001000
 8001178:	58000800 	.word	0x58000800

0800117c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
 8001188:	4613      	mov	r3, r2
 800118a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800118c:	787b      	ldrb	r3, [r7, #1]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001198:	e002      	b.n	80011a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800119a:	887a      	ldrh	r2, [r7, #2]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4013      	ands	r3, r2
 80011c4:	041a      	lsls	r2, r3, #16
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43d9      	mvns	r1, r3
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	400b      	ands	r3, r1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	619a      	str	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011f6:	4a05      	ldr	r2, [pc, #20]	@ (800120c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f806 	bl	8001210 <HAL_GPIO_EXTI_Callback>
  }
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	58000800 	.word	0x58000800

08001210 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	58000400 	.word	0x58000400

08001248 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <HAL_PWREx_GetVoltageRange+0x18>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	58000400 	.word	0x58000400

08001264 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001276:	d101      	bne.n	800127c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800128c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80012aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80012d6:	d101      	bne.n	80012dc <LL_RCC_HSE_IsReady+0x18>
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <LL_RCC_HSE_IsReady+0x1a>
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80012ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800130a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001318:	6013      	str	r3, [r2, #0]
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001336:	d101      	bne.n	800133c <LL_RCC_HSI_IsReady+0x18>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <LL_RCC_HSI_IsReady+0x1a>
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	061b      	lsls	r3, r3, #24
 800135e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800137a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800137e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800139c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80013a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80013ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d101      	bne.n	80013ce <LL_RCC_HSI48_IsReady+0x18>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <LL_RCC_HSI48_IsReady+0x1a>
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80013de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001408:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800142a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800144c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001450:	f023 0304 	bic.w	r3, r3, #4
 8001454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800146a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b02      	cmp	r3, #2
 8001474:	d101      	bne.n	800147a <LL_RCC_LSE_IsReady+0x18>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <LL_RCC_LSE_IsReady+0x1a>
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800148a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800148e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001492:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80014ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d101      	bne.n	80014e2 <LL_RCC_LSI1_IsReady+0x18>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <LL_RCC_LSI1_IsReady+0x1a>
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80014f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800151c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001520:	f023 0304 	bic.w	r3, r3, #4
 8001524:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b08      	cmp	r3, #8
 8001544:	d101      	bne.n	800154a <LL_RCC_LSI2_IsReady+0x18>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <LL_RCC_LSI2_IsReady+0x1a>
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001566:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001572:	4313      	orrs	r3, r2
 8001574:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80015a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6013      	str	r3, [r2, #0]
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80015c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d101      	bne.n	80015d6 <LL_RCC_MSI_IsReady+0x16>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <LL_RCC_MSI_IsReady+0x18>
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80015ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800161a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001620:	d901      	bls.n	8001626 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001622:	23b0      	movs	r3, #176	@ 0xb0
 8001624:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001626:	687b      	ldr	r3, [r7, #4]
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 0203 	bic.w	r2, r3, #3
 8001670:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 030c 	and.w	r3, r3, #12
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80016a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80016ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80016d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80016fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001702:	f023 020f 	bic.w	r2, r3, #15
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800170e:	4313      	orrs	r3, r2
 8001710:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001732:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4313      	orrs	r3, r2
 800173a:	608b      	str	r3, [r1, #8]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800175a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4313      	orrs	r3, r2
 8001762:	608b      	str	r3, [r1, #8]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001790:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80017a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80017c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80017d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80017f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001800:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001804:	6013      	str	r3, [r2, #0]
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001822:	d101      	bne.n	8001828 <LL_RCC_PLL_IsReady+0x18>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <LL_RCC_PLL_IsReady+0x1a>
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800186a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f003 0303 	and.w	r3, r3, #3
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800189a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018a8:	d101      	bne.n	80018ae <LL_RCC_IsActiveFlag_HPRE+0x18>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80018ce:	d101      	bne.n	80018d4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80018e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80018ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f4:	d101      	bne.n	80018fa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800190a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001918:	d101      	bne.n	800191e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800192e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001938:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800193c:	d101      	bne.n	8001942 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b08d      	sub	sp, #52	@ 0x34
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e363      	b.n	800202a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0320 	and.w	r3, r3, #32
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 808d 	beq.w	8001a8a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001970:	f7ff fe89 	bl	8001686 <LL_RCC_GetSysClkSource>
 8001974:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001976:	f7ff ff82 	bl	800187e <LL_RCC_PLL_GetMainSource>
 800197a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800197c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_RCC_OscConfig+0x3e>
 8001982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001984:	2b0c      	cmp	r3, #12
 8001986:	d147      	bne.n	8001a18 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198a:	2b01      	cmp	r3, #1
 800198c:	d144      	bne.n	8001a18 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e347      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800199e:	f7ff fe34 	bl	800160a <LL_RCC_MSI_GetRange>
 80019a2:	4603      	mov	r3, r0
 80019a4:	429c      	cmp	r4, r3
 80019a6:	d914      	bls.n	80019d2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fd2f 	bl	8002410 <RCC_SetFlashLatencyFromMSIRange>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e336      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fe0e 	bl	80015e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fe32 	bl	8001634 <LL_RCC_MSI_SetCalibTrimming>
 80019d0:	e013      	b.n	80019fa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fe03 	bl	80015e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fe27 	bl	8001634 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fd10 	bl	8002410 <RCC_SetFlashLatencyFromMSIRange>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e317      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80019fa:	f000 fcc9 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4aa4      	ldr	r2, [pc, #656]	@ (8001c94 <HAL_RCC_OscConfig+0x344>)
 8001a02:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a04:	4ba4      	ldr	r3, [pc, #656]	@ (8001c98 <HAL_RCC_OscConfig+0x348>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff f8ad 	bl	8000b68 <HAL_InitTick>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d039      	beq.n	8001a88 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e308      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d01e      	beq.n	8001a5e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a20:	f7ff fdb0 	bl	8001584 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a24:	f7ff f8ee 	bl	8000c04 <HAL_GetTick>
 8001a28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a2c:	f7ff f8ea 	bl	8000c04 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e2f5      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001a3e:	f7ff fdbf 	bl	80015c0 <LL_RCC_MSI_IsReady>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f1      	beq.n	8001a2c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fdc8 	bl	80015e2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fdec 	bl	8001634 <LL_RCC_MSI_SetCalibTrimming>
 8001a5c:	e015      	b.n	8001a8a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a5e:	f7ff fda0 	bl	80015a2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a62:	f7ff f8cf 	bl	8000c04 <HAL_GetTick>
 8001a66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a6a:	f7ff f8cb 	bl	8000c04 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e2d6      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001a7c:	f7ff fda0 	bl	80015c0 <LL_RCC_MSI_IsReady>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f1      	bne.n	8001a6a <HAL_RCC_OscConfig+0x11a>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001a88:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d047      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a96:	f7ff fdf6 	bl	8001686 <LL_RCC_GetSysClkSource>
 8001a9a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a9c:	f7ff feef 	bl	800187e <LL_RCC_PLL_GetMainSource>
 8001aa0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x164>
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d108      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d105      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d134      	bne.n	8001b26 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e2b4      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac8:	d102      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x180>
 8001aca:	f7ff fbdd 	bl	8001288 <LL_RCC_HSE_Enable>
 8001ace:	e001      	b.n	8001ad4 <HAL_RCC_OscConfig+0x184>
 8001ad0:	f7ff fbe9 	bl	80012a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d012      	beq.n	8001b02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff f892 	bl	8000c04 <HAL_GetTick>
 8001ae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff f88e 	bl	8000c04 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	@ 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e299      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001af6:	f7ff fbe5 	bl	80012c4 <LL_RCC_HSE_IsReady>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f1      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x194>
 8001b00:	e011      	b.n	8001b26 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7ff f87f 	bl	8000c04 <HAL_GetTick>
 8001b06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0a:	f7ff f87b 	bl	8000c04 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b64      	cmp	r3, #100	@ 0x64
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e286      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001b1c:	f7ff fbd2 	bl	80012c4 <LL_RCC_HSE_IsReady>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f1      	bne.n	8001b0a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d04c      	beq.n	8001bcc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b32:	f7ff fda8 	bl	8001686 <LL_RCC_GetSysClkSource>
 8001b36:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b38:	f7ff fea1 	bl	800187e <LL_RCC_PLL_GetMainSource>
 8001b3c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_OscConfig+0x200>
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d10e      	bne.n	8001b68 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d10b      	bne.n	8001b68 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e266      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fbf1 	bl	8001348 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b66:	e031      	b.n	8001bcc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d019      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b70:	f7ff fbba 	bl	80012e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff f846 	bl	8000c04 <HAL_GetTick>
 8001b78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7c:	f7ff f842 	bl	8000c04 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e24d      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001b8e:	f7ff fbc9 	bl	8001324 <LL_RCC_HSI_IsReady>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f1      	beq.n	8001b7c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fbd3 	bl	8001348 <LL_RCC_HSI_SetCalibTrimming>
 8001ba2:	e013      	b.n	8001bcc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba4:	f7ff fbaf 	bl	8001306 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f82c 	bl	8000c04 <HAL_GetTick>
 8001bac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb0:	f7ff f828 	bl	8000c04 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e233      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001bc2:	f7ff fbaf 	bl	8001324 <LL_RCC_HSI_IsReady>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f1      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80a3 	beq.w	8001d2c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d076      	beq.n	8001cdc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d046      	beq.n	8001c88 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001bfa:	f7ff fc66 	bl	80014ca <LL_RCC_LSI1_IsReady>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d113      	bne.n	8001c2c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001c04:	f7ff fc3f 	bl	8001486 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c08:	f7fe fffc 	bl	8000c04 <HAL_GetTick>
 8001c0c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001c10:	f7fe fff8 	bl	8000c04 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e203      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001c22:	f7ff fc52 	bl	80014ca <LL_RCC_LSI1_IsReady>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f1      	beq.n	8001c10 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001c2c:	f7ff fc5f 	bl	80014ee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7fe ffe8 	bl	8000c04 <HAL_GetTick>
 8001c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001c38:	f7fe ffe4 	bl	8000c04 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e1ef      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001c4a:	f7ff fc72 	bl	8001532 <LL_RCC_LSI2_IsReady>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f1      	beq.n	8001c38 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fc7c 	bl	8001556 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001c5e:	f7ff fc23 	bl	80014a8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7fe ffcf 	bl	8000c04 <HAL_GetTick>
 8001c66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001c6a:	f7fe ffcb 	bl	8000c04 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1d6      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001c7c:	f7ff fc25 	bl	80014ca <LL_RCC_LSI1_IsReady>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f1      	bne.n	8001c6a <HAL_RCC_OscConfig+0x31a>
 8001c86:	e051      	b.n	8001d2c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001c88:	f7ff fbfd 	bl	8001486 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7fe ffba 	bl	8000c04 <HAL_GetTick>
 8001c90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001c92:	e00c      	b.n	8001cae <HAL_RCC_OscConfig+0x35e>
 8001c94:	20000008 	.word	0x20000008
 8001c98:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001c9c:	f7fe ffb2 	bl	8000c04 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e1bd      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001cae:	f7ff fc0c 	bl	80014ca <LL_RCC_LSI1_IsReady>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f1      	beq.n	8001c9c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001cb8:	f7ff fc2a 	bl	8001510 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001cbe:	f7fe ffa1 	bl	8000c04 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e1ac      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001cd0:	f7ff fc2f 	bl	8001532 <LL_RCC_LSI2_IsReady>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f1      	bne.n	8001cbe <HAL_RCC_OscConfig+0x36e>
 8001cda:	e027      	b.n	8001d2c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001cdc:	f7ff fc18 	bl	8001510 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7fe ff90 	bl	8000c04 <HAL_GetTick>
 8001ce4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ce8:	f7fe ff8c 	bl	8000c04 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e197      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001cfa:	f7ff fc1a 	bl	8001532 <LL_RCC_LSI2_IsReady>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f1      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001d04:	f7ff fbd0 	bl	80014a8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7fe ff7c 	bl	8000c04 <HAL_GetTick>
 8001d0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001d10:	f7fe ff78 	bl	8000c04 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e183      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001d22:	f7ff fbd2 	bl	80014ca <LL_RCC_LSI1_IsReady>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f1      	bne.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d05b      	beq.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d38:	4ba7      	ldr	r3, [pc, #668]	@ (8001fd8 <HAL_RCC_OscConfig+0x688>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d114      	bne.n	8001d6e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001d44:	f7ff fa70 	bl	8001228 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d48:	f7fe ff5c 	bl	8000c04 <HAL_GetTick>
 8001d4c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d50:	f7fe ff58 	bl	8000c04 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e163      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d62:	4b9d      	ldr	r3, [pc, #628]	@ (8001fd8 <HAL_RCC_OscConfig+0x688>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_RCC_OscConfig+0x42c>
 8001d76:	f7ff fb30 	bl	80013da <LL_RCC_LSE_Enable>
 8001d7a:	e00c      	b.n	8001d96 <HAL_RCC_OscConfig+0x446>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d104      	bne.n	8001d8e <HAL_RCC_OscConfig+0x43e>
 8001d84:	f7ff fb4b 	bl	800141e <LL_RCC_LSE_EnableBypass>
 8001d88:	f7ff fb27 	bl	80013da <LL_RCC_LSE_Enable>
 8001d8c:	e003      	b.n	8001d96 <HAL_RCC_OscConfig+0x446>
 8001d8e:	f7ff fb35 	bl	80013fc <LL_RCC_LSE_Disable>
 8001d92:	f7ff fb55 	bl	8001440 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d014      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9e:	f7fe ff31 	bl	8000c04 <HAL_GetTick>
 8001da2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7fe ff2d 	bl	8000c04 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e136      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001dbc:	f7ff fb51 	bl	8001462 <LL_RCC_LSE_IsReady>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0ef      	beq.n	8001da6 <HAL_RCC_OscConfig+0x456>
 8001dc6:	e013      	b.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc8:	f7fe ff1c 	bl	8000c04 <HAL_GetTick>
 8001dcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7fe ff18 	bl	8000c04 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e121      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001de6:	f7ff fb3c 	bl	8001462 <LL_RCC_LSE_IsReady>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1ef      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d02c      	beq.n	8001e56 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d014      	beq.n	8001e2e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e04:	f7ff fab5 	bl	8001372 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7fe fefc 	bl	8000c04 <HAL_GetTick>
 8001e0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e10:	f7fe fef8 	bl	8000c04 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e103      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001e22:	f7ff fac8 	bl	80013b6 <LL_RCC_HSI48_IsReady>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f1      	beq.n	8001e10 <HAL_RCC_OscConfig+0x4c0>
 8001e2c:	e013      	b.n	8001e56 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e2e:	f7ff fab1 	bl	8001394 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e32:	f7fe fee7 	bl	8000c04 <HAL_GetTick>
 8001e36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e3a:	f7fe fee3 	bl	8000c04 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0ee      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001e4c:	f7ff fab3 	bl	80013b6 <LL_RCC_HSI48_IsReady>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f1      	bne.n	8001e3a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 80e4 	beq.w	8002028 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e60:	f7ff fc11 	bl	8001686 <LL_RCC_GetSysClkSource>
 8001e64:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	f040 80b4 	bne.w	8001fe0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0203 	and.w	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d123      	bne.n	8001ece <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d11c      	bne.n	8001ece <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	0a1b      	lsrs	r3, r3, #8
 8001e98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d114      	bne.n	8001ece <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d10d      	bne.n	8001ece <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d05d      	beq.n	8001f8a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b0c      	cmp	r3, #12
 8001ed2:	d058      	beq.n	8001f86 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0a1      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ee6:	f7ff fc84 	bl	80017f2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eea:	f7fe fe8b 	bl	8000c04 <HAL_GetTick>
 8001eee:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7fe fe87 	bl	8000c04 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e092      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1ef      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	4b30      	ldr	r3, [pc, #192]	@ (8001fdc <HAL_RCC_OscConfig+0x68c>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f24:	4311      	orrs	r1, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f2a:	0212      	lsls	r2, r2, #8
 8001f2c:	4311      	orrs	r1, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f32:	4311      	orrs	r1, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f38:	4311      	orrs	r1, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f48:	f7ff fc44 	bl	80017d4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f5c:	f7fe fe52 	bl	8000c04 <HAL_GetTick>
 8001f60:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f64:	f7fe fe4e 	bl	8000c04 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e059      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0ef      	beq.n	8001f64 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f84:	e050      	b.n	8002028 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e04f      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d147      	bne.n	8002028 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f98:	f7ff fc1c 	bl	80017d4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fac:	f7fe fe2a 	bl	8000c04 <HAL_GetTick>
 8001fb0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7fe fe26 	bl	8000c04 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e031      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ef      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x664>
 8001fd4:	e028      	b.n	8002028 <HAL_RCC_OscConfig+0x6d8>
 8001fd6:	bf00      	nop
 8001fd8:	58000400 	.word	0x58000400
 8001fdc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d01e      	beq.n	8002024 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	f7ff fc04 	bl	80017f2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7fe fe0b 	bl	8000c04 <HAL_GetTick>
 8001fee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7fe fe07 	bl	8000c04 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e012      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1ef      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800201c:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <HAL_RCC_OscConfig+0x6e4>)
 800201e:	4013      	ands	r3, r2
 8002020:	60cb      	str	r3, [r1, #12]
 8002022:	e001      	b.n	8002028 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3734      	adds	r7, #52	@ 0x34
 800202e:	46bd      	mov	sp, r7
 8002030:	bd90      	pop	{r4, r7, pc}
 8002032:	bf00      	nop
 8002034:	eefefffc 	.word	0xeefefffc

08002038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e12d      	b.n	80022a8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800204c:	4b98      	ldr	r3, [pc, #608]	@ (80022b0 <HAL_RCC_ClockConfig+0x278>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d91b      	bls.n	8002092 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b95      	ldr	r3, [pc, #596]	@ (80022b0 <HAL_RCC_ClockConfig+0x278>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 0207 	bic.w	r2, r3, #7
 8002062:	4993      	ldr	r1, [pc, #588]	@ (80022b0 <HAL_RCC_ClockConfig+0x278>)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800206a:	f7fe fdcb 	bl	8000c04 <HAL_GetTick>
 800206e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002070:	e008      	b.n	8002084 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002072:	f7fe fdc7 	bl	8000c04 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e111      	b.n	80022a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002084:	4b8a      	ldr	r3, [pc, #552]	@ (80022b0 <HAL_RCC_ClockConfig+0x278>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d1ef      	bne.n	8002072 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d016      	beq.n	80020cc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fafb 	bl	800169e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80020a8:	f7fe fdac 	bl	8000c04 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80020b0:	f7fe fda8 	bl	8000c04 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e0f2      	b.n	80022a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80020c2:	f7ff fbe8 	bl	8001896 <LL_RCC_IsActiveFlag_HPRE>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f1      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d016      	beq.n	8002106 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff faf2 	bl	80016c6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80020e2:	f7fe fd8f 	bl	8000c04 <HAL_GetTick>
 80020e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80020ea:	f7fe fd8b 	bl	8000c04 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e0d5      	b.n	80022a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80020fc:	f7ff fbdd 	bl	80018ba <LL_RCC_IsActiveFlag_C2HPRE>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f1      	beq.n	80020ea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d016      	beq.n	8002140 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff faeb 	bl	80016f2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800211c:	f7fe fd72 	bl	8000c04 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002124:	f7fe fd6e 	bl	8000c04 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e0b8      	b.n	80022a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002136:	f7ff fbd3 	bl	80018e0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f1      	beq.n	8002124 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d016      	beq.n	800217a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fae5 	bl	8001720 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002156:	f7fe fd55 	bl	8000c04 <HAL_GetTick>
 800215a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800215e:	f7fe fd51 	bl	8000c04 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e09b      	b.n	80022a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002170:	f7ff fbc9 	bl	8001906 <LL_RCC_IsActiveFlag_PPRE1>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f1      	beq.n	800215e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d017      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fadb 	bl	8001748 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002192:	f7fe fd37 	bl	8000c04 <HAL_GetTick>
 8002196:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002198:	e008      	b.n	80021ac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800219a:	f7fe fd33 	bl	8000c04 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e07d      	b.n	80022a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80021ac:	f7ff fbbd 	bl	800192a <LL_RCC_IsActiveFlag_PPRE2>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f1      	beq.n	800219a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d043      	beq.n	800224a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d106      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80021ca:	f7ff f87b 	bl	80012c4 <LL_RCC_HSE_IsReady>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d11e      	bne.n	8002212 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e067      	b.n	80022a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d106      	bne.n	80021ee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80021e0:	f7ff fb16 	bl	8001810 <LL_RCC_PLL_IsReady>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d113      	bne.n	8002212 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e05c      	b.n	80022a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80021f6:	f7ff f9e3 	bl	80015c0 <LL_RCC_MSI_IsReady>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d108      	bne.n	8002212 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e051      	b.n	80022a8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002204:	f7ff f88e 	bl	8001324 <LL_RCC_HSI_IsReady>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e04a      	b.n	80022a8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fa21 	bl	800165e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800221c:	f7fe fcf2 	bl	8000c04 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7fe fcee 	bl	8000c04 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e036      	b.n	80022a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	f7ff fa24 	bl	8001686 <LL_RCC_GetSysClkSource>
 800223e:	4602      	mov	r2, r0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	429a      	cmp	r2, r3
 8002248:	d1ec      	bne.n	8002224 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800224a:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <HAL_RCC_ClockConfig+0x278>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d21b      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002258:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <HAL_RCC_ClockConfig+0x278>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 0207 	bic.w	r2, r3, #7
 8002260:	4913      	ldr	r1, [pc, #76]	@ (80022b0 <HAL_RCC_ClockConfig+0x278>)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002268:	f7fe fccc 	bl	8000c04 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	e008      	b.n	8002282 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002270:	f7fe fcc8 	bl	8000c04 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e012      	b.n	80022a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_RCC_ClockConfig+0x278>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d1ef      	bne.n	8002270 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002290:	f000 f87e 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 8002294:	4603      	mov	r3, r0
 8002296:	4a07      	ldr	r2, [pc, #28]	@ (80022b4 <HAL_RCC_ClockConfig+0x27c>)
 8002298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800229a:	f7fe fcbf 	bl	8000c1c <HAL_GetTickPrio>
 800229e:	4603      	mov	r3, r0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe fc61 	bl	8000b68 <HAL_InitTick>
 80022a6:	4603      	mov	r3, r0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	58004000 	.word	0x58004000
 80022b4:	20000008 	.word	0x20000008

080022b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022be:	f7ff f9e2 	bl	8001686 <LL_RCC_GetSysClkSource>
 80022c2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80022ca:	f7ff f99e 	bl	800160a <LL_RCC_MSI_GetRange>
 80022ce:	4603      	mov	r3, r0
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002384 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	e04b      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d102      	bne.n	80022ec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022e6:	4b28      	ldr	r3, [pc, #160]	@ (8002388 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	e045      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d10a      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80022f2:	f7fe ffb7 	bl	8001264 <LL_RCC_HSE_IsEnabledDiv2>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d102      	bne.n	8002302 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80022fc:	4b22      	ldr	r3, [pc, #136]	@ (8002388 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	e03a      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002302:	4b22      	ldr	r3, [pc, #136]	@ (800238c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	e037      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002308:	f7ff fab9 	bl	800187e <LL_RCC_PLL_GetMainSource>
 800230c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d003      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x64>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0x6a>
 800231a:	e00d      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800231c:	4b1a      	ldr	r3, [pc, #104]	@ (8002388 <HAL_RCC_GetSysClockFreq+0xd0>)
 800231e:	60bb      	str	r3, [r7, #8]
        break;
 8002320:	e015      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002322:	f7fe ff9f 	bl	8001264 <LL_RCC_HSE_IsEnabledDiv2>
 8002326:	4603      	mov	r3, r0
 8002328:	2b01      	cmp	r3, #1
 800232a:	d102      	bne.n	8002332 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800232c:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <HAL_RCC_GetSysClockFreq+0xd0>)
 800232e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002330:	e00d      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002332:	4b16      	ldr	r3, [pc, #88]	@ (800238c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002334:	60bb      	str	r3, [r7, #8]
        break;
 8002336:	e00a      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002338:	f7ff f967 	bl	800160a <LL_RCC_MSI_GetRange>
 800233c:	4603      	mov	r3, r0
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	4a0f      	ldr	r2, [pc, #60]	@ (8002384 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	60bb      	str	r3, [r7, #8]
        break;
 800234c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800234e:	f7ff fa71 	bl	8001834 <LL_RCC_PLL_GetN>
 8002352:	4602      	mov	r2, r0
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	fb03 f402 	mul.w	r4, r3, r2
 800235a:	f7ff fa84 	bl	8001866 <LL_RCC_PLL_GetDivider>
 800235e:	4603      	mov	r3, r0
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	3301      	adds	r3, #1
 8002364:	fbb4 f4f3 	udiv	r4, r4, r3
 8002368:	f7ff fa71 	bl	800184e <LL_RCC_PLL_GetR>
 800236c:	4603      	mov	r3, r0
 800236e:	0f5b      	lsrs	r3, r3, #29
 8002370:	3301      	adds	r3, #1
 8002372:	fbb4 f3f3 	udiv	r3, r4, r3
 8002376:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002378:	68fb      	ldr	r3, [r7, #12]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bd90      	pop	{r4, r7, pc}
 8002382:	bf00      	nop
 8002384:	08003840 	.word	0x08003840
 8002388:	00f42400 	.word	0x00f42400
 800238c:	01e84800 	.word	0x01e84800

08002390 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002390:	b598      	push	{r3, r4, r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002394:	f7ff ff90 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002398:	4604      	mov	r4, r0
 800239a:	f7ff f9e9 	bl	8001770 <LL_RCC_GetAHBPrescaler>
 800239e:	4603      	mov	r3, r0
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	4a03      	ldr	r2, [pc, #12]	@ (80023b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd98      	pop	{r3, r4, r7, pc}
 80023b4:	080037e0 	.word	0x080037e0

080023b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b8:	b598      	push	{r3, r4, r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80023bc:	f7ff ffe8 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023c0:	4604      	mov	r4, r0
 80023c2:	f7ff f9ef 	bl	80017a4 <LL_RCC_GetAPB1Prescaler>
 80023c6:	4603      	mov	r3, r0
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	4a04      	ldr	r2, [pc, #16]	@ (80023e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd98      	pop	{r3, r4, r7, pc}
 80023e0:	08003820 	.word	0x08003820

080023e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e4:	b598      	push	{r3, r4, r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80023e8:	f7ff ffd2 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023ec:	4604      	mov	r4, r0
 80023ee:	f7ff f9e5 	bl	80017bc <LL_RCC_GetAPB2Prescaler>
 80023f2:	4603      	mov	r3, r0
 80023f4:	0adb      	lsrs	r3, r3, #11
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	4a04      	ldr	r2, [pc, #16]	@ (800240c <HAL_RCC_GetPCLK2Freq+0x28>)
 80023fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd98      	pop	{r3, r4, r7, pc}
 800240c:	08003820 	.word	0x08003820

08002410 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2bb0      	cmp	r3, #176	@ 0xb0
 800241c:	d903      	bls.n	8002426 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e007      	b.n	8002436 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	4a11      	ldr	r2, [pc, #68]	@ (8002474 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002434:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002436:	f7ff f9a7 	bl	8001788 <LL_RCC_GetAHB4Prescaler>
 800243a:	4603      	mov	r3, r0
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	4a0d      	ldr	r2, [pc, #52]	@ (8002478 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4a0a      	ldr	r2, [pc, #40]	@ (800247c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	0c9c      	lsrs	r4, r3, #18
 800245a:	f7fe fef5 	bl	8001248 <HAL_PWREx_GetVoltageRange>
 800245e:	4603      	mov	r3, r0
 8002460:	4619      	mov	r1, r3
 8002462:	4620      	mov	r0, r4
 8002464:	f000 f80c 	bl	8002480 <RCC_SetFlashLatency>
 8002468:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bd90      	pop	{r4, r7, pc}
 8002472:	bf00      	nop
 8002474:	08003840 	.word	0x08003840
 8002478:	080037e0 	.word	0x080037e0
 800247c:	431bde83 	.word	0x431bde83

08002480 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b093      	sub	sp, #76	@ 0x4c
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800248a:	4b37      	ldr	r3, [pc, #220]	@ (8002568 <RCC_SetFlashLatency+0xe8>)
 800248c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002490:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002492:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002496:	4a35      	ldr	r2, [pc, #212]	@ (800256c <RCC_SetFlashLatency+0xec>)
 8002498:	f107 031c 	add.w	r3, r7, #28
 800249c:	ca07      	ldmia	r2, {r0, r1, r2}
 800249e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80024a2:	4b33      	ldr	r3, [pc, #204]	@ (8002570 <RCC_SetFlashLatency+0xf0>)
 80024a4:	f107 040c 	add.w	r4, r7, #12
 80024a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80024ae:	2300      	movs	r3, #0
 80024b0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024b8:	d11a      	bne.n	80024f0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80024be:	e013      	b.n	80024e8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80024c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	3348      	adds	r3, #72	@ 0x48
 80024c6:	443b      	add	r3, r7
 80024c8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d807      	bhi.n	80024e2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80024d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	3348      	adds	r3, #72	@ 0x48
 80024d8:	443b      	add	r3, r7
 80024da:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80024de:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80024e0:	e020      	b.n	8002524 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80024e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024e4:	3301      	adds	r3, #1
 80024e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80024e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	d9e8      	bls.n	80024c0 <RCC_SetFlashLatency+0x40>
 80024ee:	e019      	b.n	8002524 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80024f0:	2300      	movs	r3, #0
 80024f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024f4:	e013      	b.n	800251e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80024f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	3348      	adds	r3, #72	@ 0x48
 80024fc:	443b      	add	r3, r7
 80024fe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d807      	bhi.n	8002518 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	3348      	adds	r3, #72	@ 0x48
 800250e:	443b      	add	r3, r7
 8002510:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002514:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002516:	e005      	b.n	8002524 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800251a:	3301      	adds	r3, #1
 800251c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800251e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002520:	2b02      	cmp	r3, #2
 8002522:	d9e8      	bls.n	80024f6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002524:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <RCC_SetFlashLatency+0xf4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 0207 	bic.w	r2, r3, #7
 800252c:	4911      	ldr	r1, [pc, #68]	@ (8002574 <RCC_SetFlashLatency+0xf4>)
 800252e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002534:	f7fe fb66 	bl	8000c04 <HAL_GetTick>
 8002538:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800253a:	e008      	b.n	800254e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800253c:	f7fe fb62 	bl	8000c04 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e007      	b.n	800255e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800254e:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <RCC_SetFlashLatency+0xf4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002558:	429a      	cmp	r2, r3
 800255a:	d1ef      	bne.n	800253c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	374c      	adds	r7, #76	@ 0x4c
 8002562:	46bd      	mov	sp, r7
 8002564:	bd90      	pop	{r4, r7, pc}
 8002566:	bf00      	nop
 8002568:	080037b4 	.word	0x080037b4
 800256c:	080037c4 	.word	0x080037c4
 8002570:	080037d0 	.word	0x080037d0
 8002574:	58004000 	.word	0x58004000

08002578 <LL_RCC_LSE_IsEnabled>:
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <LL_RCC_LSE_IsEnabled+0x18>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <LL_RCC_LSE_IsEnabled+0x1a>
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_RCC_LSE_IsReady>:
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80025a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d101      	bne.n	80025b4 <LL_RCC_LSE_IsReady+0x18>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <LL_RCC_LSE_IsReady+0x1a>
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <LL_RCC_SetRFWKPClockSource>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80025c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80025d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_RCC_SetSMPSClockSource>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	f023 0203 	bic.w	r2, r3, #3
 80025fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4313      	orrs	r3, r2
 8002606:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_RCC_SetSMPSPrescaler>:
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800261c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002626:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4313      	orrs	r3, r2
 800262e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_RCC_SetUSARTClockSource>:
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264c:	f023 0203 	bic.w	r2, r3, #3
 8002650:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <LL_RCC_SetLPUARTClockSource>:
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002678:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800267c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_RCC_SetI2CClockSource>:
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800269c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80026ac:	43db      	mvns	r3, r3
 80026ae:	401a      	ands	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80026b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_RCC_SetLPTIMClockSource>:
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80026d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026da:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	43db      	mvns	r3, r3
 80026e6:	401a      	ands	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <LL_RCC_SetSAIClockSource>:
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800270a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002712:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002716:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_RCC_SetRNGClockSource>:
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002742:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <LL_RCC_SetCLK48ClockSource>:
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800276e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LL_RCC_SetUSBClockSource>:
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffe3 	bl	800275a <LL_RCC_SetCLK48ClockSource>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <LL_RCC_SetADCClockSource>:
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ac:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_RCC_SetRTCClockSource>:
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80027d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_RCC_GetRTCClockSource>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80027f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_RCC_ForceBackupDomainReset>:
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800281e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002822:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_RCC_PLLSAI1_Enable>:
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002860:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002864:	6013      	str	r3, [r2, #0]
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_RCC_PLLSAI1_Disable>:
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800287e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002882:	6013      	str	r3, [r2, #0]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_RCC_PLLSAI1_IsReady>:
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800289c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028a0:	d101      	bne.n	80028a6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b088      	sub	sp, #32
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80028ba:	2300      	movs	r3, #0
 80028bc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80028be:	2300      	movs	r3, #0
 80028c0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d034      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028d6:	d021      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80028d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028dc:	d81b      	bhi.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028e2:	d01d      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80028e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028e8:	d815      	bhi.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00b      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80028ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028f2:	d110      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80028f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002902:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002904:	e00d      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3304      	adds	r3, #4
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f947 	bl	8002b9e <RCCEx_PLLSAI1_ConfigNP>
 8002910:	4603      	mov	r3, r0
 8002912:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002914:	e005      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	77fb      	strb	r3, [r7, #31]
        break;
 800291a:	e002      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800291c:	bf00      	nop
 800291e:	e000      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002922:	7ffb      	ldrb	r3, [r7, #31]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fee8 	bl	8002702 <LL_RCC_SetSAIClockSource>
 8002932:	e001      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002934:	7ffb      	ldrb	r3, [r7, #31]
 8002936:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002940:	2b00      	cmp	r3, #0
 8002942:	d046      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002944:	f7ff ff56 	bl	80027f4 <LL_RCC_GetRTCClockSource>
 8002948:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	429a      	cmp	r2, r3
 8002952:	d03c      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002954:	f7fe fc68 	bl	8001228 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff30 	bl	80027c8 <LL_RCC_SetRTCClockSource>
 8002968:	e02e      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800296a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002972:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002974:	f7ff ff4b 	bl	800280e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002978:	f7ff ff5a 	bl	8002830 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800298a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002994:	f7ff fdf0 	bl	8002578 <LL_RCC_LSE_IsEnabled>
 8002998:	4603      	mov	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	d114      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800299e:	f7fe f931 	bl	8000c04 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80029a4:	e00b      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7fe f92d 	bl	8000c04 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d902      	bls.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	77fb      	strb	r3, [r7, #31]
              break;
 80029bc:	e004      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80029be:	f7ff fded 	bl	800259c <LL_RCC_LSE_IsReady>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d1ee      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80029c8:	7ffb      	ldrb	r3, [r7, #31]
 80029ca:	77bb      	strb	r3, [r7, #30]
 80029cc:	e001      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ce:	7ffb      	ldrb	r3, [r7, #31]
 80029d0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fe2a 	bl	800263c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fe35 	bl	8002668 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fe5d 	bl	80026ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d004      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fe52 	bl	80026ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fe2a 	bl	8002694 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fe1f 	bl	8002694 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d022      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fe8d 	bl	8002786 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a74:	d107      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a84:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f8dd 	bl	8002c54 <RCCEx_PLLSAI1_ConfigNQ>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002a9e:	7ffb      	ldrb	r3, [r7, #31]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002aa4:	7ffb      	ldrb	r3, [r7, #31]
 8002aa6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d02b      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002abc:	d008      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ac6:	d003      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d105      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fe2a 	bl	800272e <LL_RCC_SetRNGClockSource>
 8002ada:	e00a      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7ff fe21 	bl	800272e <LL_RCC_SetRNGClockSource>
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f7ff fe34 	bl	800275a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8002afa:	d107      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d022      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fe3d 	bl	800279c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b44:	d10b      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f8dd 	bl	8002d0a <RCCEx_PLLSAI1_ConfigNR>
 8002b50:	4603      	mov	r3, r0
 8002b52:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002b54:	7ffb      	ldrb	r3, [r7, #31]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002b5a:	7ffb      	ldrb	r3, [r7, #31]
 8002b5c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fd26 	bl	80025c0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d009      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fd45 	bl	8002614 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fd2c 	bl	80025ec <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002b94:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002baa:	f7ff fe61 	bl	8002870 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bae:	f7fe f829 	bl	8000c04 <HAL_GetTick>
 8002bb2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002bb4:	e009      	b.n	8002bca <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bb6:	f7fe f825 	bl	8000c04 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d902      	bls.n	8002bca <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc8:	e004      	b.n	8002bd4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002bca:	f7ff fe60 	bl	800288e <LL_RCC_PLLSAI1_IsReady>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f0      	bne.n	8002bb6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d137      	bne.n	8002c4a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c04:	4313      	orrs	r3, r2
 8002c06:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002c08:	f7ff fe23 	bl	8002852 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0c:	f7fd fffa 	bl	8000c04 <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002c12:	e009      	b.n	8002c28 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c14:	f7fd fff6 	bl	8000c04 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d902      	bls.n	8002c28 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	73fb      	strb	r3, [r7, #15]
        break;
 8002c26:	e004      	b.n	8002c32 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002c28:	f7ff fe31 	bl	800288e <LL_RCC_PLLSAI1_IsReady>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d1f0      	bne.n	8002c14 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d108      	bne.n	8002c4a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c46:	4313      	orrs	r3, r2
 8002c48:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002c60:	f7ff fe06 	bl	8002870 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002c64:	f7fd ffce 	bl	8000c04 <HAL_GetTick>
 8002c68:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002c6a:	e009      	b.n	8002c80 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c6c:	f7fd ffca 	bl	8000c04 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d902      	bls.n	8002c80 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7e:	e004      	b.n	8002c8a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002c80:	f7ff fe05 	bl	800288e <LL_RCC_PLLSAI1_IsReady>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d137      	bne.n	8002d00 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002cbe:	f7ff fdc8 	bl	8002852 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc2:	f7fd ff9f 	bl	8000c04 <HAL_GetTick>
 8002cc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002cc8:	e009      	b.n	8002cde <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cca:	f7fd ff9b 	bl	8000c04 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d902      	bls.n	8002cde <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	73fb      	strb	r3, [r7, #15]
        break;
 8002cdc:	e004      	b.n	8002ce8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002cde:	f7ff fdd6 	bl	800288e <LL_RCC_PLLSAI1_IsReady>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d1f0      	bne.n	8002cca <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d108      	bne.n	8002d00 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002d16:	f7ff fdab 	bl	8002870 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d1a:	f7fd ff73 	bl	8000c04 <HAL_GetTick>
 8002d1e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002d20:	e009      	b.n	8002d36 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d22:	f7fd ff6f 	bl	8000c04 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d902      	bls.n	8002d36 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	73fb      	strb	r3, [r7, #15]
      break;
 8002d34:	e004      	b.n	8002d40 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002d36:	f7ff fdaa 	bl	800288e <LL_RCC_PLLSAI1_IsReady>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1f0      	bne.n	8002d22 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d137      	bne.n	8002db6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d70:	4313      	orrs	r3, r2
 8002d72:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002d74:	f7ff fd6d 	bl	8002852 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d78:	f7fd ff44 	bl	8000c04 <HAL_GetTick>
 8002d7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002d7e:	e009      	b.n	8002d94 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d80:	f7fd ff40 	bl	8000c04 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d902      	bls.n	8002d94 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	73fb      	strb	r3, [r7, #15]
        break;
 8002d92:	e004      	b.n	8002d9e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002d94:	f7ff fd7b 	bl	800288e <LL_RCC_PLLSAI1_IsReady>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d1f0      	bne.n	8002d80 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d108      	bne.n	8002db6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002db2:	4313      	orrs	r3, r2
 8002db4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <LL_RCC_GetUSARTClockSource>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4013      	ands	r3, r2
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_RCC_GetLPUARTClockSource>:
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4013      	ands	r3, r2
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e042      	b.n	8002e98 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d106      	bne.n	8002e2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f83b 	bl	8002ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2224      	movs	r2, #36	@ 0x24
 8002e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0201 	bic.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fa5a 	bl	8003304 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f82f 	bl	8002eb4 <UART_SetConfig>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e01b      	b.n	8002e98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fad9 	bl	8003448 <UART_CheckIdleState>
 8002e96:	4603      	mov	r3, r0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb8:	b08c      	sub	sp, #48	@ 0x30
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4baf      	ldr	r3, [pc, #700]	@ (80031a0 <UART_SetConfig+0x2ec>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4aa4      	ldr	r2, [pc, #656]	@ (80031a4 <UART_SetConfig+0x2f0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002f2a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3e:	f023 010f 	bic.w	r1, r3, #15
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a95      	ldr	r2, [pc, #596]	@ (80031a8 <UART_SetConfig+0x2f4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d125      	bne.n	8002fa4 <UART_SetConfig+0xf0>
 8002f58:	2003      	movs	r0, #3
 8002f5a:	f7ff ff31 	bl	8002dc0 <LL_RCC_GetUSARTClockSource>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d81b      	bhi.n	8002f9c <UART_SetConfig+0xe8>
 8002f64:	a201      	add	r2, pc, #4	@ (adr r2, 8002f6c <UART_SetConfig+0xb8>)
 8002f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6a:	bf00      	nop
 8002f6c:	08002f7d 	.word	0x08002f7d
 8002f70:	08002f8d 	.word	0x08002f8d
 8002f74:	08002f85 	.word	0x08002f85
 8002f78:	08002f95 	.word	0x08002f95
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f82:	e042      	b.n	800300a <UART_SetConfig+0x156>
 8002f84:	2302      	movs	r3, #2
 8002f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f8a:	e03e      	b.n	800300a <UART_SetConfig+0x156>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f92:	e03a      	b.n	800300a <UART_SetConfig+0x156>
 8002f94:	2308      	movs	r3, #8
 8002f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f9a:	e036      	b.n	800300a <UART_SetConfig+0x156>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fa2:	e032      	b.n	800300a <UART_SetConfig+0x156>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a7e      	ldr	r2, [pc, #504]	@ (80031a4 <UART_SetConfig+0x2f0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d12a      	bne.n	8003004 <UART_SetConfig+0x150>
 8002fae:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002fb2:	f7ff ff15 	bl	8002de0 <LL_RCC_GetLPUARTClockSource>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fbc:	d01a      	beq.n	8002ff4 <UART_SetConfig+0x140>
 8002fbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fc2:	d81b      	bhi.n	8002ffc <UART_SetConfig+0x148>
 8002fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fc8:	d00c      	beq.n	8002fe4 <UART_SetConfig+0x130>
 8002fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fce:	d815      	bhi.n	8002ffc <UART_SetConfig+0x148>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <UART_SetConfig+0x128>
 8002fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd8:	d008      	beq.n	8002fec <UART_SetConfig+0x138>
 8002fda:	e00f      	b.n	8002ffc <UART_SetConfig+0x148>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fe2:	e012      	b.n	800300a <UART_SetConfig+0x156>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fea:	e00e      	b.n	800300a <UART_SetConfig+0x156>
 8002fec:	2304      	movs	r3, #4
 8002fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ff2:	e00a      	b.n	800300a <UART_SetConfig+0x156>
 8002ff4:	2308      	movs	r3, #8
 8002ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ffa:	e006      	b.n	800300a <UART_SetConfig+0x156>
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003002:	e002      	b.n	800300a <UART_SetConfig+0x156>
 8003004:	2310      	movs	r3, #16
 8003006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a65      	ldr	r2, [pc, #404]	@ (80031a4 <UART_SetConfig+0x2f0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	f040 8097 	bne.w	8003144 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003016:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800301a:	2b08      	cmp	r3, #8
 800301c:	d823      	bhi.n	8003066 <UART_SetConfig+0x1b2>
 800301e:	a201      	add	r2, pc, #4	@ (adr r2, 8003024 <UART_SetConfig+0x170>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	08003049 	.word	0x08003049
 8003028:	08003067 	.word	0x08003067
 800302c:	08003051 	.word	0x08003051
 8003030:	08003067 	.word	0x08003067
 8003034:	08003057 	.word	0x08003057
 8003038:	08003067 	.word	0x08003067
 800303c:	08003067 	.word	0x08003067
 8003040:	08003067 	.word	0x08003067
 8003044:	0800305f 	.word	0x0800305f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003048:	f7ff f9b6 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 800304c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800304e:	e010      	b.n	8003072 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003050:	4b56      	ldr	r3, [pc, #344]	@ (80031ac <UART_SetConfig+0x2f8>)
 8003052:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003054:	e00d      	b.n	8003072 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003056:	f7ff f92f 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 800305a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800305c:	e009      	b.n	8003072 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800305e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003064:	e005      	b.n	8003072 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003070:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 812b 	beq.w	80032d0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	4a4c      	ldr	r2, [pc, #304]	@ (80031b0 <UART_SetConfig+0x2fc>)
 8003080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003084:	461a      	mov	r2, r3
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	fbb3 f3f2 	udiv	r3, r3, r2
 800308c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	429a      	cmp	r2, r3
 800309c:	d305      	bcc.n	80030aa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d903      	bls.n	80030b2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030b0:	e10e      	b.n	80032d0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	2200      	movs	r2, #0
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	60fa      	str	r2, [r7, #12]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	4a3c      	ldr	r2, [pc, #240]	@ (80031b0 <UART_SetConfig+0x2fc>)
 80030c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2200      	movs	r2, #0
 80030c8:	603b      	str	r3, [r7, #0]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030d4:	f7fd f852 	bl	800017c <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	020b      	lsls	r3, r1, #8
 80030ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030ee:	0202      	lsls	r2, r0, #8
 80030f0:	6979      	ldr	r1, [r7, #20]
 80030f2:	6849      	ldr	r1, [r1, #4]
 80030f4:	0849      	lsrs	r1, r1, #1
 80030f6:	2000      	movs	r0, #0
 80030f8:	460c      	mov	r4, r1
 80030fa:	4605      	mov	r5, r0
 80030fc:	eb12 0804 	adds.w	r8, r2, r4
 8003100:	eb43 0905 	adc.w	r9, r3, r5
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	469a      	mov	sl, r3
 800310c:	4693      	mov	fp, r2
 800310e:	4652      	mov	r2, sl
 8003110:	465b      	mov	r3, fp
 8003112:	4640      	mov	r0, r8
 8003114:	4649      	mov	r1, r9
 8003116:	f7fd f831 	bl	800017c <__aeabi_uldivmod>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4613      	mov	r3, r2
 8003120:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003128:	d308      	bcc.n	800313c <UART_SetConfig+0x288>
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003130:	d204      	bcs.n	800313c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6a3a      	ldr	r2, [r7, #32]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	e0c9      	b.n	80032d0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003142:	e0c5      	b.n	80032d0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800314c:	d16d      	bne.n	800322a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800314e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003152:	3b01      	subs	r3, #1
 8003154:	2b07      	cmp	r3, #7
 8003156:	d82d      	bhi.n	80031b4 <UART_SetConfig+0x300>
 8003158:	a201      	add	r2, pc, #4	@ (adr r2, 8003160 <UART_SetConfig+0x2ac>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003181 	.word	0x08003181
 8003164:	08003189 	.word	0x08003189
 8003168:	080031b5 	.word	0x080031b5
 800316c:	0800318f 	.word	0x0800318f
 8003170:	080031b5 	.word	0x080031b5
 8003174:	080031b5 	.word	0x080031b5
 8003178:	080031b5 	.word	0x080031b5
 800317c:	08003197 	.word	0x08003197
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003180:	f7ff f930 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 8003184:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003186:	e01b      	b.n	80031c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003188:	4b08      	ldr	r3, [pc, #32]	@ (80031ac <UART_SetConfig+0x2f8>)
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800318c:	e018      	b.n	80031c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800318e:	f7ff f893 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003192:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003194:	e014      	b.n	80031c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800319c:	e010      	b.n	80031c0 <UART_SetConfig+0x30c>
 800319e:	bf00      	nop
 80031a0:	cfff69f3 	.word	0xcfff69f3
 80031a4:	40008000 	.word	0x40008000
 80031a8:	40013800 	.word	0x40013800
 80031ac:	00f42400 	.word	0x00f42400
 80031b0:	08003894 	.word	0x08003894
      default:
        pclk = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 8084 	beq.w	80032d0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	4a4b      	ldr	r2, [pc, #300]	@ (80032fc <UART_SetConfig+0x448>)
 80031ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031d2:	461a      	mov	r2, r3
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80031da:	005a      	lsls	r2, r3, #1
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	441a      	add	r2, r3
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	2b0f      	cmp	r3, #15
 80031f2:	d916      	bls.n	8003222 <UART_SetConfig+0x36e>
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031fa:	d212      	bcs.n	8003222 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f023 030f 	bic.w	r3, r3, #15
 8003204:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	b29b      	uxth	r3, r3
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	b29a      	uxth	r2, r3
 8003212:	8bfb      	ldrh	r3, [r7, #30]
 8003214:	4313      	orrs	r3, r2
 8003216:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	8bfa      	ldrh	r2, [r7, #30]
 800321e:	60da      	str	r2, [r3, #12]
 8003220:	e056      	b.n	80032d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003228:	e052      	b.n	80032d0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800322a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800322e:	3b01      	subs	r3, #1
 8003230:	2b07      	cmp	r3, #7
 8003232:	d822      	bhi.n	800327a <UART_SetConfig+0x3c6>
 8003234:	a201      	add	r2, pc, #4	@ (adr r2, 800323c <UART_SetConfig+0x388>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	0800325d 	.word	0x0800325d
 8003240:	08003265 	.word	0x08003265
 8003244:	0800327b 	.word	0x0800327b
 8003248:	0800326b 	.word	0x0800326b
 800324c:	0800327b 	.word	0x0800327b
 8003250:	0800327b 	.word	0x0800327b
 8003254:	0800327b 	.word	0x0800327b
 8003258:	08003273 	.word	0x08003273
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800325c:	f7ff f8c2 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 8003260:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003262:	e010      	b.n	8003286 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003264:	4b26      	ldr	r3, [pc, #152]	@ (8003300 <UART_SetConfig+0x44c>)
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003268:	e00d      	b.n	8003286 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800326a:	f7ff f825 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 800326e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003270:	e009      	b.n	8003286 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003278:	e005      	b.n	8003286 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003284:	bf00      	nop
    }

    if (pclk != 0U)
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	2b00      	cmp	r3, #0
 800328a:	d021      	beq.n	80032d0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	4a1a      	ldr	r2, [pc, #104]	@ (80032fc <UART_SetConfig+0x448>)
 8003292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003296:	461a      	mov	r2, r3
 8003298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329a:	fbb3 f2f2 	udiv	r2, r3, r2
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	441a      	add	r2, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2b0f      	cmp	r3, #15
 80032b4:	d909      	bls.n	80032ca <UART_SetConfig+0x416>
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032bc:	d205      	bcs.n	80032ca <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	e002      	b.n	80032d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2201      	movs	r2, #1
 80032dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2200      	movs	r2, #0
 80032e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2200      	movs	r2, #0
 80032ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80032ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3730      	adds	r7, #48	@ 0x30
 80032f4:	46bd      	mov	sp, r7
 80032f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032fa:	bf00      	nop
 80032fc:	08003894 	.word	0x08003894
 8003300:	00f42400 	.word	0x00f42400

08003304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01a      	beq.n	800341a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003402:	d10a      	bne.n	800341a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]
  }
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b098      	sub	sp, #96	@ 0x60
 800344c:	af02      	add	r7, sp, #8
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003458:	f7fd fbd4 	bl	8000c04 <HAL_GetTick>
 800345c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b08      	cmp	r3, #8
 800346a:	d12f      	bne.n	80034cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800346c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003474:	2200      	movs	r2, #0
 8003476:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f88e 	bl	800359c <UART_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d022      	beq.n	80034cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348e:	e853 3f00 	ldrex	r3, [r3]
 8003492:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800349a:	653b      	str	r3, [r7, #80]	@ 0x50
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034ac:	e841 2300 	strex	r3, r2, [r1]
 80034b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e6      	bne.n	8003486 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e063      	b.n	8003594 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d149      	bne.n	800356e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e2:	2200      	movs	r2, #0
 80034e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f857 	bl	800359c <UART_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d03c      	beq.n	800356e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	623b      	str	r3, [r7, #32]
   return(result);
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003512:	633b      	str	r3, [r7, #48]	@ 0x30
 8003514:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e6      	bne.n	80034f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3308      	adds	r3, #8
 800352c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	60fb      	str	r3, [r7, #12]
   return(result);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3308      	adds	r3, #8
 8003544:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003546:	61fa      	str	r2, [r7, #28]
 8003548:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	69b9      	ldr	r1, [r7, #24]
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	e841 2300 	strex	r3, r2, [r1]
 8003552:	617b      	str	r3, [r7, #20]
   return(result);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e5      	bne.n	8003526 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e012      	b.n	8003594 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3758      	adds	r7, #88	@ 0x58
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ac:	e04f      	b.n	800364e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d04b      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b6:	f7fd fb25 	bl	8000c04 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d302      	bcc.n	80035cc <UART_WaitOnFlagUntilTimeout+0x30>
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e04e      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d037      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0xb2>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b80      	cmp	r3, #128	@ 0x80
 80035e2:	d034      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0xb2>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b40      	cmp	r3, #64	@ 0x40
 80035e8:	d031      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d110      	bne.n	800361a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2208      	movs	r2, #8
 80035fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f838 	bl	8003676 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2208      	movs	r2, #8
 800360a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e029      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003628:	d111      	bne.n	800364e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f81e 	bl	8003676 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e00f      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4013      	ands	r3, r2
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	429a      	cmp	r2, r3
 800365c:	bf0c      	ite	eq
 800365e:	2301      	moveq	r3, #1
 8003660:	2300      	movne	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	429a      	cmp	r2, r3
 800366a:	d0a0      	beq.n	80035ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003676:	b480      	push	{r7}
 8003678:	b095      	sub	sp, #84	@ 0x54
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003686:	e853 3f00 	ldrex	r3, [r3]
 800368a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800369c:	643b      	str	r3, [r7, #64]	@ 0x40
 800369e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036a4:	e841 2300 	strex	r3, r2, [r1]
 80036a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e6      	bne.n	800367e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3308      	adds	r3, #8
 80036b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	61fb      	str	r3, [r7, #28]
   return(result);
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3308      	adds	r3, #8
 80036d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e3      	bne.n	80036b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d118      	bne.n	8003722 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f023 0310 	bic.w	r3, r3, #16
 8003704:	647b      	str	r3, [r7, #68]	@ 0x44
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	6979      	ldr	r1, [r7, #20]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	e841 2300 	strex	r3, r2, [r1]
 800371a:	613b      	str	r3, [r7, #16]
   return(result);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e6      	bne.n	80036f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003736:	bf00      	nop
 8003738:	3754      	adds	r7, #84	@ 0x54
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <memset>:
 8003742:	4402      	add	r2, r0
 8003744:	4603      	mov	r3, r0
 8003746:	4293      	cmp	r3, r2
 8003748:	d100      	bne.n	800374c <memset+0xa>
 800374a:	4770      	bx	lr
 800374c:	f803 1b01 	strb.w	r1, [r3], #1
 8003750:	e7f9      	b.n	8003746 <memset+0x4>
	...

08003754 <__libc_init_array>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	4d0d      	ldr	r5, [pc, #52]	@ (800378c <__libc_init_array+0x38>)
 8003758:	4c0d      	ldr	r4, [pc, #52]	@ (8003790 <__libc_init_array+0x3c>)
 800375a:	1b64      	subs	r4, r4, r5
 800375c:	10a4      	asrs	r4, r4, #2
 800375e:	2600      	movs	r6, #0
 8003760:	42a6      	cmp	r6, r4
 8003762:	d109      	bne.n	8003778 <__libc_init_array+0x24>
 8003764:	4d0b      	ldr	r5, [pc, #44]	@ (8003794 <__libc_init_array+0x40>)
 8003766:	4c0c      	ldr	r4, [pc, #48]	@ (8003798 <__libc_init_array+0x44>)
 8003768:	f000 f818 	bl	800379c <_init>
 800376c:	1b64      	subs	r4, r4, r5
 800376e:	10a4      	asrs	r4, r4, #2
 8003770:	2600      	movs	r6, #0
 8003772:	42a6      	cmp	r6, r4
 8003774:	d105      	bne.n	8003782 <__libc_init_array+0x2e>
 8003776:	bd70      	pop	{r4, r5, r6, pc}
 8003778:	f855 3b04 	ldr.w	r3, [r5], #4
 800377c:	4798      	blx	r3
 800377e:	3601      	adds	r6, #1
 8003780:	e7ee      	b.n	8003760 <__libc_init_array+0xc>
 8003782:	f855 3b04 	ldr.w	r3, [r5], #4
 8003786:	4798      	blx	r3
 8003788:	3601      	adds	r6, #1
 800378a:	e7f2      	b.n	8003772 <__libc_init_array+0x1e>
 800378c:	080038b4 	.word	0x080038b4
 8003790:	080038b4 	.word	0x080038b4
 8003794:	080038b4 	.word	0x080038b4
 8003798:	080038b8 	.word	0x080038b8

0800379c <_init>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	bf00      	nop
 80037a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a2:	bc08      	pop	{r3}
 80037a4:	469e      	mov	lr, r3
 80037a6:	4770      	bx	lr

080037a8 <_fini>:
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	bf00      	nop
 80037ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ae:	bc08      	pop	{r3}
 80037b0:	469e      	mov	lr, r3
 80037b2:	4770      	bx	lr
