
exti_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004610  08004610  00005610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004768  08004768  00005768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004770  08004770  00005770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08004774  08004774  00005774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000000c  20000008  08004778  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000014c  20000014  08004784  00006014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000160  08004784  00006160  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010a3e  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000242a  00000000  00000000  00016a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001268  00000000  00000000  00018eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e06  00000000  00000000  0001a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021045  00000000  00000000  0001af1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000fb07  00000000  00000000  0003bf63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d5111  00000000  00000000  0004ba6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00120b7b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c94  00000000  00000000  00120bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  00125854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	080045f8 	.word	0x080045f8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	080045f8 	.word	0x080045f8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96a 	b.w	8000478 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	460c      	mov	r4, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14e      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001c8:	4694      	mov	ip, r2
 80001ca:	458c      	cmp	ip, r1
 80001cc:	4686      	mov	lr, r0
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	d962      	bls.n	800029a <__udivmoddi4+0xde>
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0320 	rsb	r3, r2, #32
 80001da:	4091      	lsls	r1, r2
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	4319      	orrs	r1, r3
 80001e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ee:	fa1f f68c 	uxth.w	r6, ip
 80001f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001fa:	fb07 1114 	mls	r1, r7, r4, r1
 80001fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000202:	fb04 f106 	mul.w	r1, r4, r6
 8000206:	4299      	cmp	r1, r3
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x64>
 800020a:	eb1c 0303 	adds.w	r3, ip, r3
 800020e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000212:	f080 8112 	bcs.w	800043a <__udivmoddi4+0x27e>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 810f 	bls.w	800043a <__udivmoddi4+0x27e>
 800021c:	3c02      	subs	r4, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a59      	subs	r1, r3, r1
 8000222:	fa1f f38e 	uxth.w	r3, lr
 8000226:	fbb1 f0f7 	udiv	r0, r1, r7
 800022a:	fb07 1110 	mls	r1, r7, r0, r1
 800022e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000232:	fb00 f606 	mul.w	r6, r0, r6
 8000236:	429e      	cmp	r6, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000242:	f080 80fc 	bcs.w	800043e <__udivmoddi4+0x282>
 8000246:	429e      	cmp	r6, r3
 8000248:	f240 80f9 	bls.w	800043e <__udivmoddi4+0x282>
 800024c:	4463      	add	r3, ip
 800024e:	3802      	subs	r0, #2
 8000250:	1b9b      	subs	r3, r3, r6
 8000252:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000256:	2100      	movs	r1, #0
 8000258:	b11d      	cbz	r5, 8000262 <__udivmoddi4+0xa6>
 800025a:	40d3      	lsrs	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	e9c5 3200 	strd	r3, r2, [r5]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d905      	bls.n	8000276 <__udivmoddi4+0xba>
 800026a:	b10d      	cbz	r5, 8000270 <__udivmoddi4+0xb4>
 800026c:	e9c5 0100 	strd	r0, r1, [r5]
 8000270:	2100      	movs	r1, #0
 8000272:	4608      	mov	r0, r1
 8000274:	e7f5      	b.n	8000262 <__udivmoddi4+0xa6>
 8000276:	fab3 f183 	clz	r1, r3
 800027a:	2900      	cmp	r1, #0
 800027c:	d146      	bne.n	800030c <__udivmoddi4+0x150>
 800027e:	42a3      	cmp	r3, r4
 8000280:	d302      	bcc.n	8000288 <__udivmoddi4+0xcc>
 8000282:	4290      	cmp	r0, r2
 8000284:	f0c0 80f0 	bcc.w	8000468 <__udivmoddi4+0x2ac>
 8000288:	1a86      	subs	r6, r0, r2
 800028a:	eb64 0303 	sbc.w	r3, r4, r3
 800028e:	2001      	movs	r0, #1
 8000290:	2d00      	cmp	r5, #0
 8000292:	d0e6      	beq.n	8000262 <__udivmoddi4+0xa6>
 8000294:	e9c5 6300 	strd	r6, r3, [r5]
 8000298:	e7e3      	b.n	8000262 <__udivmoddi4+0xa6>
 800029a:	2a00      	cmp	r2, #0
 800029c:	f040 8090 	bne.w	80003c0 <__udivmoddi4+0x204>
 80002a0:	eba1 040c 	sub.w	r4, r1, ip
 80002a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a8:	fa1f f78c 	uxth.w	r7, ip
 80002ac:	2101      	movs	r1, #1
 80002ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb08 4416 	mls	r4, r8, r6, r4
 80002ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002be:	fb07 f006 	mul.w	r0, r7, r6
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x11c>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002d0:	4298      	cmp	r0, r3
 80002d2:	f200 80cd 	bhi.w	8000470 <__udivmoddi4+0x2b4>
 80002d6:	4626      	mov	r6, r4
 80002d8:	1a1c      	subs	r4, r3, r0
 80002da:	fa1f f38e 	uxth.w	r3, lr
 80002de:	fbb4 f0f8 	udiv	r0, r4, r8
 80002e2:	fb08 4410 	mls	r4, r8, r0, r4
 80002e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ea:	fb00 f707 	mul.w	r7, r0, r7
 80002ee:	429f      	cmp	r7, r3
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x148>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x146>
 80002fc:	429f      	cmp	r7, r3
 80002fe:	f200 80b0 	bhi.w	8000462 <__udivmoddi4+0x2a6>
 8000302:	4620      	mov	r0, r4
 8000304:	1bdb      	subs	r3, r3, r7
 8000306:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030a:	e7a5      	b.n	8000258 <__udivmoddi4+0x9c>
 800030c:	f1c1 0620 	rsb	r6, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 f706 	lsr.w	r7, r2, r6
 8000316:	431f      	orrs	r7, r3
 8000318:	fa20 fc06 	lsr.w	ip, r0, r6
 800031c:	fa04 f301 	lsl.w	r3, r4, r1
 8000320:	ea43 030c 	orr.w	r3, r3, ip
 8000324:	40f4      	lsrs	r4, r6
 8000326:	fa00 f801 	lsl.w	r8, r0, r1
 800032a:	0c38      	lsrs	r0, r7, #16
 800032c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000330:	fbb4 fef0 	udiv	lr, r4, r0
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fb00 441e 	mls	r4, r0, lr, r4
 800033c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000340:	fb0e f90c 	mul.w	r9, lr, ip
 8000344:	45a1      	cmp	r9, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x1a6>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000352:	f080 8084 	bcs.w	800045e <__udivmoddi4+0x2a2>
 8000356:	45a1      	cmp	r9, r4
 8000358:	f240 8081 	bls.w	800045e <__udivmoddi4+0x2a2>
 800035c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000360:	443c      	add	r4, r7
 8000362:	eba4 0409 	sub.w	r4, r4, r9
 8000366:	fa1f f983 	uxth.w	r9, r3
 800036a:	fbb4 f3f0 	udiv	r3, r4, r0
 800036e:	fb00 4413 	mls	r4, r0, r3, r4
 8000372:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000376:	fb03 fc0c 	mul.w	ip, r3, ip
 800037a:	45a4      	cmp	ip, r4
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x1d2>
 800037e:	193c      	adds	r4, r7, r4
 8000380:	f103 30ff 	add.w	r0, r3, #4294967295
 8000384:	d267      	bcs.n	8000456 <__udivmoddi4+0x29a>
 8000386:	45a4      	cmp	ip, r4
 8000388:	d965      	bls.n	8000456 <__udivmoddi4+0x29a>
 800038a:	3b02      	subs	r3, #2
 800038c:	443c      	add	r4, r7
 800038e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000392:	fba0 9302 	umull	r9, r3, r0, r2
 8000396:	eba4 040c 	sub.w	r4, r4, ip
 800039a:	429c      	cmp	r4, r3
 800039c:	46ce      	mov	lr, r9
 800039e:	469c      	mov	ip, r3
 80003a0:	d351      	bcc.n	8000446 <__udivmoddi4+0x28a>
 80003a2:	d04e      	beq.n	8000442 <__udivmoddi4+0x286>
 80003a4:	b155      	cbz	r5, 80003bc <__udivmoddi4+0x200>
 80003a6:	ebb8 030e 	subs.w	r3, r8, lr
 80003aa:	eb64 040c 	sbc.w	r4, r4, ip
 80003ae:	fa04 f606 	lsl.w	r6, r4, r6
 80003b2:	40cb      	lsrs	r3, r1
 80003b4:	431e      	orrs	r6, r3
 80003b6:	40cc      	lsrs	r4, r1
 80003b8:	e9c5 6400 	strd	r6, r4, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	e750      	b.n	8000262 <__udivmoddi4+0xa6>
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa24 f303 	lsr.w	r3, r4, r3
 80003d0:	4094      	lsls	r4, r2
 80003d2:	430c      	orrs	r4, r1
 80003d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3110 	mls	r1, r8, r0, r3
 80003e8:	0c23      	lsrs	r3, r4, #16
 80003ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ee:	fb00 f107 	mul.w	r1, r0, r7
 80003f2:	4299      	cmp	r1, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x24c>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fe:	d22c      	bcs.n	800045a <__udivmoddi4+0x29e>
 8000400:	4299      	cmp	r1, r3
 8000402:	d92a      	bls.n	800045a <__udivmoddi4+0x29e>
 8000404:	3802      	subs	r0, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a5b      	subs	r3, r3, r1
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000410:	fb08 3311 	mls	r3, r8, r1, r3
 8000414:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000418:	fb01 f307 	mul.w	r3, r1, r7
 800041c:	42a3      	cmp	r3, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x276>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f101 36ff 	add.w	r6, r1, #4294967295
 8000428:	d213      	bcs.n	8000452 <__udivmoddi4+0x296>
 800042a:	42a3      	cmp	r3, r4
 800042c:	d911      	bls.n	8000452 <__udivmoddi4+0x296>
 800042e:	3902      	subs	r1, #2
 8000430:	4464      	add	r4, ip
 8000432:	1ae4      	subs	r4, r4, r3
 8000434:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000438:	e739      	b.n	80002ae <__udivmoddi4+0xf2>
 800043a:	4604      	mov	r4, r0
 800043c:	e6f0      	b.n	8000220 <__udivmoddi4+0x64>
 800043e:	4608      	mov	r0, r1
 8000440:	e706      	b.n	8000250 <__udivmoddi4+0x94>
 8000442:	45c8      	cmp	r8, r9
 8000444:	d2ae      	bcs.n	80003a4 <__udivmoddi4+0x1e8>
 8000446:	ebb9 0e02 	subs.w	lr, r9, r2
 800044a:	eb63 0c07 	sbc.w	ip, r3, r7
 800044e:	3801      	subs	r0, #1
 8000450:	e7a8      	b.n	80003a4 <__udivmoddi4+0x1e8>
 8000452:	4631      	mov	r1, r6
 8000454:	e7ed      	b.n	8000432 <__udivmoddi4+0x276>
 8000456:	4603      	mov	r3, r0
 8000458:	e799      	b.n	800038e <__udivmoddi4+0x1d2>
 800045a:	4630      	mov	r0, r6
 800045c:	e7d4      	b.n	8000408 <__udivmoddi4+0x24c>
 800045e:	46d6      	mov	lr, sl
 8000460:	e77f      	b.n	8000362 <__udivmoddi4+0x1a6>
 8000462:	4463      	add	r3, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e74d      	b.n	8000304 <__udivmoddi4+0x148>
 8000468:	4606      	mov	r6, r0
 800046a:	4623      	mov	r3, r4
 800046c:	4608      	mov	r0, r1
 800046e:	e70f      	b.n	8000290 <__udivmoddi4+0xd4>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	e730      	b.n	80002d8 <__udivmoddi4+0x11c>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000498:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
	...

080004b0 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 80004ba:	88fb      	ldrh	r3, [r7, #6]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d102      	bne.n	80004c6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		exti_interupt=true;
 80004c0:	4b04      	ldr	r3, [pc, #16]	@ (80004d4 <HAL_GPIO_EXTI_Callback+0x24>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]
	}
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000158 	.word	0x20000158

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fbc1 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f881 	bl	80005e8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e6:	f000 f8db 	bl	80006a0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f98d 	bl	8000808 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004ee:	f000 f8f5 	bl	80006dc <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80004f2:	f000 f93d 	bl	8000770 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  char* str = "Going into SLEEP MODE in 5 seconds\r\n";
 80004f6:	4b36      	ldr	r3, [pc, #216]	@ (80005d0 <main+0xf8>)
 80004f8:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f7ff fe3e 	bl	800017c <strlen>
 8000500:	4603      	mov	r3, r0
 8000502:	b29a      	uxth	r2, r3
 8000504:	f04f 33ff 	mov.w	r3, #4294967295
 8000508:	6879      	ldr	r1, [r7, #4]
 800050a:	4832      	ldr	r0, [pc, #200]	@ (80005d4 <main+0xfc>)
 800050c:	f002 feae 	bl	800326c <HAL_UART_Transmit>

  for (int i = 0; i < 10; i++) {
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	e00a      	b.n	800052c <main+0x54>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000516:	2102      	movs	r1, #2
 8000518:	482f      	ldr	r0, [pc, #188]	@ (80005d8 <main+0x100>)
 800051a:	f000 ffc3 	bl	80014a4 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800051e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000522:	f000 fc25 	bl	8000d70 <HAL_Delay>
  for (int i = 0; i < 10; i++) {
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	3301      	adds	r3, #1
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	2b09      	cmp	r3, #9
 8000530:	ddf1      	ble.n	8000516 <main+0x3e>
	}

  HAL_SuspendTick();
 8000532:	f000 fc41 	bl	8000db8 <HAL_SuspendTick>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2102      	movs	r1, #2
 800053a:	4827      	ldr	r0, [pc, #156]	@ (80005d8 <main+0x100>)
 800053c:	f000 ff9a 	bl	8001474 <HAL_GPIO_WritePin>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // enter STOP MODE
 8000540:	2101      	movs	r1, #1
 8000542:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000546:	f000 ffef 	bl	8001528 <HAL_PWR_EnterSTOPMode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(exti_interupt)
 800054a:	4b24      	ldr	r3, [pc, #144]	@ (80005dc <main+0x104>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0fb      	beq.n	800054a <main+0x72>
	  {
		exti_interupt=false;
 8000552:	4b22      	ldr	r3, [pc, #136]	@ (80005dc <main+0x104>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
		SystemClock_Config();
 8000558:	f000 f846 	bl	80005e8 <SystemClock_Config>
		HAL_ResumeTick();
 800055c:	f000 fc3c 	bl	8000dd8 <HAL_ResumeTick>
		char *str = "WAKEUP FROM EXTII\n\n";
 8000560:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <main+0x108>)
 8000562:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen (str), HAL_MAX_DELAY);
 8000564:	6838      	ldr	r0, [r7, #0]
 8000566:	f7ff fe09 	bl	800017c <strlen>
 800056a:	4603      	mov	r3, r0
 800056c:	b29a      	uxth	r2, r3
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	6839      	ldr	r1, [r7, #0]
 8000574:	4817      	ldr	r0, [pc, #92]	@ (80005d4 <main+0xfc>)
 8000576:	f002 fe79 	bl	800326c <HAL_UART_Transmit>

		for (int i = 0; i < 10; i++) {
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	e00a      	b.n	8000596 <main+0xbe>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000580:	2102      	movs	r1, #2
 8000582:	4815      	ldr	r0, [pc, #84]	@ (80005d8 <main+0x100>)
 8000584:	f000 ff8e 	bl	80014a4 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8000588:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800058c:	f000 fbf0 	bl	8000d70 <HAL_Delay>
		for (int i = 0; i < 10; i++) {
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	3301      	adds	r3, #1
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	2b09      	cmp	r3, #9
 800059a:	ddf1      	ble.n	8000580 <main+0xa8>
		}

		str = "GOING BACK TO SLEEP AFTER 5 BLINKS \n\n";
 800059c:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <main+0x10c>)
 800059e:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen (str), HAL_MAX_DELAY);
 80005a0:	6838      	ldr	r0, [r7, #0]
 80005a2:	f7ff fdeb 	bl	800017c <strlen>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	6839      	ldr	r1, [r7, #0]
 80005b0:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <main+0xfc>)
 80005b2:	f002 fe5b 	bl	800326c <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2102      	movs	r1, #2
 80005ba:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <main+0x100>)
 80005bc:	f000 ff5a 	bl	8001474 <HAL_GPIO_WritePin>

		HAL_SuspendTick();
 80005c0:	f000 fbfa 	bl	8000db8 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // enter STOP MODE
 80005c4:	2101      	movs	r1, #1
 80005c6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80005ca:	f000 ffad 	bl	8001528 <HAL_PWR_EnterSTOPMode>
	  if(exti_interupt)
 80005ce:	e7bc      	b.n	800054a <main+0x72>
 80005d0:	08004610 	.word	0x08004610
 80005d4:	200000c4 	.word	0x200000c4
 80005d8:	48000400 	.word	0x48000400
 80005dc:	20000158 	.word	0x20000158
 80005e0:	08004638 	.word	0x08004638
 80005e4:	0800464c 	.word	0x0800464c

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09a      	sub	sp, #104	@ 0x68
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2248      	movs	r2, #72	@ 0x48
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 ffd2 	bl	80045a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060e:	4b23      	ldr	r3, [pc, #140]	@ (800069c <SystemClock_Config+0xb4>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000616:	4a21      	ldr	r2, [pc, #132]	@ (800069c <SystemClock_Config+0xb4>)
 8000618:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <SystemClock_Config+0xb4>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800062a:	2323      	movs	r3, #35	@ 0x23
 800062c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000632:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000638:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800063a:	2301      	movs	r3, #1
 800063c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063e:	2340      	movs	r3, #64	@ 0x40
 8000640:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000642:	2300      	movs	r3, #0
 8000644:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000646:	23a0      	movs	r3, #160	@ 0xa0
 8000648:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064a:	2300      	movs	r3, #0
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fb5a 	bl	8001d0c <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800065e:	f000 f949 	bl	80008f4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000662:	236f      	movs	r3, #111	@ 0x6f
 8000664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2101      	movs	r1, #1
 8000682:	4618      	mov	r0, r3
 8000684:	f001 feb6 	bl	80023f4 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800068e:	f000 f931 	bl	80008f4 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3768      	adds	r7, #104	@ 0x68
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	58000400 	.word	0x58000400

080006a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	@ 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2250      	movs	r2, #80	@ 0x50
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f003 ff77 	bl	80045a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80006b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80006bc:	2300      	movs	r3, #0
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fad3 	bl	8002c6e <HAL_RCCEx_PeriphCLKConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80006ce:	f000 f911 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	@ 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 80006e2:	4a22      	ldr	r2, [pc, #136]	@ (800076c <MX_LPUART1_UART_Init+0x90>)
 80006e4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 80006e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006ec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 800071e:	4812      	ldr	r0, [pc, #72]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 8000720:	f002 fd4c 	bl	80031bc <HAL_HalfDuplex_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800072a:	f000 f8e3 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800072e:	2100      	movs	r1, #0
 8000730:	480d      	ldr	r0, [pc, #52]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 8000732:	f003 fe6a 	bl	800440a <HAL_UARTEx_SetTxFifoThreshold>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800073c:	f000 f8da 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4809      	ldr	r0, [pc, #36]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 8000744:	f003 fe9f 	bl	8004486 <HAL_UARTEx_SetRxFifoThreshold>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800074e:	f000 f8d1 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 8000754:	f003 fe20 	bl	8004398 <HAL_UARTEx_DisableFifoMode>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800075e:	f000 f8c9 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000030 	.word	0x20000030
 800076c:	40008000 	.word	0x40008000

08000770 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000774:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 8000776:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <MX_USART1_UART_Init+0x94>)
 8000778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800077a:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 800077c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b2:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80007b8:	4811      	ldr	r0, [pc, #68]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007ba:	f002 fcff 	bl	80031bc <HAL_HalfDuplex_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007c4:	f000 f896 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007cc:	f003 fe1d 	bl	800440a <HAL_UARTEx_SetTxFifoThreshold>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007d6:	f000 f88d 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4808      	ldr	r0, [pc, #32]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007de:	f003 fe52 	bl	8004486 <HAL_UARTEx_SetRxFifoThreshold>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007e8:	f000 f884 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_USART1_UART_Init+0x90>)
 80007ee:	f003 fdd3 	bl	8004398 <HAL_UARTEx_DisableFifoMode>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007f8:	f000 f87c 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000c4 	.word	0x200000c4
 8000804:	40013800 	.word	0x40013800

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081c:	2004      	movs	r0, #4
 800081e:	f7ff fe2d 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2002      	movs	r0, #2
 8000824:	f7ff fe2a 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	2001      	movs	r0, #1
 800082a:	f7ff fe27 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2008      	movs	r0, #8
 8000830:	f7ff fe24 	bl	800047c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2123      	movs	r1, #35	@ 0x23
 8000838:	482b      	ldr	r0, [pc, #172]	@ (80008e8 <MX_GPIO_Init+0xe0>)
 800083a:	f000 fe1b 	bl	8001474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083e:	2310      	movs	r3, #16
 8000840:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4827      	ldr	r0, [pc, #156]	@ (80008ec <MX_GPIO_Init+0xe4>)
 8000850:	f000 fca0 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000854:	2323      	movs	r3, #35	@ 0x23
 8000856:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4619      	mov	r1, r3
 8000868:	481f      	ldr	r0, [pc, #124]	@ (80008e8 <MX_GPIO_Init+0xe0>)
 800086a:	f000 fc93 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800086e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000872:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000880:	230a      	movs	r3, #10
 8000882:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088c:	f000 fc82 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_0_Pin */
  GPIO_InitStruct.Pin = BTN_0_Pin;
 8000890:	2301      	movs	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000894:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000898:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089a:	2301      	movs	r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN_0_GPIO_Port, &GPIO_InitStruct);
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4813      	ldr	r0, [pc, #76]	@ (80008f0 <MX_GPIO_Init+0xe8>)
 80008a4:	f000 fc76 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008a8:	2302      	movs	r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4619      	mov	r1, r3
 80008ba:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <MX_GPIO_Init+0xe8>)
 80008bc:	f000 fc6a 	bl	8001194 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2006      	movs	r0, #6
 80008c6:	f000 fb72 	bl	8000fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008ca:	2006      	movs	r0, #6
 80008cc:	f000 fb89 	bl	8000fe2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2007      	movs	r0, #7
 80008d6:	f000 fb6a 	bl	8000fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80008da:	2007      	movs	r0, #7
 80008dc:	f000 fb81 	bl	8000fe2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e0:	bf00      	nop
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	48000400 	.word	0x48000400
 80008ec:	48000800 	.word	0x48000800
 80008f0:	48000c00 	.word	0x48000c00

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <Error_Handler+0x8>

08000900 <LL_AHB2_GRP1_EnableClock>:
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800090c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800090e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4313      	orrs	r3, r2
 8000916:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800091c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000924:	68fb      	ldr	r3, [r7, #12]
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000932:	b480      	push	{r7}
 8000934:	b085      	sub	sp, #20
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800093a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800093e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000940:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4313      	orrs	r3, r2
 8000948:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800094a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800094e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4013      	ands	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000956:	68fb      	ldr	r3, [r7, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800096c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000970:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000972:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4313      	orrs	r3, r2
 800097a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800097c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000980:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000988:	68fb      	ldr	r3, [r7, #12]
}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09c      	sub	sp, #112	@ 0x70
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2250      	movs	r2, #80	@ 0x50
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 fdeb 	bl	80045a0 <memset>
  if(huart->Instance==LPUART1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a37      	ldr	r2, [pc, #220]	@ (8000aac <HAL_UART_MspInit+0x108>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d12c      	bne.n	8000a2e <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009d4:	2302      	movs	r3, #2
 80009d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 f944 	bl	8002c6e <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009ec:	f7ff ff82 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff ff9e 	bl	8000932 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2004      	movs	r0, #4
 80009f8:	f7ff ff82 	bl	8000900 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009fc:	2302      	movs	r3, #2
 80009fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a00:	2312      	movs	r3, #18
 8000a02:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a10:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a14:	4619      	mov	r1, r3
 8000a16:	4826      	ldr	r0, [pc, #152]	@ (8000ab0 <HAL_UART_MspInit+0x10c>)
 8000a18:	f000 fbbc 	bl	8001194 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2025      	movs	r0, #37	@ 0x25
 8000a22:	f000 fac4 	bl	8000fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000a26:	2025      	movs	r0, #37	@ 0x25
 8000a28:	f000 fadb 	bl	8000fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a2c:	e039      	b.n	8000aa2 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART1)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a20      	ldr	r2, [pc, #128]	@ (8000ab4 <HAL_UART_MspInit+0x110>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d134      	bne.n	8000aa2 <HAL_UART_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 f912 	bl	8002c6e <HAL_RCCEx_PeriphCLKConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <HAL_UART_MspInit+0xb0>
      Error_Handler();
 8000a50:	f7ff ff50 	bl	80008f4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a54:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a58:	f7ff ff84 	bl	8000964 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f7ff ff4f 	bl	8000900 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 8000a62:	2340      	movs	r3, #64	@ 0x40
 8000a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a66:	2312      	movs	r3, #18
 8000a68:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a72:	2307      	movs	r3, #7
 8000a74:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480e      	ldr	r0, [pc, #56]	@ (8000ab8 <HAL_UART_MspInit+0x114>)
 8000a7e:	f000 fb89 	bl	8001194 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 8000a82:	2380      	movs	r3, #128	@ 0x80
 8000a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a92:	2307      	movs	r3, #7
 8000a94:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4806      	ldr	r0, [pc, #24]	@ (8000ab8 <HAL_UART_MspInit+0x114>)
 8000a9e:	f000 fb79 	bl	8001194 <HAL_GPIO_Init>
}
 8000aa2:	bf00      	nop
 8000aa4:	3770      	adds	r7, #112	@ 0x70
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40008000 	.word	0x40008000
 8000ab0:	48000800 	.word	0x48000800
 8000ab4:	40013800 	.word	0x40013800
 8000ab8:	48000400 	.word	0x48000400

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b12:	f000 f901 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_0_Pin);
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f000 fcda 	bl	80014d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f000 fcd3 	bl	80014d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000b3c:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <LPUART1_IRQHandler+0x10>)
 8000b3e:	f002 fc23 	bl	8003388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000030 	.word	0x20000030

08000b4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000b50:	4b24      	ldr	r3, [pc, #144]	@ (8000be4 <SystemInit+0x98>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b56:	4a23      	ldr	r2, [pc, #140]	@ (8000be4 <SystemInit+0x98>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b74:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000b78:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <SystemInit+0x9c>)
 8000b86:	4013      	ands	r3, r2
 8000b88:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b96:	f023 0305 	bic.w	r3, r3, #5
 8000b9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000ba6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000baa:	f023 0301 	bic.w	r3, r3, #1
 8000bae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8000bec <SystemInit+0xa0>)
 8000bb8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000bec <SystemInit+0xa0>)
 8000bc0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000bcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bd0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00
 8000be8:	faf6fefb 	.word	0xfaf6fefb
 8000bec:	22041000 	.word	0x22041000

08000bf0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000bf0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf4:	3304      	adds	r3, #4

08000bf6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000bfa:	d3f9      	bcc.n	8000bf0 <CopyDataInit>
  bx lr
 8000bfc:	4770      	bx	lr

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000bfe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000c00:	3004      	adds	r0, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000c02:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>
  bx lr
 8000c06:	4770      	bx	lr

08000c08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c0c:	f7ff ff9e 	bl	8000b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000c10:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <LoopForever+0x6>)
 8000c12:	490c      	ldr	r1, [pc, #48]	@ (8000c44 <LoopForever+0xa>)
 8000c14:	4a0c      	ldr	r2, [pc, #48]	@ (8000c48 <LoopForever+0xe>)
 8000c16:	2300      	movs	r3, #0
 8000c18:	f7ff ffed 	bl	8000bf6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000c1c:	480b      	ldr	r0, [pc, #44]	@ (8000c4c <LoopForever+0x12>)
 8000c1e:	490c      	ldr	r1, [pc, #48]	@ (8000c50 <LoopForever+0x16>)
 8000c20:	4a0c      	ldr	r2, [pc, #48]	@ (8000c54 <LoopForever+0x1a>)
 8000c22:	2300      	movs	r3, #0
 8000c24:	f7ff ffe7 	bl	8000bf6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000c28:	480b      	ldr	r0, [pc, #44]	@ (8000c58 <LoopForever+0x1e>)
 8000c2a:	490c      	ldr	r1, [pc, #48]	@ (8000c5c <LoopForever+0x22>)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f7ff ffe8 	bl	8000c02 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c32:	f003 fcbd 	bl	80045b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c36:	f7ff fc4f 	bl	80004d8 <main>

08000c3a <LoopForever>:

LoopForever:
  b LoopForever
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
  ldr   r0, =_estack
 8000c3c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000014 	.word	0x20000014
 8000c48:	08004778 	.word	0x08004778
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000c4c:	20030000 	.word	0x20030000
 8000c50:	20030000 	.word	0x20030000
 8000c54:	08004784 	.word	0x08004784
  INIT_BSS _sbss, _ebss
 8000c58:	20000014 	.word	0x20000014
 8000c5c:	20000160 	.word	0x20000160

08000c60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <HAL_Init+0x3c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca0 <HAL_Init+0x3c>)
 8000c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	f000 f98c 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c80:	2000      	movs	r0, #0
 8000c82:	f000 f80f 	bl	8000ca4 <HAL_InitTick>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	71fb      	strb	r3, [r7, #7]
 8000c90:	e001      	b.n	8000c96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c92:	f7ff fe80 	bl	8000996 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c96:	79fb      	ldrb	r3, [r7, #7]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	58004000 	.word	0x58004000

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000cb0:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <HAL_InitTick+0x6c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d024      	beq.n	8000d02 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cb8:	f001 fd48 	bl	800274c <HAL_RCC_GetHCLKFreq>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <HAL_InitTick+0x6c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 f994 	bl	8000ffe <HAL_SYSTICK_Config>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d10f      	bne.n	8000cfc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b0f      	cmp	r3, #15
 8000ce0:	d809      	bhi.n	8000cf6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	6879      	ldr	r1, [r7, #4]
 8000ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cea:	f000 f960 	bl	8000fae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cee:	4a09      	ldr	r2, [pc, #36]	@ (8000d14 <HAL_InitTick+0x70>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	e007      	b.n	8000d06 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	73fb      	strb	r3, [r7, #15]
 8000cfa:	e004      	b.n	8000d06 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
 8000d00:	e001      	b.n	8000d06 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000010 	.word	0x20000010
 8000d14:	2000000c 	.word	0x2000000c

08000d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000010 	.word	0x20000010
 8000d3c:	2000015c 	.word	0x2000015c

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	2000015c 	.word	0x2000015c

08000d58 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <HAL_GetTickPrio+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	2000000c 	.word	0x2000000c

08000d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff ffe2 	bl	8000d40 <HAL_GetTick>
 8000d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d88:	d005      	beq.n	8000d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <HAL_Delay+0x44>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d96:	bf00      	nop
 8000d98:	f7ff ffd2 	bl	8000d40 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d8f7      	bhi.n	8000d98 <HAL_Delay+0x28>
  {
  }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000010 	.word	0x20000010

08000db8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000dbc:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <HAL_SuspendTick+0x1c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	@ (8000dd4 <HAL_SuspendTick+0x1c>)
 8000dc2:	f023 0302 	bic.w	r3, r3, #2
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <HAL_ResumeTick+0x1c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <HAL_ResumeTick+0x1c>)
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	@ (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	@ (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	@ (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	@ 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	@ 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f7ff ff8e 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff29 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff40 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff90 	bl	8000eec <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5f 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff33 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffa4 	bl	8000f54 <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e04f      	b.n	80010c8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d008      	beq.n	8001046 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2204      	movs	r2, #4
 8001038:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e040      	b.n	80010c8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 020e 	bic.w	r2, r2, #14
 8001054:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001060:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001064:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0201 	bic.w	r2, r2, #1
 8001074:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	f003 021c 	and.w	r2, r3, #28
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f202 	lsl.w	r2, r1, r2
 8001088:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001092:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00c      	beq.n	80010b6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d005      	beq.n	80010f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2204      	movs	r2, #4
 80010f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	e047      	b.n	8001188 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 020e 	bic.w	r2, r2, #14
 8001106:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0201 	bic.w	r2, r2, #1
 8001116:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001122:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001126:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112c:	f003 021c 	and.w	r2, r3, #28
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	2101      	movs	r1, #1
 8001136:	fa01 f202 	lsl.w	r2, r1, r2
 800113a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001144:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00c      	beq.n	8001168 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001158:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800115c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001166:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	4798      	blx	r3
    }
  }
  return status;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a2:	e14c      	b.n	800143e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	fa01 f303 	lsl.w	r3, r1, r3
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 813e 	beq.w	8001438 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d005      	beq.n	80011d4 <HAL_GPIO_Init+0x40>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d130      	bne.n	8001236 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800120a:	2201      	movs	r2, #1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	f003 0201 	and.w	r2, r3, #1
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b03      	cmp	r3, #3
 8001240:	d017      	beq.n	8001272 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d123      	bne.n	80012c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	691a      	ldr	r2, [r3, #16]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	6939      	ldr	r1, [r7, #16]
 80012c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0203 	and.w	r2, r3, #3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8098 	beq.w	8001438 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001308:	4a54      	ldr	r2, [pc, #336]	@ (800145c <HAL_GPIO_Init+0x2c8>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001332:	d019      	beq.n	8001368 <HAL_GPIO_Init+0x1d4>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a4a      	ldr	r2, [pc, #296]	@ (8001460 <HAL_GPIO_Init+0x2cc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d013      	beq.n	8001364 <HAL_GPIO_Init+0x1d0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a49      	ldr	r2, [pc, #292]	@ (8001464 <HAL_GPIO_Init+0x2d0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d00d      	beq.n	8001360 <HAL_GPIO_Init+0x1cc>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a48      	ldr	r2, [pc, #288]	@ (8001468 <HAL_GPIO_Init+0x2d4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d007      	beq.n	800135c <HAL_GPIO_Init+0x1c8>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a47      	ldr	r2, [pc, #284]	@ (800146c <HAL_GPIO_Init+0x2d8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d101      	bne.n	8001358 <HAL_GPIO_Init+0x1c4>
 8001354:	2304      	movs	r3, #4
 8001356:	e008      	b.n	800136a <HAL_GPIO_Init+0x1d6>
 8001358:	2307      	movs	r3, #7
 800135a:	e006      	b.n	800136a <HAL_GPIO_Init+0x1d6>
 800135c:	2303      	movs	r3, #3
 800135e:	e004      	b.n	800136a <HAL_GPIO_Init+0x1d6>
 8001360:	2302      	movs	r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x1d6>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <HAL_GPIO_Init+0x1d6>
 8001368:	2300      	movs	r3, #0
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	f002 0203 	and.w	r2, r2, #3
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	4093      	lsls	r3, r2
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800137a:	4938      	ldr	r1, [pc, #224]	@ (800145c <HAL_GPIO_Init+0x2c8>)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001388:	4b39      	ldr	r3, [pc, #228]	@ (8001470 <HAL_GPIO_Init+0x2dc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ac:	4a30      	ldr	r2, [pc, #192]	@ (8001470 <HAL_GPIO_Init+0x2dc>)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001470 <HAL_GPIO_Init+0x2dc>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013d6:	4a26      	ldr	r2, [pc, #152]	@ (8001470 <HAL_GPIO_Init+0x2dc>)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013dc:	4b24      	ldr	r3, [pc, #144]	@ (8001470 <HAL_GPIO_Init+0x2dc>)
 80013de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001402:	4a1b      	ldr	r2, [pc, #108]	@ (8001470 <HAL_GPIO_Init+0x2dc>)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800140a:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <HAL_GPIO_Init+0x2dc>)
 800140c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001430:	4a0f      	ldr	r2, [pc, #60]	@ (8001470 <HAL_GPIO_Init+0x2dc>)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	f47f aeab 	bne.w	80011a4 <HAL_GPIO_Init+0x10>
  }
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40010000 	.word	0x40010000
 8001460:	48000400 	.word	0x48000400
 8001464:	48000800 	.word	0x48000800
 8001468:	48000c00 	.word	0x48000c00
 800146c:	48001000 	.word	0x48001000
 8001470:	58000800 	.word	0x58000800

08001474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
 8001480:	4613      	mov	r3, r2
 8001482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001484:	787b      	ldrb	r3, [r7, #1]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001490:	e002      	b.n	8001498 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4013      	ands	r3, r2
 80014bc:	041a      	lsls	r2, r3, #16
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43d9      	mvns	r1, r3
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	400b      	ands	r3, r1
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014e2:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d006      	beq.n	80014fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ee:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe ffda 	bl	80004b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	58000800 	.word	0x58000800

08001508 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a04      	ldr	r2, [pc, #16]	@ (8001524 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	58000400 	.word	0x58000400

08001528 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if (Regulator == PWR_LOWPOWERREGULATOR_ON)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800153a:	d104      	bne.n	8001546 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f842 	bl	80015c8 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8001544:	e003      	b.n	800154e <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f813 	bl	8001574 <HAL_PWREx_EnterSTOP0Mode>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800155c:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <HAL_PWREx_GetVoltageRange+0x18>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	58000400 	.word	0x58000400

08001574 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a0f      	ldr	r2, [pc, #60]	@ (80015c0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001584:	f023 0307 	bic.w	r3, r3, #7
 8001588:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	4a0d      	ldr	r2, [pc, #52]	@ (80015c4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800159c:	bf30      	wfi
 800159e:	e002      	b.n	80015a6 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80015a0:	bf40      	sev
    __WFE();
 80015a2:	bf20      	wfe
    __WFE();
 80015a4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80015a6:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	4a06      	ldr	r2, [pc, #24]	@ (80015c4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80015ac:	f023 0304 	bic.w	r3, r3, #4
 80015b0:	6113      	str	r3, [r2, #16]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	58000400 	.word	0x58000400
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 0307 	bic.w	r3, r3, #7
 80015da:	4a0f      	ldr	r2, [pc, #60]	@ (8001618 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80015f4:	bf30      	wfi
 80015f6:	e002      	b.n	80015fe <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80015f8:	bf40      	sev
    __WFE();
 80015fa:	bf20      	wfe
    __WFE();
 80015fc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80015fe:	4b07      	ldr	r3, [pc, #28]	@ (800161c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	4a06      	ldr	r2, [pc, #24]	@ (800161c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	6113      	str	r3, [r2, #16]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	58000400 	.word	0x58000400
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800162e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001632:	d101      	bne.n	8001638 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001670:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001674:	6013      	str	r3, [r2, #0]
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001692:	d101      	bne.n	8001698 <LL_RCC_HSE_IsReady+0x18>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <LL_RCC_HSE_IsReady+0x1a>
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016d4:	6013      	str	r3, [r2, #0]
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80016e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016f2:	d101      	bne.n	80016f8 <LL_RCC_HSI_IsReady+0x18>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <LL_RCC_HSI_IsReady+0x1a>
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800170c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001736:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800173a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001758:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800175c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b02      	cmp	r3, #2
 8001784:	d101      	bne.n	800178a <LL_RCC_HSI48_IsReady+0x18>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <LL_RCC_HSI48_IsReady+0x1a>
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800179a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001808:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b02      	cmp	r3, #2
 8001830:	d101      	bne.n	8001836 <LL_RCC_LSE_IsReady+0x18>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <LL_RCC_LSE_IsReady+0x1a>
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800184a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800184e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800186c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001870:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800188e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b02      	cmp	r3, #2
 8001898:	d101      	bne.n	800189e <LL_RCC_LSI1_IsReady+0x18>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <LL_RCC_LSI1_IsReady+0x1a>
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80018d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d101      	bne.n	8001906 <LL_RCC_LSI2_IsReady+0x18>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <LL_RCC_LSI2_IsReady+0x1a>
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800191e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001922:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800192e:	4313      	orrs	r3, r2
 8001930:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6013      	str	r3, [r2, #0]
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b02      	cmp	r3, #2
 800198c:	d101      	bne.n	8001992 <LL_RCC_MSI_IsReady+0x16>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_RCC_MSI_IsReady+0x18>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80019cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019d6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2bb0      	cmp	r3, #176	@ 0xb0
 80019dc:	d901      	bls.n	80019e2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80019de:	23b0      	movs	r3, #176	@ 0xb0
 80019e0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80019e2:	687b      	ldr	r3, [r7, #4]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f023 0203 	bic.w	r2, r3, #3
 8001a2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001a8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001abe:	f023 020f 	bic.w	r2, r3, #15
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001aca:	4313      	orrs	r3, r2
 8001acc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001aee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	608b      	str	r3, [r1, #8]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ba2:	6013      	str	r3, [r2, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bc0:	6013      	str	r3, [r2, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bde:	d101      	bne.n	8001be4 <LL_RCC_PLL_IsReady+0x18>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <LL_RCC_PLL_IsReady+0x1a>
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0303 	and.w	r3, r3, #3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c64:	d101      	bne.n	8001c6a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c8a:	d101      	bne.n	8001c90 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ca4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb0:	d101      	bne.n	8001cb6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001cd4:	d101      	bne.n	8001cda <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cf4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001cf8:	d101      	bne.n	8001cfe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b08d      	sub	sp, #52	@ 0x34
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e363      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 808d 	beq.w	8001e46 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d2c:	f7ff fe89 	bl	8001a42 <LL_RCC_GetSysClkSource>
 8001d30:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d32:	f7ff ff82 	bl	8001c3a <LL_RCC_PLL_GetMainSource>
 8001d36:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x3e>
 8001d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d147      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d144      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e347      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001d5a:	f7ff fe34 	bl	80019c6 <LL_RCC_MSI_GetRange>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	429c      	cmp	r4, r3
 8001d62:	d914      	bls.n	8001d8e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fd2f 	bl	80027cc <RCC_SetFlashLatencyFromMSIRange>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e336      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fe0e 	bl	800199e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fe32 	bl	80019f0 <LL_RCC_MSI_SetCalibTrimming>
 8001d8c:	e013      	b.n	8001db6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fe03 	bl	800199e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fe27 	bl	80019f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 fd10 	bl	80027cc <RCC_SetFlashLatencyFromMSIRange>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e317      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001db6:	f000 fcc9 	bl	800274c <HAL_RCC_GetHCLKFreq>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4aa4      	ldr	r2, [pc, #656]	@ (8002050 <HAL_RCC_OscConfig+0x344>)
 8001dbe:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dc0:	4ba4      	ldr	r3, [pc, #656]	@ (8002054 <HAL_RCC_OscConfig+0x348>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe ff6d 	bl	8000ca4 <HAL_InitTick>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d039      	beq.n	8001e44 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e308      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01e      	beq.n	8001e1a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ddc:	f7ff fdb0 	bl	8001940 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001de0:	f7fe ffae 	bl	8000d40 <HAL_GetTick>
 8001de4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de8:	f7fe ffaa 	bl	8000d40 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e2f5      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001dfa:	f7ff fdbf 	bl	800197c <LL_RCC_MSI_IsReady>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f1      	beq.n	8001de8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fdc8 	bl	800199e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fdec 	bl	80019f0 <LL_RCC_MSI_SetCalibTrimming>
 8001e18:	e015      	b.n	8001e46 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e1a:	f7ff fda0 	bl	800195e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e1e:	f7fe ff8f 	bl	8000d40 <HAL_GetTick>
 8001e22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e26:	f7fe ff8b 	bl	8000d40 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e2d6      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e38:	f7ff fda0 	bl	800197c <LL_RCC_MSI_IsReady>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f1      	bne.n	8001e26 <HAL_RCC_OscConfig+0x11a>
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e44:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d047      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e52:	f7ff fdf6 	bl	8001a42 <LL_RCC_GetSysClkSource>
 8001e56:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e58:	f7ff feef 	bl	8001c3a <LL_RCC_PLL_GetMainSource>
 8001e5c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_OscConfig+0x164>
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d108      	bne.n	8001e7c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d105      	bne.n	8001e7c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d134      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e2b4      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e84:	d102      	bne.n	8001e8c <HAL_RCC_OscConfig+0x180>
 8001e86:	f7ff fbdd 	bl	8001644 <LL_RCC_HSE_Enable>
 8001e8a:	e001      	b.n	8001e90 <HAL_RCC_OscConfig+0x184>
 8001e8c:	f7ff fbe9 	bl	8001662 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d012      	beq.n	8001ebe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7fe ff52 	bl	8000d40 <HAL_GetTick>
 8001e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7fe ff4e 	bl	8000d40 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	@ 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e299      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001eb2:	f7ff fbe5 	bl	8001680 <LL_RCC_HSE_IsReady>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f1      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x194>
 8001ebc:	e011      	b.n	8001ee2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7fe ff3f 	bl	8000d40 <HAL_GetTick>
 8001ec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec6:	f7fe ff3b 	bl	8000d40 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	@ 0x64
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e286      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ed8:	f7ff fbd2 	bl	8001680 <LL_RCC_HSE_IsReady>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f1      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d04c      	beq.n	8001f88 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eee:	f7ff fda8 	bl	8001a42 <LL_RCC_GetSysClkSource>
 8001ef2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef4:	f7ff fea1 	bl	8001c3a <LL_RCC_PLL_GetMainSource>
 8001ef8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_OscConfig+0x200>
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d10e      	bne.n	8001f24 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d10b      	bne.n	8001f24 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e266      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fbf1 	bl	8001704 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f22:	e031      	b.n	8001f88 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d019      	beq.n	8001f60 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2c:	f7ff fbba 	bl	80016a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7fe ff06 	bl	8000d40 <HAL_GetTick>
 8001f34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f38:	f7fe ff02 	bl	8000d40 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e24d      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f4a:	f7ff fbc9 	bl	80016e0 <LL_RCC_HSI_IsReady>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f1      	beq.n	8001f38 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fbd3 	bl	8001704 <LL_RCC_HSI_SetCalibTrimming>
 8001f5e:	e013      	b.n	8001f88 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f60:	f7ff fbaf 	bl	80016c2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7fe feec 	bl	8000d40 <HAL_GetTick>
 8001f68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7fe fee8 	bl	8000d40 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e233      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f7e:	f7ff fbaf 	bl	80016e0 <LL_RCC_HSI_IsReady>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f1      	bne.n	8001f6c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80a3 	beq.w	80020e8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d076      	beq.n	8002098 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d046      	beq.n	8002044 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001fb6:	f7ff fc66 	bl	8001886 <LL_RCC_LSI1_IsReady>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d113      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001fc0:	f7ff fc3f 	bl	8001842 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fc4:	f7fe febc 	bl	8000d40 <HAL_GetTick>
 8001fc8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001fcc:	f7fe feb8 	bl	8000d40 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e203      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001fde:	f7ff fc52 	bl	8001886 <LL_RCC_LSI1_IsReady>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f1      	beq.n	8001fcc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001fe8:	f7ff fc5f 	bl	80018aa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7fe fea8 	bl	8000d40 <HAL_GetTick>
 8001ff0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ff4:	f7fe fea4 	bl	8000d40 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e1ef      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002006:	f7ff fc72 	bl	80018ee <LL_RCC_LSI2_IsReady>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f1      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fc7c 	bl	8001912 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800201a:	f7ff fc23 	bl	8001864 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7fe fe8f 	bl	8000d40 <HAL_GetTick>
 8002022:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002026:	f7fe fe8b 	bl	8000d40 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e1d6      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002038:	f7ff fc25 	bl	8001886 <LL_RCC_LSI1_IsReady>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f1      	bne.n	8002026 <HAL_RCC_OscConfig+0x31a>
 8002042:	e051      	b.n	80020e8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002044:	f7ff fbfd 	bl	8001842 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7fe fe7a 	bl	8000d40 <HAL_GetTick>
 800204c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800204e:	e00c      	b.n	800206a <HAL_RCC_OscConfig+0x35e>
 8002050:	20000008 	.word	0x20000008
 8002054:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002058:	f7fe fe72 	bl	8000d40 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e1bd      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800206a:	f7ff fc0c 	bl	8001886 <LL_RCC_LSI1_IsReady>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f1      	beq.n	8002058 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002074:	f7ff fc2a 	bl	80018cc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800207a:	f7fe fe61 	bl	8000d40 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b03      	cmp	r3, #3
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e1ac      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800208c:	f7ff fc2f 	bl	80018ee <LL_RCC_LSI2_IsReady>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f1      	bne.n	800207a <HAL_RCC_OscConfig+0x36e>
 8002096:	e027      	b.n	80020e8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002098:	f7ff fc18 	bl	80018cc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7fe fe50 	bl	8000d40 <HAL_GetTick>
 80020a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80020a4:	f7fe fe4c 	bl	8000d40 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e197      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80020b6:	f7ff fc1a 	bl	80018ee <LL_RCC_LSI2_IsReady>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f1      	bne.n	80020a4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80020c0:	f7ff fbd0 	bl	8001864 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7fe fe3c 	bl	8000d40 <HAL_GetTick>
 80020c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80020cc:	f7fe fe38 	bl	8000d40 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e183      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80020de:	f7ff fbd2 	bl	8001886 <LL_RCC_LSI1_IsReady>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f1      	bne.n	80020cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d05b      	beq.n	80021ac <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f4:	4ba7      	ldr	r3, [pc, #668]	@ (8002394 <HAL_RCC_OscConfig+0x688>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d114      	bne.n	800212a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002100:	f7ff fa02 	bl	8001508 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002104:	f7fe fe1c 	bl	8000d40 <HAL_GetTick>
 8002108:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210c:	f7fe fe18 	bl	8000d40 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e163      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800211e:	4b9d      	ldr	r3, [pc, #628]	@ (8002394 <HAL_RCC_OscConfig+0x688>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <HAL_RCC_OscConfig+0x42c>
 8002132:	f7ff fb30 	bl	8001796 <LL_RCC_LSE_Enable>
 8002136:	e00c      	b.n	8002152 <HAL_RCC_OscConfig+0x446>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d104      	bne.n	800214a <HAL_RCC_OscConfig+0x43e>
 8002140:	f7ff fb4b 	bl	80017da <LL_RCC_LSE_EnableBypass>
 8002144:	f7ff fb27 	bl	8001796 <LL_RCC_LSE_Enable>
 8002148:	e003      	b.n	8002152 <HAL_RCC_OscConfig+0x446>
 800214a:	f7ff fb35 	bl	80017b8 <LL_RCC_LSE_Disable>
 800214e:	f7ff fb55 	bl	80017fc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d014      	beq.n	8002184 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215a:	f7fe fdf1 	bl	8000d40 <HAL_GetTick>
 800215e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7fe fded 	bl	8000d40 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e136      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002178:	f7ff fb51 	bl	800181e <LL_RCC_LSE_IsReady>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0ef      	beq.n	8002162 <HAL_RCC_OscConfig+0x456>
 8002182:	e013      	b.n	80021ac <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002184:	f7fe fddc 	bl	8000d40 <HAL_GetTick>
 8002188:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218c:	f7fe fdd8 	bl	8000d40 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e121      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80021a2:	f7ff fb3c 	bl	800181e <LL_RCC_LSE_IsReady>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ef      	bne.n	800218c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d02c      	beq.n	8002212 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d014      	beq.n	80021ea <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021c0:	f7ff fab5 	bl	800172e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c4:	f7fe fdbc 	bl	8000d40 <HAL_GetTick>
 80021c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021cc:	f7fe fdb8 	bl	8000d40 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e103      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80021de:	f7ff fac8 	bl	8001772 <LL_RCC_HSI48_IsReady>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f1      	beq.n	80021cc <HAL_RCC_OscConfig+0x4c0>
 80021e8:	e013      	b.n	8002212 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021ea:	f7ff fab1 	bl	8001750 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ee:	f7fe fda7 	bl	8000d40 <HAL_GetTick>
 80021f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f6:	f7fe fda3 	bl	8000d40 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0ee      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002208:	f7ff fab3 	bl	8001772 <LL_RCC_HSI48_IsReady>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f1      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80e4 	beq.w	80023e4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221c:	f7ff fc11 	bl	8001a42 <LL_RCC_GetSysClkSource>
 8002220:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222e:	2b02      	cmp	r3, #2
 8002230:	f040 80b4 	bne.w	800239c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0203 	and.w	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	429a      	cmp	r2, r3
 8002240:	d123      	bne.n	800228a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d11c      	bne.n	800228a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d114      	bne.n	800228a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d10d      	bne.n	800228a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d05d      	beq.n	8002346 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b0c      	cmp	r3, #12
 800228e:	d058      	beq.n	8002342 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0a1      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022a2:	f7ff fc84 	bl	8001bae <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022a6:	f7fe fd4b 	bl	8000d40 <HAL_GetTick>
 80022aa:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ae:	f7fe fd47 	bl	8000d40 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e092      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1ef      	bne.n	80022ae <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	4b30      	ldr	r3, [pc, #192]	@ (8002398 <HAL_RCC_OscConfig+0x68c>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022e0:	4311      	orrs	r1, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022e6:	0212      	lsls	r2, r2, #8
 80022e8:	4311      	orrs	r1, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022f4:	4311      	orrs	r1, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022fa:	430a      	orrs	r2, r1
 80022fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002300:	4313      	orrs	r3, r2
 8002302:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002304:	f7ff fc44 	bl	8001b90 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002316:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002318:	f7fe fd12 	bl	8000d40 <HAL_GetTick>
 800231c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe fd0e 	bl	8000d40 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e059      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0ef      	beq.n	8002320 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002340:	e050      	b.n	80023e4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e04f      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d147      	bne.n	80023e4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002354:	f7ff fc1c 	bl	8001b90 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002366:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002368:	f7fe fcea 	bl	8000d40 <HAL_GetTick>
 800236c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fce6 	bl	8000d40 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e031      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ef      	beq.n	8002370 <HAL_RCC_OscConfig+0x664>
 8002390:	e028      	b.n	80023e4 <HAL_RCC_OscConfig+0x6d8>
 8002392:	bf00      	nop
 8002394:	58000400 	.word	0x58000400
 8002398:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b0c      	cmp	r3, #12
 80023a0:	d01e      	beq.n	80023e0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a2:	f7ff fc04 	bl	8001bae <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe fccb 	bl	8000d40 <HAL_GetTick>
 80023aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ae:	f7fe fcc7 	bl	8000d40 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e012      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ef      	bne.n	80023ae <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023d8:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <HAL_RCC_OscConfig+0x6e4>)
 80023da:	4013      	ands	r3, r2
 80023dc:	60cb      	str	r3, [r1, #12]
 80023de:	e001      	b.n	80023e4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3734      	adds	r7, #52	@ 0x34
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd90      	pop	{r4, r7, pc}
 80023ee:	bf00      	nop
 80023f0:	eefefffc 	.word	0xeefefffc

080023f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e12d      	b.n	8002664 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002408:	4b98      	ldr	r3, [pc, #608]	@ (800266c <HAL_RCC_ClockConfig+0x278>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d91b      	bls.n	800244e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b95      	ldr	r3, [pc, #596]	@ (800266c <HAL_RCC_ClockConfig+0x278>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 0207 	bic.w	r2, r3, #7
 800241e:	4993      	ldr	r1, [pc, #588]	@ (800266c <HAL_RCC_ClockConfig+0x278>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002426:	f7fe fc8b 	bl	8000d40 <HAL_GetTick>
 800242a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242c:	e008      	b.n	8002440 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800242e:	f7fe fc87 	bl	8000d40 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e111      	b.n	8002664 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002440:	4b8a      	ldr	r3, [pc, #552]	@ (800266c <HAL_RCC_ClockConfig+0x278>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d1ef      	bne.n	800242e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d016      	beq.n	8002488 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fafb 	bl	8001a5a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002464:	f7fe fc6c 	bl	8000d40 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800246c:	f7fe fc68 	bl	8000d40 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0f2      	b.n	8002664 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800247e:	f7ff fbe8 	bl	8001c52 <LL_RCC_IsActiveFlag_HPRE>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f1      	beq.n	800246c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d016      	beq.n	80024c2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff faf2 	bl	8001a82 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800249e:	f7fe fc4f 	bl	8000d40 <HAL_GetTick>
 80024a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024a6:	f7fe fc4b 	bl	8000d40 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e0d5      	b.n	8002664 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80024b8:	f7ff fbdd 	bl	8001c76 <LL_RCC_IsActiveFlag_C2HPRE>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f1      	beq.n	80024a6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d016      	beq.n	80024fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff faeb 	bl	8001aae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024d8:	f7fe fc32 	bl	8000d40 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024e0:	f7fe fc2e 	bl	8000d40 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0b8      	b.n	8002664 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80024f2:	f7ff fbd3 	bl	8001c9c <LL_RCC_IsActiveFlag_SHDHPRE>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f1      	beq.n	80024e0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d016      	beq.n	8002536 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fae5 	bl	8001adc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002512:	f7fe fc15 	bl	8000d40 <HAL_GetTick>
 8002516:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800251a:	f7fe fc11 	bl	8000d40 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e09b      	b.n	8002664 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800252c:	f7ff fbc9 	bl	8001cc2 <LL_RCC_IsActiveFlag_PPRE1>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f1      	beq.n	800251a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d017      	beq.n	8002572 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fadb 	bl	8001b04 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800254e:	f7fe fbf7 	bl	8000d40 <HAL_GetTick>
 8002552:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002556:	f7fe fbf3 	bl	8000d40 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e07d      	b.n	8002664 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002568:	f7ff fbbd 	bl	8001ce6 <LL_RCC_IsActiveFlag_PPRE2>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f1      	beq.n	8002556 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d043      	beq.n	8002606 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d106      	bne.n	8002594 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002586:	f7ff f87b 	bl	8001680 <LL_RCC_HSE_IsReady>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d11e      	bne.n	80025ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e067      	b.n	8002664 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d106      	bne.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800259c:	f7ff fb16 	bl	8001bcc <LL_RCC_PLL_IsReady>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d113      	bne.n	80025ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e05c      	b.n	8002664 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80025b2:	f7ff f9e3 	bl	800197c <LL_RCC_MSI_IsReady>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d108      	bne.n	80025ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e051      	b.n	8002664 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80025c0:	f7ff f88e 	bl	80016e0 <LL_RCC_HSI_IsReady>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e04a      	b.n	8002664 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fa21 	bl	8001a1a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d8:	f7fe fbb2 	bl	8000d40 <HAL_GetTick>
 80025dc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e0:	f7fe fbae 	bl	8000d40 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e036      	b.n	8002664 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	f7ff fa24 	bl	8001a42 <LL_RCC_GetSysClkSource>
 80025fa:	4602      	mov	r2, r0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	429a      	cmp	r2, r3
 8002604:	d1ec      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002606:	4b19      	ldr	r3, [pc, #100]	@ (800266c <HAL_RCC_ClockConfig+0x278>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d21b      	bcs.n	800264c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002614:	4b15      	ldr	r3, [pc, #84]	@ (800266c <HAL_RCC_ClockConfig+0x278>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f023 0207 	bic.w	r2, r3, #7
 800261c:	4913      	ldr	r1, [pc, #76]	@ (800266c <HAL_RCC_ClockConfig+0x278>)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	4313      	orrs	r3, r2
 8002622:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002624:	f7fe fb8c 	bl	8000d40 <HAL_GetTick>
 8002628:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262a:	e008      	b.n	800263e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800262c:	f7fe fb88 	bl	8000d40 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e012      	b.n	8002664 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <HAL_RCC_ClockConfig+0x278>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d1ef      	bne.n	800262c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800264c:	f000 f87e 	bl	800274c <HAL_RCC_GetHCLKFreq>
 8002650:	4603      	mov	r3, r0
 8002652:	4a07      	ldr	r2, [pc, #28]	@ (8002670 <HAL_RCC_ClockConfig+0x27c>)
 8002654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002656:	f7fe fb7f 	bl	8000d58 <HAL_GetTickPrio>
 800265a:	4603      	mov	r3, r0
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fb21 	bl	8000ca4 <HAL_InitTick>
 8002662:	4603      	mov	r3, r0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	58004000 	.word	0x58004000
 8002670:	20000008 	.word	0x20000008

08002674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267a:	f7ff f9e2 	bl	8001a42 <LL_RCC_GetSysClkSource>
 800267e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10a      	bne.n	800269c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002686:	f7ff f99e 	bl	80019c6 <LL_RCC_MSI_GetRange>
 800268a:	4603      	mov	r3, r0
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	4a2b      	ldr	r2, [pc, #172]	@ (8002740 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	e04b      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d102      	bne.n	80026a8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026a2:	4b28      	ldr	r3, [pc, #160]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	e045      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d10a      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80026ae:	f7fe ffb7 	bl	8001620 <LL_RCC_HSE_IsEnabledDiv2>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d102      	bne.n	80026be <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80026b8:	4b22      	ldr	r3, [pc, #136]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e03a      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80026be:	4b22      	ldr	r3, [pc, #136]	@ (8002748 <HAL_RCC_GetSysClockFreq+0xd4>)
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	e037      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80026c4:	f7ff fab9 	bl	8001c3a <LL_RCC_PLL_GetMainSource>
 80026c8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d003      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x64>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d003      	beq.n	80026de <HAL_RCC_GetSysClockFreq+0x6a>
 80026d6:	e00d      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80026d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026da:	60bb      	str	r3, [r7, #8]
        break;
 80026dc:	e015      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80026de:	f7fe ff9f 	bl	8001620 <LL_RCC_HSE_IsEnabledDiv2>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d102      	bne.n	80026ee <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80026e8:	4b16      	ldr	r3, [pc, #88]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026ea:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80026ec:	e00d      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80026ee:	4b16      	ldr	r3, [pc, #88]	@ (8002748 <HAL_RCC_GetSysClockFreq+0xd4>)
 80026f0:	60bb      	str	r3, [r7, #8]
        break;
 80026f2:	e00a      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80026f4:	f7ff f967 	bl	80019c6 <LL_RCC_MSI_GetRange>
 80026f8:	4603      	mov	r3, r0
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	4a0f      	ldr	r2, [pc, #60]	@ (8002740 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002706:	60bb      	str	r3, [r7, #8]
        break;
 8002708:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800270a:	f7ff fa71 	bl	8001bf0 <LL_RCC_PLL_GetN>
 800270e:	4602      	mov	r2, r0
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	fb03 f402 	mul.w	r4, r3, r2
 8002716:	f7ff fa84 	bl	8001c22 <LL_RCC_PLL_GetDivider>
 800271a:	4603      	mov	r3, r0
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	3301      	adds	r3, #1
 8002720:	fbb4 f4f3 	udiv	r4, r4, r3
 8002724:	f7ff fa71 	bl	8001c0a <LL_RCC_PLL_GetR>
 8002728:	4603      	mov	r3, r0
 800272a:	0f5b      	lsrs	r3, r3, #29
 800272c:	3301      	adds	r3, #1
 800272e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002732:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002734:	68fb      	ldr	r3, [r7, #12]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bd90      	pop	{r4, r7, pc}
 800273e:	bf00      	nop
 8002740:	08004700 	.word	0x08004700
 8002744:	00f42400 	.word	0x00f42400
 8002748:	01e84800 	.word	0x01e84800

0800274c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800274c:	b598      	push	{r3, r4, r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002750:	f7ff ff90 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8002754:	4604      	mov	r4, r0
 8002756:	f7ff f9e9 	bl	8001b2c <LL_RCC_GetAHBPrescaler>
 800275a:	4603      	mov	r3, r0
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	4a03      	ldr	r2, [pc, #12]	@ (8002770 <HAL_RCC_GetHCLKFreq+0x24>)
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800276c:	4618      	mov	r0, r3
 800276e:	bd98      	pop	{r3, r4, r7, pc}
 8002770:	080046a0 	.word	0x080046a0

08002774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002774:	b598      	push	{r3, r4, r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002778:	f7ff ffe8 	bl	800274c <HAL_RCC_GetHCLKFreq>
 800277c:	4604      	mov	r4, r0
 800277e:	f7ff f9ef 	bl	8001b60 <LL_RCC_GetAPB1Prescaler>
 8002782:	4603      	mov	r3, r0
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	4a04      	ldr	r2, [pc, #16]	@ (800279c <HAL_RCC_GetPCLK1Freq+0x28>)
 800278c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd98      	pop	{r3, r4, r7, pc}
 800279c:	080046e0 	.word	0x080046e0

080027a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a0:	b598      	push	{r3, r4, r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80027a4:	f7ff ffd2 	bl	800274c <HAL_RCC_GetHCLKFreq>
 80027a8:	4604      	mov	r4, r0
 80027aa:	f7ff f9e5 	bl	8001b78 <LL_RCC_GetAPB2Prescaler>
 80027ae:	4603      	mov	r3, r0
 80027b0:	0adb      	lsrs	r3, r3, #11
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	4a04      	ldr	r2, [pc, #16]	@ (80027c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd98      	pop	{r3, r4, r7, pc}
 80027c8:	080046e0 	.word	0x080046e0

080027cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2bb0      	cmp	r3, #176	@ 0xb0
 80027d8:	d903      	bls.n	80027e2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80027da:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80027dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e007      	b.n	80027f2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	4a11      	ldr	r2, [pc, #68]	@ (8002830 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80027ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80027f2:	f7ff f9a7 	bl	8001b44 <LL_RCC_GetAHB4Prescaler>
 80027f6:	4603      	mov	r3, r0
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002834 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	fbb2 f3f3 	udiv	r3, r2, r3
 800280a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4a0a      	ldr	r2, [pc, #40]	@ (8002838 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	0c9c      	lsrs	r4, r3, #18
 8002816:	f7fe fe9f 	bl	8001558 <HAL_PWREx_GetVoltageRange>
 800281a:	4603      	mov	r3, r0
 800281c:	4619      	mov	r1, r3
 800281e:	4620      	mov	r0, r4
 8002820:	f000 f80c 	bl	800283c <RCC_SetFlashLatency>
 8002824:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bd90      	pop	{r4, r7, pc}
 800282e:	bf00      	nop
 8002830:	08004700 	.word	0x08004700
 8002834:	080046a0 	.word	0x080046a0
 8002838:	431bde83 	.word	0x431bde83

0800283c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b093      	sub	sp, #76	@ 0x4c
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002846:	4b37      	ldr	r3, [pc, #220]	@ (8002924 <RCC_SetFlashLatency+0xe8>)
 8002848:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800284c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800284e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002852:	4a35      	ldr	r2, [pc, #212]	@ (8002928 <RCC_SetFlashLatency+0xec>)
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	ca07      	ldmia	r2, {r0, r1, r2}
 800285a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800285e:	4b33      	ldr	r3, [pc, #204]	@ (800292c <RCC_SetFlashLatency+0xf0>)
 8002860:	f107 040c 	add.w	r4, r7, #12
 8002864:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002866:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800286a:	2300      	movs	r3, #0
 800286c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002874:	d11a      	bne.n	80028ac <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002876:	2300      	movs	r3, #0
 8002878:	643b      	str	r3, [r7, #64]	@ 0x40
 800287a:	e013      	b.n	80028a4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800287c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	3348      	adds	r3, #72	@ 0x48
 8002882:	443b      	add	r3, r7
 8002884:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	429a      	cmp	r2, r3
 800288c:	d807      	bhi.n	800289e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800288e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	3348      	adds	r3, #72	@ 0x48
 8002894:	443b      	add	r3, r7
 8002896:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800289a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800289c:	e020      	b.n	80028e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800289e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028a0:	3301      	adds	r3, #1
 80028a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80028a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d9e8      	bls.n	800287c <RCC_SetFlashLatency+0x40>
 80028aa:	e019      	b.n	80028e0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028b0:	e013      	b.n	80028da <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80028b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	3348      	adds	r3, #72	@ 0x48
 80028b8:	443b      	add	r3, r7
 80028ba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d807      	bhi.n	80028d4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80028c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	3348      	adds	r3, #72	@ 0x48
 80028ca:	443b      	add	r3, r7
 80028cc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80028d0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80028d2:	e005      	b.n	80028e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80028d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d6:	3301      	adds	r3, #1
 80028d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d9e8      	bls.n	80028b2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80028e0:	4b13      	ldr	r3, [pc, #76]	@ (8002930 <RCC_SetFlashLatency+0xf4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 0207 	bic.w	r2, r3, #7
 80028e8:	4911      	ldr	r1, [pc, #68]	@ (8002930 <RCC_SetFlashLatency+0xf4>)
 80028ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80028f0:	f7fe fa26 	bl	8000d40 <HAL_GetTick>
 80028f4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80028f6:	e008      	b.n	800290a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028f8:	f7fe fa22 	bl	8000d40 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e007      	b.n	800291a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800290a:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <RCC_SetFlashLatency+0xf4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002914:	429a      	cmp	r2, r3
 8002916:	d1ef      	bne.n	80028f8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	374c      	adds	r7, #76	@ 0x4c
 800291e:	46bd      	mov	sp, r7
 8002920:	bd90      	pop	{r4, r7, pc}
 8002922:	bf00      	nop
 8002924:	08004674 	.word	0x08004674
 8002928:	08004684 	.word	0x08004684
 800292c:	08004690 	.word	0x08004690
 8002930:	58004000 	.word	0x58004000

08002934 <LL_RCC_LSE_IsEnabled>:
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <LL_RCC_LSE_IsEnabled+0x18>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <LL_RCC_LSE_IsEnabled+0x1a>
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_RCC_LSE_IsReady>:
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800295c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	d101      	bne.n	8002970 <LL_RCC_LSE_IsReady+0x18>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <LL_RCC_LSE_IsReady+0x1a>
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_RCC_SetRFWKPClockSource>:
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800298c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002990:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_RCC_SetSMPSClockSource>:
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80029b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_RCC_SetSMPSPrescaler>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_RCC_SetUSARTClockSource>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a08:	f023 0203 	bic.w	r2, r3, #3
 8002a0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_RCC_SetLPUARTClockSource>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a34:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_RCC_SetI2CClockSource>:
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002a74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_RCC_SetLPTIMClockSource>:
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a96:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0c1b      	lsrs	r3, r3, #16
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	041b      	lsls	r3, r3, #16
 8002aa8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LL_RCC_SetSAIClockSource>:
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ace:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ad2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_RCC_SetRNGClockSource>:
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002afe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <LL_RCC_SetCLK48ClockSource>:
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_RCC_SetUSBClockSource>:
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ffe3 	bl	8002b16 <LL_RCC_SetCLK48ClockSource>
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <LL_RCC_SetADCClockSource>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b68:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_RCC_SetRTCClockSource>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LL_RCC_GetRTCClockSource>:
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_ForceBackupDomainReset>:
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_RCC_ReleaseBackupDomainReset>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <LL_RCC_PLLSAI1_Enable>:
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c20:	6013      	str	r3, [r2, #0]
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_RCC_PLLSAI1_Disable>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <LL_RCC_PLLSAI1_IsReady>:
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c5c:	d101      	bne.n	8002c62 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b088      	sub	sp, #32
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002c76:	2300      	movs	r3, #0
 8002c78:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d034      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c92:	d021      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002c94:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c98:	d81b      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c9e:	d01d      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002ca0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ca4:	d815      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002caa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cae:	d110      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cbe:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002cc0:	e00d      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f947 	bl	8002f5a <RCCEx_PLLSAI1_ConfigNP>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002cd0:	e005      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	77fb      	strb	r3, [r7, #31]
        break;
 8002cd6:	e002      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cde:	7ffb      	ldrb	r3, [r7, #31]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fee8 	bl	8002abe <LL_RCC_SetSAIClockSource>
 8002cee:	e001      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	7ffb      	ldrb	r3, [r7, #31]
 8002cf2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d046      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002d00:	f7ff ff56 	bl	8002bb0 <LL_RCC_GetRTCClockSource>
 8002d04:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d03c      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002d10:	f7fe fbfa 	bl	8001508 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d105      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff30 	bl	8002b84 <LL_RCC_SetRTCClockSource>
 8002d24:	e02e      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002d30:	f7ff ff4b 	bl	8002bca <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002d34:	f7ff ff5a 	bl	8002bec <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002d46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002d50:	f7ff fdf0 	bl	8002934 <LL_RCC_LSE_IsEnabled>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d114      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d5a:	f7fd fff1 	bl	8000d40 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002d60:	e00b      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d62:	f7fd ffed 	bl	8000d40 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d902      	bls.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	77fb      	strb	r3, [r7, #31]
              break;
 8002d78:	e004      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002d7a:	f7ff fded 	bl	8002958 <LL_RCC_LSE_IsReady>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d1ee      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002d84:	7ffb      	ldrb	r3, [r7, #31]
 8002d86:	77bb      	strb	r3, [r7, #30]
 8002d88:	e001      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d8a:	7ffb      	ldrb	r3, [r7, #31]
 8002d8c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fe2a 	bl	80029f8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d004      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fe35 	bl	8002a24 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d004      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fe5d 	bl	8002a8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fe52 	bl	8002a8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fe2a 	bl	8002a50 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d004      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fe1f 	bl	8002a50 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d022      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fe8d 	bl	8002b42 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e30:	d107      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e40:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e4a:	d10b      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f8dd 	bl	8003010 <RCCEx_PLLSAI1_ConfigNQ>
 8002e56:	4603      	mov	r3, r0
 8002e58:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002e5a:	7ffb      	ldrb	r3, [r7, #31]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002e60:	7ffb      	ldrb	r3, [r7, #31]
 8002e62:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d02b      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e78:	d008      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e82:	d003      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fe2a 	bl	8002aea <LL_RCC_SetRNGClockSource>
 8002e96:	e00a      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7ff fe21 	bl	8002aea <LL_RCC_SetRNGClockSource>
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7ff fe34 	bl	8002b16 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ec6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d022      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fe3d 	bl	8002b58 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ee6:	d107      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f00:	d10b      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3304      	adds	r3, #4
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f8dd 	bl	80030c6 <RCCEx_PLLSAI1_ConfigNR>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002f10:	7ffb      	ldrb	r3, [r7, #31]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002f16:	7ffb      	ldrb	r3, [r7, #31]
 8002f18:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d004      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fd26 	bl	800297c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d009      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fd45 	bl	80029d0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fd2c 	bl	80029a8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002f50:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3720      	adds	r7, #32
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002f66:	f7ff fe61 	bl	8002c2c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f6a:	f7fd fee9 	bl	8000d40 <HAL_GetTick>
 8002f6e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f70:	e009      	b.n	8002f86 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f72:	f7fd fee5 	bl	8000d40 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d902      	bls.n	8002f86 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	73fb      	strb	r3, [r7, #15]
      break;
 8002f84:	e004      	b.n	8002f90 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f86:	f7ff fe60 	bl	8002c4a <LL_RCC_PLLSAI1_IsReady>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d137      	bne.n	8003006 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002faa:	4313      	orrs	r3, r2
 8002fac:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002fc4:	f7ff fe23 	bl	8002c0e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc8:	f7fd feba 	bl	8000d40 <HAL_GetTick>
 8002fcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002fce:	e009      	b.n	8002fe4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fd0:	f7fd feb6 	bl	8000d40 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d902      	bls.n	8002fe4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	73fb      	strb	r3, [r7, #15]
        break;
 8002fe2:	e004      	b.n	8002fee <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002fe4:	f7ff fe31 	bl	8002c4a <LL_RCC_PLLSAI1_IsReady>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d1f0      	bne.n	8002fd0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d108      	bne.n	8003006 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003002:	4313      	orrs	r3, r2
 8003004:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003006:	7bfb      	ldrb	r3, [r7, #15]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800301c:	f7ff fe06 	bl	8002c2c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003020:	f7fd fe8e 	bl	8000d40 <HAL_GetTick>
 8003024:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003026:	e009      	b.n	800303c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003028:	f7fd fe8a 	bl	8000d40 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d902      	bls.n	800303c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	73fb      	strb	r3, [r7, #15]
      break;
 800303a:	e004      	b.n	8003046 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800303c:	f7ff fe05 	bl	8002c4a <LL_RCC_PLLSAI1_IsReady>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d137      	bne.n	80030bc <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003060:	4313      	orrs	r3, r2
 8003062:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003076:	4313      	orrs	r3, r2
 8003078:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800307a:	f7ff fdc8 	bl	8002c0e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800307e:	f7fd fe5f 	bl	8000d40 <HAL_GetTick>
 8003082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003084:	e009      	b.n	800309a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003086:	f7fd fe5b 	bl	8000d40 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d902      	bls.n	800309a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	73fb      	strb	r3, [r7, #15]
        break;
 8003098:	e004      	b.n	80030a4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800309a:	f7ff fdd6 	bl	8002c4a <LL_RCC_PLLSAI1_IsReady>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d1f0      	bne.n	8003086 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030b8:	4313      	orrs	r3, r2
 80030ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80030d2:	f7ff fdab 	bl	8002c2c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030d6:	f7fd fe33 	bl	8000d40 <HAL_GetTick>
 80030da:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030dc:	e009      	b.n	80030f2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030de:	f7fd fe2f 	bl	8000d40 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d902      	bls.n	80030f2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	73fb      	strb	r3, [r7, #15]
      break;
 80030f0:	e004      	b.n	80030fc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030f2:	f7ff fdaa 	bl	8002c4a <LL_RCC_PLLSAI1_IsReady>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d137      	bne.n	8003172 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003116:	4313      	orrs	r3, r2
 8003118:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800311a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800312c:	4313      	orrs	r3, r2
 800312e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003130:	f7ff fd6d 	bl	8002c0e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003134:	f7fd fe04 	bl	8000d40 <HAL_GetTick>
 8003138:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800313a:	e009      	b.n	8003150 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800313c:	f7fd fe00 	bl	8000d40 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d902      	bls.n	8003150 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	73fb      	strb	r3, [r7, #15]
        break;
 800314e:	e004      	b.n	800315a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003150:	f7ff fd7b 	bl	8002c4a <LL_RCC_PLLSAI1_IsReady>
 8003154:	4603      	mov	r3, r0
 8003156:	2b01      	cmp	r3, #1
 8003158:	d1f0      	bne.n	800313c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d108      	bne.n	8003172 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800316e:	4313      	orrs	r3, r2
 8003170:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <LL_RCC_GetUSARTClockSource>:
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003188:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4013      	ands	r3, r2
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_RCC_GetLPUARTClockSource>:
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80031a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4013      	ands	r3, r2
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e04a      	b.n	8003264 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d106      	bne.n	80031e6 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7fd fbdf 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2224      	movs	r2, #36	@ 0x24
 80031ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0201 	bic.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fe48 	bl	8003e9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fc1d 	bl	8003a4c <UART_SetConfig>
 8003212:	4603      	mov	r3, r0
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e023      	b.n	8003264 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800322a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800323a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0208 	orr.w	r2, r2, #8
 800324a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 febf 	bl	8003fe0 <UART_CheckIdleState>
 8003262:	4603      	mov	r3, r0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	@ 0x28
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	4613      	mov	r3, r2
 800327a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003282:	2b20      	cmp	r3, #32
 8003284:	d17b      	bne.n	800337e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_UART_Transmit+0x26>
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e074      	b.n	8003380 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2221      	movs	r2, #33	@ 0x21
 80032a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032a6:	f7fd fd4b 	bl	8000d40 <HAL_GetTick>
 80032aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	88fa      	ldrh	r2, [r7, #6]
 80032b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	88fa      	ldrh	r2, [r7, #6]
 80032b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032c4:	d108      	bne.n	80032d8 <HAL_UART_Transmit+0x6c>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d104      	bne.n	80032d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	e003      	b.n	80032e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032e0:	e030      	b.n	8003344 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2200      	movs	r2, #0
 80032ea:	2180      	movs	r1, #128	@ 0x80
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 ff21 	bl	8004134 <UART_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e03d      	b.n	8003380 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10b      	bne.n	8003322 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003318:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	3302      	adds	r3, #2
 800331e:	61bb      	str	r3, [r7, #24]
 8003320:	e007      	b.n	8003332 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	781a      	ldrb	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	3301      	adds	r3, #1
 8003330:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1c8      	bne.n	80032e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2200      	movs	r2, #0
 8003358:	2140      	movs	r1, #64	@ 0x40
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 feea 	bl	8004134 <UART_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2220      	movs	r2, #32
 800336a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e006      	b.n	8003380 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
  }
}
 8003380:	4618      	mov	r0, r3
 8003382:	3720      	adds	r7, #32
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b0ba      	sub	sp, #232	@ 0xe8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80033b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80033b6:	4013      	ands	r3, r2
 80033b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80033bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d11b      	bne.n	80033fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80033c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80033d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80033dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d009      	beq.n	80033fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8300 	beq.w	80039f2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
      }
      return;
 80033fa:	e2fa      	b.n	80039f2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80033fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8123 	beq.w	800364c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003406:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800340a:	4b8d      	ldr	r3, [pc, #564]	@ (8003640 <HAL_UART_IRQHandler+0x2b8>)
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003412:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003416:	4b8b      	ldr	r3, [pc, #556]	@ (8003644 <HAL_UART_IRQHandler+0x2bc>)
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8116 	beq.w	800364c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d011      	beq.n	8003450 <HAL_UART_IRQHandler+0xc8>
 800342c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2201      	movs	r2, #1
 800343e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d011      	beq.n	8003480 <HAL_UART_IRQHandler+0xf8>
 800345c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00b      	beq.n	8003480 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2202      	movs	r2, #2
 800346e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003476:	f043 0204 	orr.w	r2, r3, #4
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d011      	beq.n	80034b0 <HAL_UART_IRQHandler+0x128>
 800348c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2204      	movs	r2, #4
 800349e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a6:	f043 0202 	orr.w	r2, r3, #2
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d017      	beq.n	80034ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80034bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d105      	bne.n	80034d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80034c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80034cc:	4b5c      	ldr	r3, [pc, #368]	@ (8003640 <HAL_UART_IRQHandler+0x2b8>)
 80034ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00b      	beq.n	80034ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2208      	movs	r2, #8
 80034da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e2:	f043 0208 	orr.w	r2, r3, #8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80034ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d012      	beq.n	800351e <HAL_UART_IRQHandler+0x196>
 80034f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00c      	beq.n	800351e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800350c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8266 	beq.w	80039f6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800352a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d013      	beq.n	800355e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d105      	bne.n	800354e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003564:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003572:	2b40      	cmp	r3, #64	@ 0x40
 8003574:	d005      	beq.n	8003582 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800357a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800357e:	2b00      	cmp	r3, #0
 8003580:	d054      	beq.n	800362c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fe43 	bl	800420e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003592:	2b40      	cmp	r3, #64	@ 0x40
 8003594:	d146      	bne.n	8003624 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3308      	adds	r3, #8
 800359c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035a4:	e853 3f00 	ldrex	r3, [r3]
 80035a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3308      	adds	r3, #8
 80035be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035d2:	e841 2300 	strex	r3, r2, [r1]
 80035d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1d9      	bne.n	8003596 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d017      	beq.n	800361c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035f2:	4a15      	ldr	r2, [pc, #84]	@ (8003648 <HAL_UART_IRQHandler+0x2c0>)
 80035f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd fd69 	bl	80010d4 <HAL_DMA_Abort_IT>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d019      	beq.n	800363c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800360e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003616:	4610      	mov	r0, r2
 8003618:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361a:	e00f      	b.n	800363c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f9ff 	bl	8003a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003622:	e00b      	b.n	800363c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f9fb 	bl	8003a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362a:	e007      	b.n	800363c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f9f7 	bl	8003a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800363a:	e1dc      	b.n	80039f6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363c:	bf00      	nop
    return;
 800363e:	e1da      	b.n	80039f6 <HAL_UART_IRQHandler+0x66e>
 8003640:	10000001 	.word	0x10000001
 8003644:	04000120 	.word	0x04000120
 8003648:	080042db 	.word	0x080042db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003650:	2b01      	cmp	r3, #1
 8003652:	f040 8170 	bne.w	8003936 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8169 	beq.w	8003936 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8162 	beq.w	8003936 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2210      	movs	r2, #16
 8003678:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003684:	2b40      	cmp	r3, #64	@ 0x40
 8003686:	f040 80d8 	bne.w	800383a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003698:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80af 	beq.w	8003800 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80036a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036ac:	429a      	cmp	r2, r3
 80036ae:	f080 80a7 	bcs.w	8003800 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 8087 	bne.w	80037de <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80036fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003706:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1da      	bne.n	80036d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3308      	adds	r3, #8
 8003720:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003722:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800372a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3308      	adds	r3, #8
 800373a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800373e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003742:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003746:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800374a:	e841 2300 	strex	r3, r2, [r1]
 800374e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003750:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e1      	bne.n	800371a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3308      	adds	r3, #8
 800375c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800376c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3308      	adds	r3, #8
 8003776:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800377a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800377c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003780:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003788:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e3      	bne.n	8003756 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037ac:	f023 0310 	bic.w	r3, r3, #16
 80037b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e4      	bne.n	800379c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fd fc1c 	bl	8001016 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2202      	movs	r2, #2
 80037e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f91b 	bl	8003a34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80037fe:	e0fc      	b.n	80039fa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003806:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800380a:	429a      	cmp	r2, r3
 800380c:	f040 80f5 	bne.w	80039fa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b20      	cmp	r3, #32
 8003820:	f040 80eb 	bne.w	80039fa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003830:	4619      	mov	r1, r3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8fe 	bl	8003a34 <HAL_UARTEx_RxEventCallback>
      return;
 8003838:	e0df      	b.n	80039fa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003846:	b29b      	uxth	r3, r3
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80d1 	beq.w	80039fe <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800385c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80cc 	beq.w	80039fe <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003876:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800387a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003888:	647b      	str	r3, [r7, #68]	@ 0x44
 800388a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800388e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e4      	bne.n	8003866 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3308      	adds	r3, #8
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	623b      	str	r3, [r7, #32]
   return(result);
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3308      	adds	r3, #8
 80038c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80038c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e1      	bne.n	800389c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	e853 3f00 	ldrex	r3, [r3]
 80038f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f023 0310 	bic.w	r3, r3, #16
 8003900:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800390e:	61fb      	str	r3, [r7, #28]
 8003910:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	69b9      	ldr	r1, [r7, #24]
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	617b      	str	r3, [r7, #20]
   return(result);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e4      	bne.n	80038ec <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003928:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800392c:	4619      	mov	r1, r3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f880 	bl	8003a34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003934:	e063      	b.n	80039fe <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800393a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00e      	beq.n	8003960 <HAL_UART_IRQHandler+0x5d8>
 8003942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003956:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fcff 	bl	800435c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800395e:	e051      	b.n	8003a04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003968:	2b00      	cmp	r3, #0
 800396a:	d014      	beq.n	8003996 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800396c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800397c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003988:	2b00      	cmp	r3, #0
 800398a:	d03a      	beq.n	8003a02 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4798      	blx	r3
    }
    return;
 8003994:	e035      	b.n	8003a02 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800399a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_UART_IRQHandler+0x62e>
 80039a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fca9 	bl	8004306 <UART_EndTransmit_IT>
    return;
 80039b4:	e026      	b.n	8003a04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80039b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <HAL_UART_IRQHandler+0x64e>
 80039c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fcd8 	bl	8004384 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039d4:	e016      	b.n	8003a04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80039d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d010      	beq.n	8003a04 <HAL_UART_IRQHandler+0x67c>
 80039e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	da0c      	bge.n	8003a04 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fcc0 	bl	8004370 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039f0:	e008      	b.n	8003a04 <HAL_UART_IRQHandler+0x67c>
      return;
 80039f2:	bf00      	nop
 80039f4:	e006      	b.n	8003a04 <HAL_UART_IRQHandler+0x67c>
    return;
 80039f6:	bf00      	nop
 80039f8:	e004      	b.n	8003a04 <HAL_UART_IRQHandler+0x67c>
      return;
 80039fa:	bf00      	nop
 80039fc:	e002      	b.n	8003a04 <HAL_UART_IRQHandler+0x67c>
      return;
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <HAL_UART_IRQHandler+0x67c>
    return;
 8003a02:	bf00      	nop
  }
}
 8003a04:	37e8      	adds	r7, #232	@ 0xe8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop

08003a0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a50:	b08c      	sub	sp, #48	@ 0x30
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4baf      	ldr	r3, [pc, #700]	@ (8003d38 <UART_SetConfig+0x2ec>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4aa4      	ldr	r2, [pc, #656]	@ (8003d3c <UART_SetConfig+0x2f0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d004      	beq.n	8003ab8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003ac2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad6:	f023 010f 	bic.w	r1, r3, #15
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a95      	ldr	r2, [pc, #596]	@ (8003d40 <UART_SetConfig+0x2f4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d125      	bne.n	8003b3c <UART_SetConfig+0xf0>
 8003af0:	2003      	movs	r0, #3
 8003af2:	f7ff fb43 	bl	800317c <LL_RCC_GetUSARTClockSource>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d81b      	bhi.n	8003b34 <UART_SetConfig+0xe8>
 8003afc:	a201      	add	r2, pc, #4	@ (adr r2, 8003b04 <UART_SetConfig+0xb8>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b15 	.word	0x08003b15
 8003b08:	08003b25 	.word	0x08003b25
 8003b0c:	08003b1d 	.word	0x08003b1d
 8003b10:	08003b2d 	.word	0x08003b2d
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b1a:	e042      	b.n	8003ba2 <UART_SetConfig+0x156>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b22:	e03e      	b.n	8003ba2 <UART_SetConfig+0x156>
 8003b24:	2304      	movs	r3, #4
 8003b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b2a:	e03a      	b.n	8003ba2 <UART_SetConfig+0x156>
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b32:	e036      	b.n	8003ba2 <UART_SetConfig+0x156>
 8003b34:	2310      	movs	r3, #16
 8003b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b3a:	e032      	b.n	8003ba2 <UART_SetConfig+0x156>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a7e      	ldr	r2, [pc, #504]	@ (8003d3c <UART_SetConfig+0x2f0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d12a      	bne.n	8003b9c <UART_SetConfig+0x150>
 8003b46:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003b4a:	f7ff fb27 	bl	800319c <LL_RCC_GetLPUARTClockSource>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b54:	d01a      	beq.n	8003b8c <UART_SetConfig+0x140>
 8003b56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b5a:	d81b      	bhi.n	8003b94 <UART_SetConfig+0x148>
 8003b5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b60:	d00c      	beq.n	8003b7c <UART_SetConfig+0x130>
 8003b62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b66:	d815      	bhi.n	8003b94 <UART_SetConfig+0x148>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <UART_SetConfig+0x128>
 8003b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b70:	d008      	beq.n	8003b84 <UART_SetConfig+0x138>
 8003b72:	e00f      	b.n	8003b94 <UART_SetConfig+0x148>
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7a:	e012      	b.n	8003ba2 <UART_SetConfig+0x156>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b82:	e00e      	b.n	8003ba2 <UART_SetConfig+0x156>
 8003b84:	2304      	movs	r3, #4
 8003b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b8a:	e00a      	b.n	8003ba2 <UART_SetConfig+0x156>
 8003b8c:	2308      	movs	r3, #8
 8003b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b92:	e006      	b.n	8003ba2 <UART_SetConfig+0x156>
 8003b94:	2310      	movs	r3, #16
 8003b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b9a:	e002      	b.n	8003ba2 <UART_SetConfig+0x156>
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a65      	ldr	r2, [pc, #404]	@ (8003d3c <UART_SetConfig+0x2f0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	f040 8097 	bne.w	8003cdc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d823      	bhi.n	8003bfe <UART_SetConfig+0x1b2>
 8003bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bbc <UART_SetConfig+0x170>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003be1 	.word	0x08003be1
 8003bc0:	08003bff 	.word	0x08003bff
 8003bc4:	08003be9 	.word	0x08003be9
 8003bc8:	08003bff 	.word	0x08003bff
 8003bcc:	08003bef 	.word	0x08003bef
 8003bd0:	08003bff 	.word	0x08003bff
 8003bd4:	08003bff 	.word	0x08003bff
 8003bd8:	08003bff 	.word	0x08003bff
 8003bdc:	08003bf7 	.word	0x08003bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be0:	f7fe fdc8 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8003be4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003be6:	e010      	b.n	8003c0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be8:	4b56      	ldr	r3, [pc, #344]	@ (8003d44 <UART_SetConfig+0x2f8>)
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bec:	e00d      	b.n	8003c0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bee:	f7fe fd41 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8003bf2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bf4:	e009      	b.n	8003c0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bfc:	e005      	b.n	8003c0a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 812b 	beq.w	8003e68 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	4a4c      	ldr	r2, [pc, #304]	@ (8003d48 <UART_SetConfig+0x2fc>)
 8003c18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	4413      	add	r3, r2
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d305      	bcc.n	8003c42 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d903      	bls.n	8003c4a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c48:	e10e      	b.n	8003e68 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	60fa      	str	r2, [r7, #12]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	4a3c      	ldr	r2, [pc, #240]	@ (8003d48 <UART_SetConfig+0x2fc>)
 8003c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2200      	movs	r2, #0
 8003c60:	603b      	str	r3, [r7, #0]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c6c:	f7fc fa8e 	bl	800018c <__aeabi_uldivmod>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4610      	mov	r0, r2
 8003c76:	4619      	mov	r1, r3
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	020b      	lsls	r3, r1, #8
 8003c82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c86:	0202      	lsls	r2, r0, #8
 8003c88:	6979      	ldr	r1, [r7, #20]
 8003c8a:	6849      	ldr	r1, [r1, #4]
 8003c8c:	0849      	lsrs	r1, r1, #1
 8003c8e:	2000      	movs	r0, #0
 8003c90:	460c      	mov	r4, r1
 8003c92:	4605      	mov	r5, r0
 8003c94:	eb12 0804 	adds.w	r8, r2, r4
 8003c98:	eb43 0905 	adc.w	r9, r3, r5
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	469a      	mov	sl, r3
 8003ca4:	4693      	mov	fp, r2
 8003ca6:	4652      	mov	r2, sl
 8003ca8:	465b      	mov	r3, fp
 8003caa:	4640      	mov	r0, r8
 8003cac:	4649      	mov	r1, r9
 8003cae:	f7fc fa6d 	bl	800018c <__aeabi_uldivmod>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cc0:	d308      	bcc.n	8003cd4 <UART_SetConfig+0x288>
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cc8:	d204      	bcs.n	8003cd4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6a3a      	ldr	r2, [r7, #32]
 8003cd0:	60da      	str	r2, [r3, #12]
 8003cd2:	e0c9      	b.n	8003e68 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003cda:	e0c5      	b.n	8003e68 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ce4:	d16d      	bne.n	8003dc2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003ce6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003cea:	3b01      	subs	r3, #1
 8003cec:	2b07      	cmp	r3, #7
 8003cee:	d82d      	bhi.n	8003d4c <UART_SetConfig+0x300>
 8003cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf8 <UART_SetConfig+0x2ac>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d19 	.word	0x08003d19
 8003cfc:	08003d21 	.word	0x08003d21
 8003d00:	08003d4d 	.word	0x08003d4d
 8003d04:	08003d27 	.word	0x08003d27
 8003d08:	08003d4d 	.word	0x08003d4d
 8003d0c:	08003d4d 	.word	0x08003d4d
 8003d10:	08003d4d 	.word	0x08003d4d
 8003d14:	08003d2f 	.word	0x08003d2f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d18:	f7fe fd42 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8003d1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d1e:	e01b      	b.n	8003d58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d20:	4b08      	ldr	r3, [pc, #32]	@ (8003d44 <UART_SetConfig+0x2f8>)
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d24:	e018      	b.n	8003d58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d26:	f7fe fca5 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8003d2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d2c:	e014      	b.n	8003d58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d34:	e010      	b.n	8003d58 <UART_SetConfig+0x30c>
 8003d36:	bf00      	nop
 8003d38:	cfff69f3 	.word	0xcfff69f3
 8003d3c:	40008000 	.word	0x40008000
 8003d40:	40013800 	.word	0x40013800
 8003d44:	00f42400 	.word	0x00f42400
 8003d48:	08004740 	.word	0x08004740
      default:
        pclk = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8084 	beq.w	8003e68 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	4a4b      	ldr	r2, [pc, #300]	@ (8003e94 <UART_SetConfig+0x448>)
 8003d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d72:	005a      	lsls	r2, r3, #1
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	085b      	lsrs	r3, r3, #1
 8003d7a:	441a      	add	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	2b0f      	cmp	r3, #15
 8003d8a:	d916      	bls.n	8003dba <UART_SetConfig+0x36e>
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d92:	d212      	bcs.n	8003dba <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f023 030f 	bic.w	r3, r3, #15
 8003d9c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	8bfb      	ldrh	r3, [r7, #30]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	8bfa      	ldrh	r2, [r7, #30]
 8003db6:	60da      	str	r2, [r3, #12]
 8003db8:	e056      	b.n	8003e68 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003dc0:	e052      	b.n	8003e68 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	2b07      	cmp	r3, #7
 8003dca:	d822      	bhi.n	8003e12 <UART_SetConfig+0x3c6>
 8003dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd4 <UART_SetConfig+0x388>)
 8003dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd2:	bf00      	nop
 8003dd4:	08003df5 	.word	0x08003df5
 8003dd8:	08003dfd 	.word	0x08003dfd
 8003ddc:	08003e13 	.word	0x08003e13
 8003de0:	08003e03 	.word	0x08003e03
 8003de4:	08003e13 	.word	0x08003e13
 8003de8:	08003e13 	.word	0x08003e13
 8003dec:	08003e13 	.word	0x08003e13
 8003df0:	08003e0b 	.word	0x08003e0b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df4:	f7fe fcd4 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8003df8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dfa:	e010      	b.n	8003e1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dfc:	4b26      	ldr	r3, [pc, #152]	@ (8003e98 <UART_SetConfig+0x44c>)
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e00:	e00d      	b.n	8003e1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e02:	f7fe fc37 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8003e06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e08:	e009      	b.n	8003e1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e10:	e005      	b.n	8003e1e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e1c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d021      	beq.n	8003e68 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	4a1a      	ldr	r2, [pc, #104]	@ (8003e94 <UART_SetConfig+0x448>)
 8003e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e32:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	441a      	add	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	2b0f      	cmp	r3, #15
 8003e4c:	d909      	bls.n	8003e62 <UART_SetConfig+0x416>
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e54:	d205      	bcs.n	8003e62 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	e002      	b.n	8003e68 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003e84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3730      	adds	r7, #48	@ 0x30
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e92:	bf00      	nop
 8003e94:	08004740 	.word	0x08004740
 8003e98:	00f42400 	.word	0x00f42400

08003e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01a      	beq.n	8003fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f9a:	d10a      	bne.n	8003fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b098      	sub	sp, #96	@ 0x60
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ff0:	f7fc fea6 	bl	8000d40 <HAL_GetTick>
 8003ff4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b08      	cmp	r3, #8
 8004002:	d12f      	bne.n	8004064 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400c:	2200      	movs	r2, #0
 800400e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f88e 	bl	8004134 <UART_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d022      	beq.n	8004064 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800402c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004032:	653b      	str	r3, [r7, #80]	@ 0x50
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800403c:	647b      	str	r3, [r7, #68]	@ 0x44
 800403e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800404a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e6      	bne.n	800401e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e063      	b.n	800412c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b04      	cmp	r3, #4
 8004070:	d149      	bne.n	8004106 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004072:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407a:	2200      	movs	r2, #0
 800407c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f857 	bl	8004134 <UART_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d03c      	beq.n	8004106 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	623b      	str	r3, [r7, #32]
   return(result);
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e6      	bne.n	800408c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3308      	adds	r3, #8
 80040c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3308      	adds	r3, #8
 80040dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040de:	61fa      	str	r2, [r7, #28]
 80040e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	69b9      	ldr	r1, [r7, #24]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	617b      	str	r3, [r7, #20]
   return(result);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e5      	bne.n	80040be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e012      	b.n	800412c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3758      	adds	r7, #88	@ 0x58
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004144:	e04f      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414c:	d04b      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414e:	f7fc fdf7 	bl	8000d40 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	429a      	cmp	r2, r3
 800415c:	d302      	bcc.n	8004164 <UART_WaitOnFlagUntilTimeout+0x30>
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e04e      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d037      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b80      	cmp	r3, #128	@ 0x80
 800417a:	d034      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b40      	cmp	r3, #64	@ 0x40
 8004180:	d031      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b08      	cmp	r3, #8
 800418e:	d110      	bne.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2208      	movs	r2, #8
 8004196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f838 	bl	800420e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2208      	movs	r2, #8
 80041a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e029      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041c0:	d111      	bne.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f81e 	bl	800420e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e00f      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4013      	ands	r3, r2
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	bf0c      	ite	eq
 80041f6:	2301      	moveq	r3, #1
 80041f8:	2300      	movne	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	429a      	cmp	r2, r3
 8004202:	d0a0      	beq.n	8004146 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800420e:	b480      	push	{r7}
 8004210:	b095      	sub	sp, #84	@ 0x54
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004226:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800422a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004234:	643b      	str	r3, [r7, #64]	@ 0x40
 8004236:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800423a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e6      	bne.n	8004216 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3308      	adds	r3, #8
 800424e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	61fb      	str	r3, [r7, #28]
   return(result);
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3308      	adds	r3, #8
 800426a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800426c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800426e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e3      	bne.n	8004248 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004284:	2b01      	cmp	r3, #1
 8004286:	d118      	bne.n	80042ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	60bb      	str	r3, [r7, #8]
   return(result);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f023 0310 	bic.w	r3, r3, #16
 800429c:	647b      	str	r3, [r7, #68]	@ 0x44
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	6979      	ldr	r1, [r7, #20]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	613b      	str	r3, [r7, #16]
   return(result);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e6      	bne.n	8004288 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042ce:	bf00      	nop
 80042d0:	3754      	adds	r7, #84	@ 0x54
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b084      	sub	sp, #16
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff fb91 	bl	8003a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b088      	sub	sp, #32
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	60bb      	str	r3, [r7, #8]
   return(result);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	6979      	ldr	r1, [r7, #20]
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	613b      	str	r3, [r7, #16]
   return(result);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e6      	bne.n	800430e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff fb5c 	bl	8003a0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004354:	bf00      	nop
 8004356:	3720      	adds	r7, #32
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_UARTEx_DisableFifoMode+0x16>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e027      	b.n	80043fe <HAL_UARTEx_DisableFifoMode+0x66>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2224      	movs	r2, #36	@ 0x24
 80043ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0201 	bic.w	r2, r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80043dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800441e:	2302      	movs	r3, #2
 8004420:	e02d      	b.n	800447e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2224      	movs	r2, #36	@ 0x24
 800442e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0201 	bic.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f850 	bl	8004504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800449a:	2302      	movs	r3, #2
 800449c:	e02d      	b.n	80044fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2224      	movs	r2, #36	@ 0x24
 80044aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0201 	bic.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f812 	bl	8004504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004510:	2b00      	cmp	r3, #0
 8004512:	d108      	bne.n	8004526 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004524:	e031      	b.n	800458a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004526:	2308      	movs	r3, #8
 8004528:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800452a:	2308      	movs	r3, #8
 800452c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	0e5b      	lsrs	r3, r3, #25
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	0f5b      	lsrs	r3, r3, #29
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800454e:	7bbb      	ldrb	r3, [r7, #14]
 8004550:	7b3a      	ldrb	r2, [r7, #12]
 8004552:	4911      	ldr	r1, [pc, #68]	@ (8004598 <UARTEx_SetNbDataToProcess+0x94>)
 8004554:	5c8a      	ldrb	r2, [r1, r2]
 8004556:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800455a:	7b3a      	ldrb	r2, [r7, #12]
 800455c:	490f      	ldr	r1, [pc, #60]	@ (800459c <UARTEx_SetNbDataToProcess+0x98>)
 800455e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004560:	fb93 f3f2 	sdiv	r3, r3, r2
 8004564:	b29a      	uxth	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	7b7a      	ldrb	r2, [r7, #13]
 8004570:	4909      	ldr	r1, [pc, #36]	@ (8004598 <UARTEx_SetNbDataToProcess+0x94>)
 8004572:	5c8a      	ldrb	r2, [r1, r2]
 8004574:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004578:	7b7a      	ldrb	r2, [r7, #13]
 800457a:	4908      	ldr	r1, [pc, #32]	@ (800459c <UARTEx_SetNbDataToProcess+0x98>)
 800457c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800457e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004582:	b29a      	uxth	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800458a:	bf00      	nop
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	08004758 	.word	0x08004758
 800459c:	08004760 	.word	0x08004760

080045a0 <memset>:
 80045a0:	4402      	add	r2, r0
 80045a2:	4603      	mov	r3, r0
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d100      	bne.n	80045aa <memset+0xa>
 80045a8:	4770      	bx	lr
 80045aa:	f803 1b01 	strb.w	r1, [r3], #1
 80045ae:	e7f9      	b.n	80045a4 <memset+0x4>

080045b0 <__libc_init_array>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	4d0d      	ldr	r5, [pc, #52]	@ (80045e8 <__libc_init_array+0x38>)
 80045b4:	4c0d      	ldr	r4, [pc, #52]	@ (80045ec <__libc_init_array+0x3c>)
 80045b6:	1b64      	subs	r4, r4, r5
 80045b8:	10a4      	asrs	r4, r4, #2
 80045ba:	2600      	movs	r6, #0
 80045bc:	42a6      	cmp	r6, r4
 80045be:	d109      	bne.n	80045d4 <__libc_init_array+0x24>
 80045c0:	4d0b      	ldr	r5, [pc, #44]	@ (80045f0 <__libc_init_array+0x40>)
 80045c2:	4c0c      	ldr	r4, [pc, #48]	@ (80045f4 <__libc_init_array+0x44>)
 80045c4:	f000 f818 	bl	80045f8 <_init>
 80045c8:	1b64      	subs	r4, r4, r5
 80045ca:	10a4      	asrs	r4, r4, #2
 80045cc:	2600      	movs	r6, #0
 80045ce:	42a6      	cmp	r6, r4
 80045d0:	d105      	bne.n	80045de <__libc_init_array+0x2e>
 80045d2:	bd70      	pop	{r4, r5, r6, pc}
 80045d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d8:	4798      	blx	r3
 80045da:	3601      	adds	r6, #1
 80045dc:	e7ee      	b.n	80045bc <__libc_init_array+0xc>
 80045de:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e2:	4798      	blx	r3
 80045e4:	3601      	adds	r6, #1
 80045e6:	e7f2      	b.n	80045ce <__libc_init_array+0x1e>
 80045e8:	08004770 	.word	0x08004770
 80045ec:	08004770 	.word	0x08004770
 80045f0:	08004770 	.word	0x08004770
 80045f4:	08004774 	.word	0x08004774

080045f8 <_init>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	bf00      	nop
 80045fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fe:	bc08      	pop	{r3}
 8004600:	469e      	mov	lr, r3
 8004602:	4770      	bx	lr

08004604 <_fini>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	bf00      	nop
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr
